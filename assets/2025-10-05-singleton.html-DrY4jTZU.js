import{_ as c,c as r,a,b as s,d,f as l,r as i,o as u,e as t}from"./app-DIY_KUuF.js";const k={},g={class:"table-of-contents"};function v(m,n){const o=i("Header"),e=i("router-link"),p=i("Footer");return u(),r("div",null,[a(o),s("nav",g,[s("ul",null,[s("li",null,[a(e,{to:"#_1-싱글톤-패턴이란"},{default:l(()=>n[0]||(n[0]=[t("1. 싱글톤 패턴이란?")])),_:1})]),s("li",null,[a(e,{to:"#_2-싱글톤-패턴-구현"},{default:l(()=>n[1]||(n[1]=[t("2. 싱글톤 패턴 구현")])),_:1})]),s("li",null,[a(e,{to:"#_3-static-class-로딩과-초기화"},{default:l(()=>n[2]||(n[2]=[t("3. static class 로딩과 초기화")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_3-1-자바의-클래스-로딩-과정"},{default:l(()=>n[3]||(n[3]=[t("3.1 자바의 클래스 로딩 과정")])),_:1})]),s("li",null,[a(e,{to:"#_3-2-singleton-클래스-초기화-과정"},{default:l(()=>n[4]||(n[4]=[t("3.2 Singleton 클래스 초기화 과정")])),_:1})]),s("li",null,[a(e,{to:"#_3-3-이-패턴의-장점"},{default:l(()=>n[5]||(n[5]=[t("## 3.3 이 패턴의 장점")])),_:1})])])]),s("li",null,[a(e,{to:"#ref"},{default:l(()=>n[6]||(n[6]=[t("Ref.")])),_:1})])])]),n[7]||(n[7]=d(`<h1 id="_1-싱글톤-패턴이란" tabindex="-1"><a class="header-anchor" href="#_1-싱글톤-패턴이란"><span>1. 싱글톤 패턴이란?</span></a></h1><p>싱글톤 패턴이란 단 하나의 유일한 객체를 만들기 위한 패턴이다.</p><p>객체가 리소스를 많이 차지할 때 (DB연결, 네트워크 통신 등) 굳이 <u>새로 만들지 않고 기존의 인스턴스를 가져와 활용하는 패턴</u>이다.</p><h1 id="_2-싱글톤-패턴-구현" tabindex="-1"><a class="header-anchor" href="#_2-싱글톤-패턴-구현"><span>2. 싱글톤 패턴 구현</span></a></h1><p>싱글톤 패턴은 다음 7가지로 구현할 수 있는데 이중 Bill Pugh Solution 으로 구현해본다.</p><blockquote><ol><li>Eager Initialization</li><li>Static block initialization</li><li>Lazy initialization</li><li>Thread safe initialization</li><li>Double-Checked Locking</li><li>Bill Pugh Solution</li><li>Enum 이용</li></ol></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// static 내부 클래스를 이용</span></span>
<span class="line">    <span class="token comment">// Holder로 만들어, 클래스가 메모리에 로드되지 않고 getInstance 메서드가 호출되어야 로드됨</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingleInstanceHolder</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">SingleInstanceHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_3-static-class-로딩과-초기화" tabindex="-1"><a class="header-anchor" href="#_3-static-class-로딩과-초기화"><span>3. static class 로딩과 초기화</span></a></h1><blockquote><p>“클래스가 메모리에 로드되지 않고, getInstance() 메서드가 호출되어야 로드됨”</p></blockquote><p>이 말은 곧 <strong><code>SingleInstanceHolder</code>라는 내부 static 클래스는, 외부 클래스(Singleton)가 로드될 때 즉시 메모리에 올라가지 않는다</strong>는 뜻이다. 즉, <code>Singleton</code> 클래스 자체는 프로그램이 실행되면서 로드되지만, 그 안의 내부 클래스 <code>SingleInstanceHolder</code>는 <code>getInstance()</code> 메서드가 처음 호출되는 순간에야 JVM이 로드하고 초기화한다.</p><h2 id="_3-1-자바의-클래스-로딩-과정" tabindex="-1"><a class="header-anchor" href="#_3-1-자바의-클래스-로딩-과정"><span>3.1 자바의 클래스 로딩 과정</span></a></h2><p>JVM에서 클래스가 메모리에 올라가는 과정은 보통 이렇게 이루어진다.</p><ol><li><strong>Loading</strong> : .class 파일을 읽어 메타데이터를 메모리에 올림</li><li><strong>Linking</strong> : 상수 풀, static 필드, 메서드 시그니처 등을 확인 및 준비</li><li><strong>Initialization</strong> : static 필드 초기화 및 static 블록 실행</li></ol><p>즉, 클래스가 **&quot;로딩되고 초기화된다&quot;**는 건 그 클래스의 static 필드나 static 블록이 실행될 준비가 되었다는 뜻이다.</p><h2 id="_3-2-singleton-클래스-초기화-과정" tabindex="-1"><a class="header-anchor" href="#_3-2-singleton-클래스-초기화-과정"><span>3.2 Singleton 클래스 초기화 과정</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingleInstanceHolder</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">SingleInstanceHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>프로그램이 시작해서 <code>Singleton</code> 클래스를 처음 참조할 때, JVM은 <code>Singleton</code> 클래스를 <strong>로드 및 초기화</strong>함. 하지만 이 시점에는 <strong><code>SingleInstanceHolder</code> 클래스는 로드되지 않음</strong></li><li>누군가 <code>Singleton.getInstance()</code>를 호출하는 순간, JVM은 내부 static 클래스인 <code>SingleInstanceHolder</code>를 <strong>처음으로 참조</strong>하게 됨.</li><li>그때 <strong><code>SingleInstanceHolder</code> 클래스가 로드 및 초기화되고</strong> 그 안의 static 필드 <code>INSTANCE = new Singleton()</code>이 실행됨</li></ol><p>즉, <code>INSTANCE</code> 객체는 <strong>getInstance()가 처음 호출될 때 단 한 번 생성</strong>된다.</p><h2 id="_3-3-이-패턴의-장점" tabindex="-1"><a class="header-anchor" href="#_3-3-이-패턴의-장점"><span>## 3.3 이 패턴의 장점</span></a></h2><ul><li><strong>Lazy Initialization</strong> : <code>Singleton</code> 인스턴스는 필요할 때까지 생성되지 않음 (처음부터 메모리를 차지하지 않음)</li><li><strong>Thread Safe</strong> : JVM의 클래스 로더 초기화 과정은 thread-safe하므로 별도의 synchronized 처리가 필요 없음</li><li><strong>성능 우수</strong> : 불필요한 동기화 비용 없이 지연 초기화를 구현 가능</li></ul><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>Ref.</span></a></h1><ul><li><a href="https://inpa.tistory.com/entry/GOF-%F0%9F%92%A0-%EC%8B%B1%EA%B8%80%ED%86%A4Singleton-%ED%8C%A8%ED%84%B4-%EA%BC%BC%EA%BC%BC%ED%95%98%EA%B2%8C-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90" target="_blank" rel="noopener noreferrer">싱글톤(Singleton) 패턴 - 꼼꼼하게 알아보자</a></li></ul>`,22)),a(p)])}const b=c(k,[["render",v],["__file","2025-10-05-singleton.html.vue"]]),S=JSON.parse('{"path":"/posts/java/2025-10-05-singleton.html","title":"[구현] 싱글톤 객체 구현","lang":"en-US","frontmatter":{"title":"[구현] 싱글톤 객체 구현","date":"2025-10-05T00:00:00.000Z","tags":["java","singleton"],"description":"싱글톤 패턴을 적용한 싱글톤 객체"},"headers":[{"level":1,"title":"1. 싱글톤 패턴이란?","slug":"_1-싱글톤-패턴이란","link":"#_1-싱글톤-패턴이란","children":[]},{"level":1,"title":"2. 싱글톤 패턴 구현","slug":"_2-싱글톤-패턴-구현","link":"#_2-싱글톤-패턴-구현","children":[]},{"level":1,"title":"3. static class 로딩과 초기화","slug":"_3-static-class-로딩과-초기화","link":"#_3-static-class-로딩과-초기화","children":[{"level":2,"title":"3.1 자바의 클래스 로딩 과정","slug":"_3-1-자바의-클래스-로딩-과정","link":"#_3-1-자바의-클래스-로딩-과정","children":[]},{"level":2,"title":"3.2 Singleton 클래스 초기화 과정","slug":"_3-2-singleton-클래스-초기화-과정","link":"#_3-2-singleton-클래스-초기화-과정","children":[]},{"level":2,"title":"## 3.3 이 패턴의 장점","slug":"_3-3-이-패턴의-장점","link":"#_3-3-이-패턴의-장점","children":[]}]},{"level":1,"title":"Ref.","slug":"ref","link":"#ref","children":[]}],"git":{},"filePathRelative":"_posts/java/2025-10-05-singleton.md"}');export{b as comp,S as data};
