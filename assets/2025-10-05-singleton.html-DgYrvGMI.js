import{_ as c,c as r,a as s,b as a,d as u,f as t,r as p,o as d,e as l}from"./app-BdGmrpQV.js";const k={},v={class:"table-of-contents"};function m(h,n){const o=p("Header"),e=p("router-link"),i=p("Footer");return d(),r("div",null,[s(o),a("nav",v,[a("ul",null,[a("li",null,[s(e,{to:"#_1-싱글톤-패턴이란"},{default:t(()=>n[0]||(n[0]=[l("1. 싱글톤 패턴이란?")])),_:1})]),a("li",null,[s(e,{to:"#_2-싱글톤-패턴-구현"},{default:t(()=>n[1]||(n[1]=[l("2. 싱글톤 패턴 구현")])),_:1})]),a("li",null,[s(e,{to:"#_3-싱글톤-패턴의-단점"},{default:t(()=>n[2]||(n[2]=[l("3. 싱글톤 패턴의 단점")])),_:1})]),a("li",null,[s(e,{to:"#ref"},{default:t(()=>n[3]||(n[3]=[l("Ref.")])),_:1})])])]),n[4]||(n[4]=u(`<h1 id="_1-싱글톤-패턴이란" tabindex="-1"><a class="header-anchor" href="#_1-싱글톤-패턴이란"><span>1. 싱글톤 패턴이란?</span></a></h1><p>싱글톤 패턴이란 단 하나의 유일한 객체를 만들기 위한 패턴이다.</p><p>객체가 리소스를 많이 차지할 때 (DB연결, 네트워크 통신 등) 굳이 <u>새로 만들지 않고 기존의 인스턴스를 가져와 활용하는 패턴</u>이다.</p><h1 id="_2-싱글톤-패턴-구현" tabindex="-1"><a class="header-anchor" href="#_2-싱글톤-패턴-구현"><span>2. 싱글톤 패턴 구현</span></a></h1><p>싱글톤 패턴은 다음 7가지로 구현할 수 있는데 이중 Bill Pugh Solution 으로 구현한다.</p><blockquote><ol><li>Eager Initialization</li><li>Static block initialization</li><li>Lazy initialization</li><li>Thread safe initialization</li><li>Double-Checked Locking</li><li>Bill Pugh Solution</li><li>Enum 이용</li></ol></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// static 내부 클래스를 이용</span></span>
<span class="line">    <span class="token comment">// Holder로 만들어, 클래스가 메모리에 로드되지 않고 getInstance 메서드가 호출되어야 로드됨</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingleInstanceHolder</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">SingleInstanceHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">출처<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>inpa<span class="token punctuation">.</span>tistory<span class="token punctuation">.</span>com<span class="token operator">/</span>entry<span class="token operator">/</span><span class="token constant">GOF</span><span class="token operator">-</span>💠<span class="token operator">-</span>싱글톤<span class="token class-name">Singleton</span><span class="token operator">-</span>패턴<span class="token operator">-</span>꼼꼼하게<span class="token operator">-</span>알아보자 <span class="token punctuation">[</span><span class="token class-name">Inpa</span> <span class="token class-name">Dev</span> 👨‍💻<span class="token operator">:</span>티스토리<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_3-싱글톤-패턴의-단점" tabindex="-1"><a class="header-anchor" href="#_3-싱글톤-패턴의-단점"><span>3. 싱글톤 패턴의 단점</span></a></h1><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>Ref.</span></a></h1><ul><li><a href="https://inpa.tistory.com/entry/GOF-%F0%9F%92%A0-%EC%8B%B1%EA%B8%80%ED%86%A4Singleton-%ED%8C%A8%ED%84%B4-%EA%BC%BC%EA%BC%BC%ED%95%98%EA%B2%8C-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90" target="_blank" rel="noopener noreferrer">싱글톤(Singleton) 패턴 - 꼼꼼하게 알아보자</a></li></ul>`,10)),s(i)])}const _=c(k,[["render",m],["__file","2025-10-05-singleton.html.vue"]]),f=JSON.parse('{"path":"/posts/java/2025-10-05-singleton.html","title":"[구현] 싱글톤 객체 구현","lang":"en-US","frontmatter":{"title":"[구현] 싱글톤 객체 구현","date":"2025-10-05T00:00:00.000Z","tags":["java","singleton"],"description":"싱글톤 패턴을 적용한 싱글톤 객체"},"headers":[{"level":1,"title":"1. 싱글톤 패턴이란?","slug":"_1-싱글톤-패턴이란","link":"#_1-싱글톤-패턴이란","children":[]},{"level":1,"title":"2. 싱글톤 패턴 구현","slug":"_2-싱글톤-패턴-구현","link":"#_2-싱글톤-패턴-구현","children":[]},{"level":1,"title":"3. 싱글톤 패턴의 단점","slug":"_3-싱글톤-패턴의-단점","link":"#_3-싱글톤-패턴의-단점","children":[]},{"level":1,"title":"Ref.","slug":"ref","link":"#ref","children":[]}],"git":{},"filePathRelative":"_posts/java/2025-10-05-singleton.md"}');export{_ as comp,f as data};
