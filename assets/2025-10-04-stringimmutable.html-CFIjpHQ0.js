import{_ as s,c as a,d as t,o as e}from"./app-dXp5MBUq.js";const p={};function i(l,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="_1-string-은-불변인가요" tabindex="-1"><a class="header-anchor" href="#_1-string-은-불변인가요"><span>1. String 은 불변인가요?</span></a></h1><p>그렇다. String 은 불변이라는 사실은 자바의 기초에서 다룬다. String 은 불변이고 변경될 수 없다. 하지만 왜 불변이고 특성이 무엇일까?</p><h2 id="_1-1-string-이-불변인-이유" tabindex="-1"><a class="header-anchor" href="#_1-1-string-이-불변인-이유"><span>1.1 String 이 불변인 이유</span></a></h2><ol><li><p><strong>보안</strong></p><p>Stirng 은 class loader, 데이터베이스 연결 정보, 파일 경로, 비밀번호 등 어디에서나 사용된다. 만약 문자열이 변경가능하다면 다음과 같은 이슈가 발생할 수 있다.</p><ul><li>비밀번호 문자열을 설정했는데, 다른 스레드가 도중에 값을 바꿔버린다면?</li><li>클래스 로더가 &quot;java.lang.System&quot;이라는 이름을 받았는데, 실행 도중에 &quot;java.lang.Hacker&quot;로 변해버린다면?</li></ul></li><li><p><strong>해시맵 안정성</strong></p><p>String 은 해시맵의 키로 사용될 수 있다. 만약 String 이 변경 가능하면 <u>해시코드 또한 변경될 수 있다는 얘기</u>다. 반대로, 불변으로 설정함으로써 해시코드 또한 변경할 수 없고 String 은 해시맵의 키로 사용될 수 있다.</p></li><li><p><strong>스레드 안정성</strong></p><p>멀티 스레드 환경에서 race condition 에 대한 걱정 없이 String 을 사용할 수 있다. 추가적인 lock 이 필요없다.</p></li><li><p><strong>String pool</strong></p><p>자바는 스트링풀을 사용해서 같은 String 에 대해 재생성을 하지 않고 재사용한다. 만약 String 이 변경가능하다면 참조하는 모든 값이 변경되므로 의도치 않은 에러가 발생한다.</p></li></ol><h2 id="_1-2-string-pool" tabindex="-1"><a class="header-anchor" href="#_1-2-string-pool"><span>1.2 String pool</span></a></h2><p>String Pool 은 Java에서 문자열 리터럴을 저장하여 중복 생성을 방지하고 메모리 사용을 최적화하는 힙(Heap) 메모리 영역의 특별한 공간이다.</p><p><u>문자열 리터럴로 문자열을 생성하면 먼저 스트링 풀에서 같은 문자열이 있는지 확인하고, 있다면 해당 문자열 객체의 참조를 반환하며, 없다면 새로 생성하여 스트링 풀에 추가 후 참조를 반환</u>한다.</p><p>그럼 다음 코드를 보자</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>해당 코드의 결과는 <strong>&quot;false&quot;</strong> 이다. 그 이유는 &quot;Java&quot; 는 string pool 로 들어가지만 <u><code>new String(&quot;Java&quot;)</code> 는 힙 영역의 새로운 객체로 생성</u>된다. 따라서 a 와 b 의 참조값이 다르므로 false 가 출력된다.</p><blockquote><p>반면 <code>a.equals(b)</code> 는 true 가 출력된다. equals 는 &quot;동등성&quot;을 비교하는데, <u>String.equals() 는 자신의 byte[] 값을 순회하면서 하나씩 비교하기 때문이다.</u></p></blockquote><p>만약 동일하게 만들고 싶다면 <code>intern()</code> 을 사용하면 된다. 해당 메서드로 new 로 생성된 String 을 String pool 에 넣는다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_2-가변-string-은-stringbuilder-사용" tabindex="-1"><a class="header-anchor" href="#_2-가변-string-은-stringbuilder-사용"><span>2. 가변 String 은 StringBuilder 사용</span></a></h1><p>다음과 같은 경우를 보자</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">concatAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">,</span> <span class="token class-name">String</span> c<span class="token punctuation">,</span> <span class="token class-name">String</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">concatAll</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;is&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>여기서 생성되는 String 은 몇 개인가? 답은 7개이다. 우선 <code>concatAll()</code> 을 호출하기 위한 파라미터로 <code>String</code>, <code>is</code>, <code>immutable</code>, <code>class</code> 가 각각 생성된다.</p><p>그리고 concatAll 에서 바로 <code>String is immutable class</code> 가 생성되는 게 아니다. 다음 순서로 생성된다.</p><ol><li>a + b : <code>String is</code> 생성</li><li><code>String is</code> + c : <code>String is immtable</code> 생성</li><li><code>String is immatable</code> + d : <code>String is immutable class</code></li></ol><p>하지만 최종적으로 필요한 값은 마지막 <code>String is immutable class</code> 이고 이전의 2개는 필요가 없고 곧바로 GC 의 대상이 된다. 이런 비효율을 없애기 위해 <strong>가변적인 String 으로 StringBuilder 를 사용한다.</strong></p><h2 id="_2-1-stringbuilder" tabindex="-1"><a class="header-anchor" href="#_2-1-stringbuilder"><span>2.1 StringBuilder</span></a></h2><p>위 코드는 아래와 같이 만들 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">concatAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">,</span> <span class="token class-name">String</span> c<span class="token punctuation">,</span> <span class="token class-name">String</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  	<span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  	stringBuilder</span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">    <span class="token keyword">return</span> stringBuilder<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">concatAll</span><span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;is&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;immutable&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>concatAll()</code> 메서드 안에서는 stringBuilder 객체만 하나 생성될 뿐이다. 따라서 변경이 필요한 값은 String 을 사용하는 것보다 StringBuilder 가 메모리 사용 측면에서 효율적이다.</p><blockquote><p><code>a + b + c + d;</code> 와 같은 코드는 컴파일될 때 자동으로 StringBuilder 로 치환된다.</p></blockquote><h2 id="_2-2-stringbuffer" tabindex="-1"><a class="header-anchor" href="#_2-2-stringbuffer"><span>2.2 StringBuffer</span></a></h2><p>StringBuffer 는 StringBuilder 와 같은 메서드 (append 등)를 제공하는 가변 문자열 클래스다.반면 동기화 블럭(syncronized)를 통해 멀티스레드 환경에서도 데이터 무결성을 보장한다.</p><p>따라서 여러 스레드가 동시에 접근하더라도 데이터를 안전하게 다룰 수 있지만 동기화로 인해 성능이 약간 떨어질 수 있다.</p><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>Ref.</span></a></h1><ul><li><a href="https://medium.com/javarevisited/my-interviewer-asked-so-is-string-immutable-in-java-5e22579bc69f" target="_blank" rel="noopener noreferrer">my-interviewer-asked-so-is-string-immutable-in-java</a></li><li><a href="https://medium.com/@sunil17bbmp/top-15-java-string-interview-questions-and-answers-for-experienced-professionals-e1f7ab430ae1" target="_blank" rel="noopener noreferrer">top-15-java-string-interview-questions-and-answers-for-experienced-professionals</a></li></ul>`,30)]))}const c=s(p,[["render",i],["__file","2025-10-04-stringimmutable.html.vue"]]),r=JSON.parse('{"path":"/posts/java/2025-10-04-stringimmutable.html","title":"String 은 불변인가요?","lang":"en-US","frontmatter":{"title":"String 은 불변인가요?","date":"2025-10-04T00:00:00.000Z","tags":["java","string"],"description":"String 의 불변 특성에 대해 알아보자"},"headers":[{"level":1,"title":"1. String 은 불변인가요?","slug":"_1-string-은-불변인가요","link":"#_1-string-은-불변인가요","children":[{"level":2,"title":"1.1 String 이 불변인 이유","slug":"_1-1-string-이-불변인-이유","link":"#_1-1-string-이-불변인-이유","children":[]},{"level":2,"title":"1.2 String pool","slug":"_1-2-string-pool","link":"#_1-2-string-pool","children":[]}]},{"level":1,"title":"2. 가변 String 은 StringBuilder 사용","slug":"_2-가변-string-은-stringbuilder-사용","link":"#_2-가변-string-은-stringbuilder-사용","children":[{"level":2,"title":"2.1 StringBuilder","slug":"_2-1-stringbuilder","link":"#_2-1-stringbuilder","children":[]},{"level":2,"title":"2.2 StringBuffer","slug":"_2-2-stringbuffer","link":"#_2-2-stringbuffer","children":[]}]},{"level":1,"title":"Ref.","slug":"ref","link":"#ref","children":[]}],"git":{},"filePathRelative":"_posts/java/2025-10-04-stringimmutable.md"}');export{c as comp,r as data};
