import{_ as d,c as u,a as l,b as t,d as p,e as a,r as s,o as h,f as r}from"./app-BRbVkdW0.js";const f={},c={class:"table-of-contents"};function m(g,e){const o=s("Header"),n=s("router-link"),i=s("Footer");return h(),u("div",null,[l(o),t("nav",c,[t("ul",null,[t("li",null,[l(n,{to:"#문제-상황"},{default:a(()=>e[0]||(e[0]=[r("문제 상황")])),_:1}),t("ul",null,[t("li",null,[l(n,{to:"#문제-원인"},{default:a(()=>e[1]||(e[1]=[r("문제 원인")])),_:1})])])]),t("li",null,[l(n,{to:"#해결-방법"},{default:a(()=>e[2]||(e[2]=[r("해결 방법")])),_:1}),t("ul",null,[t("li",null,[l(n,{to:"#해결-방법-1-코드리뷰"},{default:a(()=>e[3]||(e[3]=[r("해결 방법 1: 코드리뷰")])),_:1})]),t("li",null,[l(n,{to:"#해결-방법-2-테스트-커버리지-툴-도입"},{default:a(()=>e[4]||(e[4]=[r("해결 방법 2: 테스트 커버리지 툴 도입")])),_:1})])])]),t("li",null,[l(n,{to:"#해결"},{default:a(()=>e[5]||(e[5]=[r("해결")])),_:1})]),t("li",null,[l(n,{to:"#ref"},{default:a(()=>e[6]||(e[6]=[r("Ref.")])),_:1})])])]),e[7]||(e[7]=p('<p>나는 개발에서 가장 중요한 활동이 &quot;테스트&quot;라고 생각한다. 개발의 주요한 비기능적 요구사항인 확장성, 안정성, 민첩성 등이 &quot;테스트&quot;를 통해 달성될 수 있기 때문이다.</p><h1 id="문제-상황" tabindex="-1"><a class="header-anchor" href="#문제-상황"><span>문제 상황</span></a></h1><p>현재 백엔드 개발의 80% 이상을 내가 하고 있기 때문에 유닛 테스트와 통합 테스트는 거의 다 내가 작성하고 있다. 그런데 개발이 빠르게 진행되고 있는 과정에서 테스트가 누락되곤 한다.</p><p>테스트가 누락되면 주요하지 않은 기능이라면 문제 없겠지만 코어 기능이라면 나중에 수정이 어려워져 민첩성과 안정성이 떨어진다.</p><h2 id="문제-원인" tabindex="-1"><a class="header-anchor" href="#문제-원인"><span>문제 원인</span></a></h2><p>테스트가 작성되지 않아도 pr -&gt; merge 로 가는 과정에서 merge 를 막아주거나 테스트 작성을 체크해주는 게 없다. 따라서 <strong>테스트가 작성되었는지, 해당 테스트가 적절한지를 확인</strong>해야 한다.</p><h1 id="해결-방법" tabindex="-1"><a class="header-anchor" href="#해결-방법"><span>해결 방법</span></a></h1><h2 id="해결-방법-1-코드리뷰" tabindex="-1"><a class="header-anchor" href="#해결-방법-1-코드리뷰"><span>해결 방법 1: 코드리뷰</span></a></h2><p>테스트가 되었는지 코드리뷰를 한다. 하지만 코드리뷰만으로는 다음과 같은 문제가 있다.</p><h2 id="해결-방법-2-테스트-커버리지-툴-도입" tabindex="-1"><a class="header-anchor" href="#해결-방법-2-테스트-커버리지-툴-도입"><span>해결 방법 2: 테스트 커버리지 툴 도입</span></a></h2><p>테스트 커버리지 툴을 도입한다. kover 와</p><h1 id="해결" tabindex="-1"><a class="header-anchor" href="#해결"><span>해결</span></a></h1><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>Ref.</span></a></h1>',13)),l(i)])}const v=d(f,[["render",m],["__file","2025-08-27-culturetest.html.vue"]]),k=JSON.parse('{"path":"/posts/culture/2025-08-27-culturetest.html","title":"테스트에 대한 개발 문화","lang":"en-US","frontmatter":{"title":"테스트에 대한 개발 문화","date":"2025-08-27T00:00:00.000Z","tags":["개발문화","테스트"],"description":"커밋 메시지를 통한 테스트 커버리지 확인"},"headers":[{"level":1,"title":"문제 상황","slug":"문제-상황","link":"#문제-상황","children":[{"level":2,"title":"문제 원인","slug":"문제-원인","link":"#문제-원인","children":[]}]},{"level":1,"title":"해결 방법","slug":"해결-방법","link":"#해결-방법","children":[{"level":2,"title":"해결 방법 1: 코드리뷰","slug":"해결-방법-1-코드리뷰","link":"#해결-방법-1-코드리뷰","children":[]},{"level":2,"title":"해결 방법 2: 테스트 커버리지 툴 도입","slug":"해결-방법-2-테스트-커버리지-툴-도입","link":"#해결-방법-2-테스트-커버리지-툴-도입","children":[]}]},{"level":1,"title":"해결","slug":"해결","link":"#해결","children":[]},{"level":1,"title":"Ref.","slug":"ref","link":"#ref","children":[]}],"git":{},"filePathRelative":"_posts/culture/2025-08-27-culturetest.md"}');export{v as comp,k as data};
