import{_ as c,c as u,a,b as s,d as r,f as e,r as l,o as k,e as t}from"./app-D55JN7D8.js";const d="/images/2025-08-05-test1/image-20250808094427700.png",v={},m={class:"table-of-contents"};function b(g,n){const i=l("Header"),p=l("router-link"),o=l("Footer");return k(),u("div",null,[a(i),s("nav",m,[s("ul",null,[s("li",null,[a(p,{to:"#문제-해결-순서"},{default:e(()=>n[0]||(n[0]=[t("문제 해결 순서")])),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#_1-목표설정"},{default:e(()=>n[1]||(n[1]=[t("1. 목표설정")])),_:1})]),s("li",null,[a(p,{to:"#_2-테스트-대상-기능-명세화"},{default:e(()=>n[2]||(n[2]=[t("2. 테스트 대상 기능 명세화")])),_:1})]),s("li",null,[a(p,{to:"#_3-테스트-전략-및-방법-설정"},{default:e(()=>n[3]||(n[3]=[t("3. 테스트 전략 및 방법 설정")])),_:1})]),s("li",null,[a(p,{to:"#_4-테스트-케이스-작성-및-구현"},{default:e(()=>n[4]||(n[4]=[t("4. 테스트 케이스 작성 및 구현")])),_:1})]),s("li",null,[a(p,{to:"#_5-ci-cd-파이프라인과-테스트-툴-연동"},{default:e(()=>n[5]||(n[5]=[t("5. CI/CD 파이프라인과 테스트 툴 연동")])),_:1})])])]),s("li",null,[a(p,{to:"#코드-작성"},{default:e(()=>n[6]||(n[6]=[t("코드 작성")])),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#_1-유닛-테스트"},{default:e(()=>n[7]||(n[7]=[t("1. 유닛 테스트")])),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#예시-코드-–-회원가입-유닛-테스트"},{default:e(()=>n[8]||(n[8]=[t("예시 코드 – 회원가입 유닛 테스트")])),_:1})])])]),s("li",null,[a(p,{to:"#_2-통합-테스트"},{default:e(()=>n[9]||(n[9]=[t("2. 통합 테스트")])),_:1})])])]),s("li",null,[a(p,{to:"#마무리"},{default:e(()=>n[10]||(n[10]=[t("마무리")])),_:1})])])]),n[11]||(n[11]=r('<p><strong>테스트가 업무가 되었다.</strong></p><p>코드를 작성하면서 테스트를 작성하는 것은 당연한 일이지만, 작은 개발 조직에서만 일하다 보니 테스트에 대한 가이드라인이 없었고, 전적으로 개인의 재량에 의존하는 경우가 많았다. 이번에도 새로운 프로젝트를 진행하면서 중구난방으로 유닛 테스트만 작성하고 있었는데, 선임 개발자께서 **“코어 기능에 대한 테스트를 집중적으로 하자”**고 제안했다.</p><p>예를 들어, 회원 가입 기능이라면</p><blockquote><p><code>이메일 인증 요청 → 이메일 인증 확인 → 회원 가입</code></p></blockquote><p>까지의 <strong>전체 플로우를 통합 테스트</strong>하는 식이다. 이 제안 이후 약 2주 동안 테스트 코드 작성, 도구 적용, CI/CD 연동 등의 업무를 진행했다.</p><h1 id="문제-해결-순서" tabindex="-1"><a class="header-anchor" href="#문제-해결-순서"><span>문제 해결 순서</span></a></h1><p>내가 생각한(쥐어짜낸) 문제 해결 순서는 아래와 같다.</p><h2 id="_1-목표설정" tabindex="-1"><a class="header-anchor" href="#_1-목표설정"><span>1. 목표설정</span></a></h2><ul><li>코어 기능 목록 정의 및 문서화</li><li>코어 기능 테스트 커버리지 100% 달성 목표 수립</li></ul><p>테스트를 하려면 우선 기능 명세가 필요하다. 하지만 빠른 개발을 위해 달려오면서 <strong>요구사항 명세서나 테스트 계획서가 충분히 작성되지 않은 상태</strong>였다. 그래서 <strong>모든 기능이 아니라 테스트가 반드시 필요한 기능</strong>부터 식별하기로 했다.</p><p>이를 위해 기능을 <strong>A/B/C 등급</strong>으로 분류하고, 로그인·회원가입·앱 다운로드/업로드처럼 서비스 핵심에 해당하는 <strong>A 등급 기능</strong>부터 통합 테스트를 진행했고 B, C 등급은 단위테스트만 진행했다.</p><h2 id="_2-테스트-대상-기능-명세화" tabindex="-1"><a class="header-anchor" href="#_2-테스트-대상-기능-명세화"><span>2. 테스트 대상 기능 명세화</span></a></h2><ul><li>코어 기능별 시나리오 도출</li><li>유저 플로우와 예외 상황 포함</li></ul><p>우선 테스트 시나리오를 작성한다. 예를 들어 회원가입과 앱 설치를 보면,</p><blockquote><p>회원가입 : &quot;이메일 인증 요청&quot; -&gt; &quot;이메일 인증 확인&quot; -&gt; &quot;회원 가입&quot;</p><p>앱 설치 : &quot;앱 설치 요청&quot; -&gt; &quot;알림&quot; -&gt; &quot;running 상태 확인&quot; -&gt; &quot;앱 설치 완료&quot; -&gt; &quot;installation 저장&quot; -&gt; &quot;알림&quot;</p></blockquote><p>이처럼 <strong>유저 플로우 단위로 시나리오</strong>를 만들고, 그 안에 예외 케이스를 함께 포함했다.</p><h2 id="_3-테스트-전략-및-방법-설정" tabindex="-1"><a class="header-anchor" href="#_3-테스트-전략-및-방법-설정"><span>3. 테스트 전략 및 방법 설정</span></a></h2><ul><li>테스트 종류 결정</li><li>적용 프레임워크 및 라이브러리 확정</li></ul><p>이번 프로젝트에서는 <strong>Kotest</strong>와 <strong>MockMvc</strong>를 사용하기로 했다.</p><p><strong>왜 Kotest인가?</strong></p><ul><li><strong>BDD 스타일</strong>로 테스트를 작성할 수 있어 가독성이 뛰어나다.</li><li>시나리오 기반 테스트 구조를 깔끔하게 표현 가능하다.</li><li>Kotlin 프로젝트와의 궁합이 좋다.</li></ul><p><strong>왜 MockMvc인가?</strong></p><ul><li><strong>컨트롤러부터 필터까지</strong> 실제 요청 흐름을 그대로 테스트 가능하다.</li><li>API 호출 프로세스를 그대로 시뮬레이션할 수 있어 <strong>E2E에 가까운 통합 테스트</strong> 구현이 가능하다.</li><li>RestDocs와도 쉽게 연동되어 문서화 작업에도 유리하다. (필요 시)</li></ul><h2 id="_4-테스트-케이스-작성-및-구현" tabindex="-1"><a class="header-anchor" href="#_4-테스트-케이스-작성-및-구현"><span>4. 테스트 케이스 작성 및 구현</span></a></h2><ul><li>시나리오 기반 케이스 설계</li><li>경계값, 예외 케이스 포함</li></ul><p>예를 들어, 회원가입 기능의 경우</p><p><img src="'+d+`" alt="image-20250808094427700"></p><p>이렇게 <strong>플로우와 예외 상황을 코드로 표현</strong>해, 실제 서비스 동작을 재현하도록 했다. 아래와 같이 표현된다.</p><h2 id="_5-ci-cd-파이프라인과-테스트-툴-연동" tabindex="-1"><a class="header-anchor" href="#_5-ci-cd-파이프라인과-테스트-툴-연동"><span>5. CI/CD 파이프라인과 테스트 툴 연동</span></a></h2><ul><li><strong>Kover</strong>: 전체 및 특정 클래스의 커버리지 측정</li><li><strong>diff-cover</strong>: 변경된 코드에 대한 커버리지 검증</li></ul><p>먼저 Kover를 통해 코어 기능이 포함된 클래스들의 커버리지를 측정하고, 이를 CI/CD에서 테스트 성공/실패 판단 기준으로 삼았다. 다음 단계로는 커버리지 리포트를 diff-cover와 연동해, <strong>커밋 변경사항이 반드시 테스트로 커버되었는지</strong> 자동으로 확인할 계획이다.</p><h1 id="코드-작성" tabindex="-1"><a class="header-anchor" href="#코드-작성"><span>코드 작성</span></a></h1><h2 id="_1-유닛-테스트" tabindex="-1"><a class="header-anchor" href="#_1-유닛-테스트"><span>1. 유닛 테스트</span></a></h2><p>유닛 테스트는 <strong>특정 기능이 외부 의존성 없이 정상 동작하는지</strong> 확인하는 테스트다. 주로 메서드 단위로 작성하며, 데이터베이스·네트워크 등 외부 리소스는 <strong>모킹(Mock)</strong> 하여 테스트 속도를 높이고 테스트 환경을 안정적으로 유지한다.</p><h3 id="예시-코드-–-회원가입-유닛-테스트" tabindex="-1"><a class="header-anchor" href="#예시-코드-–-회원가입-유닛-테스트"><span>예시 코드 – 회원가입 유닛 테스트</span></a></h3><p>아래 예시는 <strong>회원가입 성공 시나리오</strong>와 <strong>중복 가입 예외 시나리오</strong>를 각각 테스트하는 코드다. <code>every</code>로 <strong>행동을 모킹</strong>하고, <code>verify</code>로 <strong>호출 여부와 횟수</strong>를 검증한다. 특히 시나리오 간 호출 내역이 섞이지 않도록 <code>clearInvocations()</code>를 넣어야 한다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token function">Given</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;유저의 회원가입 입력 정보가 주어졌을 때&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> email <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;testUser@gmail.com&quot;</span></span></span>
<span class="line">    <span class="token keyword">val</span> password <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;saf!@#1ASDA&quot;</span></span></span>
<span class="line">    <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;testUser&quot;</span></span></span>
<span class="line">    <span class="token keyword">val</span> address <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;address&quot;</span></span></span>
<span class="line">    <span class="token keyword">val</span> phoneNumber <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;01011111234&quot;</span></span></span>
<span class="line">    <span class="token keyword">val</span> country <span class="token operator">=</span> <span class="token function">createCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 모킹 설정</span></span>
<span class="line">    every <span class="token punctuation">{</span> userRepository<span class="token punctuation">.</span><span class="token function">existsUserByEmailAndDeletedAtIsNull</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token punctuation">}</span> returns <span class="token boolean">false</span></span>
<span class="line">    every <span class="token punctuation">{</span> countryReader<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span>country<span class="token punctuation">.</span>countryId<span class="token punctuation">)</span> <span class="token punctuation">}</span> returns country</span>
<span class="line">    every <span class="token punctuation">{</span></span>
<span class="line">        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span>User<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> returns <span class="token function">mockUser</span><span class="token punctuation">(</span></span>
<span class="line">        email <span class="token operator">=</span> email<span class="token punctuation">,</span></span>
<span class="line">        password <span class="token operator">=</span> password<span class="token punctuation">,</span></span>
<span class="line">        name <span class="token operator">=</span> name<span class="token punctuation">,</span></span>
<span class="line">        address <span class="token operator">=</span> address<span class="token punctuation">,</span></span>
<span class="line">        phoneNumber <span class="token operator">=</span> phoneNumber<span class="token punctuation">,</span></span>
<span class="line">        role <span class="token operator">=</span> Role<span class="token punctuation">.</span>USER<span class="token punctuation">,</span></span>
<span class="line">        country <span class="token operator">=</span> country</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">When</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;해당 정보로 회원가입을 하면&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> request <span class="token operator">=</span> <span class="token function">SignupServiceRequest</span><span class="token punctuation">(</span></span>
<span class="line">            email <span class="token operator">=</span> email<span class="token punctuation">,</span></span>
<span class="line">            password <span class="token operator">=</span> password<span class="token punctuation">,</span></span>
<span class="line">            name <span class="token operator">=</span> name<span class="token punctuation">,</span></span>
<span class="line">            address <span class="token operator">=</span> address<span class="token punctuation">,</span></span>
<span class="line">            phoneNumber <span class="token operator">=</span> phoneNumber<span class="token punctuation">,</span></span>
<span class="line">            countryId <span class="token operator">=</span> country<span class="token punctuation">.</span>countryId<span class="token operator">!!</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">val</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">signup</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">Then</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;정상적으로 회원가입 후 정보가 반환된다&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            user<span class="token punctuation">.</span>email shouldBe email</span>
<span class="line">            user<span class="token punctuation">.</span>name shouldBe name</span>
<span class="line">            user<span class="token punctuation">.</span>address shouldBe address</span>
<span class="line">            user<span class="token punctuation">.</span>phoneNumber shouldBe phoneNumber</span>
<span class="line">            user<span class="token punctuation">.</span>role shouldBe Role<span class="token punctuation">.</span>USER</span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 호출 검증</span></span>
<span class="line">            <span class="token function">verify</span><span class="token punctuation">(</span>exactly <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> userRepository<span class="token punctuation">.</span><span class="token function">existsUserByEmailAndDeletedAtIsNull</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token function">verify</span><span class="token punctuation">(</span>exactly <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> countryReader<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span>country<span class="token punctuation">.</span>countryId<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token function">verify</span><span class="token punctuation">(</span>exactly <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">          </span>
<span class="line">          	<span class="token comment">// 호출 초기화</span></span>
<span class="line">          	<span class="token function">clearInvocations</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">When</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;같은 이메일로 다시 가입하려고 하면&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        every <span class="token punctuation">{</span> userRepository<span class="token punctuation">.</span><span class="token function">existsUserByEmailAndDeletedAtIsNull</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token punctuation">}</span> returns <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">val</span> duplicateRequest <span class="token operator">=</span> <span class="token function">SignupServiceRequest</span><span class="token punctuation">(</span></span>
<span class="line">            email <span class="token operator">=</span> email<span class="token punctuation">,</span></span>
<span class="line">            password <span class="token operator">=</span> password<span class="token punctuation">,</span></span>
<span class="line">            name <span class="token operator">=</span> name<span class="token punctuation">,</span></span>
<span class="line">            countryId <span class="token operator">=</span> <span class="token number">1L</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">Then</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;DuplicateUserException 예외가 발생한다&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            assertThrows<span class="token operator">&lt;</span>DuplicateUserException<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                userService<span class="token punctuation">.</span><span class="token function">signup</span><span class="token punctuation">(</span>duplicateRequest<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 호출 검증 (save는 호출되지 않아야 함)</span></span>
<span class="line">            <span class="token function">verify</span><span class="token punctuation">(</span>exactly <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> userRepository<span class="token punctuation">.</span><span class="token function">existsUserByEmailAndDeletedAtIsNull</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token function">verify</span><span class="token punctuation">(</span>exactly <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-통합-테스트" tabindex="-1"><a class="header-anchor" href="#_2-통합-테스트"><span>2. 통합 테스트</span></a></h2><p>통합 테스트는 <strong>MockMvc</strong>를 활용해 실제 API 요청 흐름을 시뮬레이션하며, <strong>유저 플로우를 처음부터 끝까지</strong> 검증하는 방식으로 작성했다. 회원가입 기능의 경우 다음 순서로 동작한다.</p><blockquote><p>이메일 인증 요청 → 이메일 인증 확인 → 회원 가입</p></blockquote><p>따라서 해당 API들을 순차적으로 호출하는 시나리오를 그대로 테스트 코드로 옮겼다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">class</span> UserSignupFlowTest<span class="token operator">:</span> <span class="token function">FlowIntegrationHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> country<span class="token operator">:</span> Country</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">Given</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;사용자 정보가 주어질 때&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">setTestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">val</span> email <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;testUser@gmail.com&quot;</span></span></span>
<span class="line">            <span class="token keyword">val</span> password <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;saf!@#1ASDA&quot;</span></span></span>
<span class="line">            <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;testUser&quot;</span></span></span>
<span class="line">            <span class="token keyword">val</span> address <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;address&quot;</span></span></span>
<span class="line">            <span class="token keyword">val</span> phoneNumber <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;01011111234&quot;</span></span></span>
<span class="line"></span>
<span class="line">            <span class="token function">When</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;사용자 이메일 인증 요청을 하면&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">val</span> emailResponse <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span></span>
<span class="line">                    url <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;/auth/email-verification/request&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">                    method <span class="token operator">=</span> HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span></span>
<span class="line">                    headers <span class="token operator">=</span> <span class="token function">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    body <span class="token operator">=</span> <span class="token function">emailVerificationApiRequest</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    returnTypeRef <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> TypeReference<span class="token operator">&lt;</span>ApiResponseFormat<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token function">Then</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;인증 메일이 정상적으로 발송된다.&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    emailResponse<span class="token punctuation">.</span>status shouldBe <span class="token number">200</span></span>
<span class="line">                    emailResponse<span class="token punctuation">.</span>data shouldBe <span class="token string-literal singleline"><span class="token string">&quot;Email sent&quot;</span></span></span>
<span class="line"></span>
<span class="line">                    <span class="token function">verify</span><span class="token punctuation">(</span>exactly <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> emailService<span class="token punctuation">.</span><span class="token function">sendTemplateEmail</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span>TemplatedRequest<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">And</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;사용자 이메일 인증 코드로 이메일 인증을 하면&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">val</span> code <span class="token operator">=</span> <span class="token function">getCode</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">val</span> emailVerificationResponse <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span></span>
<span class="line">                    url <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;/auth/email-verification/verify&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">                    method <span class="token operator">=</span> HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span></span>
<span class="line">                    headers <span class="token operator">=</span> <span class="token function">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    body <span class="token operator">=</span> <span class="token function">emailVerificationConfirmApiRequest</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    returnTypeRef <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> TypeReference<span class="token operator">&lt;</span>ApiResponseFormat<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">val</span> token <span class="token operator">=</span> emailVerificationResponse<span class="token punctuation">.</span>data</span>
<span class="line"></span>
<span class="line">                <span class="token function">Then</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;인증 토큰이 정상적으로 반환된다.&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    emailVerificationResponse<span class="token punctuation">.</span>status shouldBe <span class="token number">200</span></span>
<span class="line">                    token shouldNotBe <span class="token keyword">null</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token function">And</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;사용자의 정보와 인증 토큰으로 가입요청을 하면&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                    <span class="token keyword">val</span> signupRequest <span class="token operator">=</span> <span class="token function">SignupApiRequest</span><span class="token punctuation">(</span></span>
<span class="line">                        email <span class="token operator">=</span> email<span class="token punctuation">,</span></span>
<span class="line">                        password <span class="token operator">=</span> password<span class="token punctuation">,</span></span>
<span class="line">                        name <span class="token operator">=</span> name<span class="token punctuation">,</span></span>
<span class="line">                        address <span class="token operator">=</span> address<span class="token punctuation">,</span></span>
<span class="line">                        phoneNumber <span class="token operator">=</span> phoneNumber<span class="token punctuation">,</span></span>
<span class="line">                        countryId <span class="token operator">=</span> country<span class="token punctuation">.</span>countryId<span class="token operator">!!</span><span class="token punctuation">,</span></span>
<span class="line">                        verificationToken <span class="token operator">=</span> token</span>
<span class="line">                    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                    <span class="token keyword">val</span> signupResponse <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span></span>
<span class="line">                        url <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;/users/signup&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">                        method <span class="token operator">=</span> HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span></span>
<span class="line">                        headers <span class="token operator">=</span> <span class="token function">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        body <span class="token operator">=</span> signupRequest<span class="token punctuation">,</span></span>
<span class="line">                        returnTypeRef <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> TypeReference<span class="token operator">&lt;</span>ApiResponseFormat<span class="token operator">&lt;</span>UserResponse<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">                    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                    <span class="token function">Then</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;가입이 정상적으로 완료된다.&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        signupResponse<span class="token punctuation">.</span>status shouldBe <span class="token number">200</span></span>
<span class="line"></span>
<span class="line">                        <span class="token keyword">val</span> savedUser <span class="token operator">=</span> <span class="token function">getUserInDatabase</span><span class="token punctuation">(</span>signupResponse<span class="token punctuation">.</span>data<span class="token punctuation">.</span>userId<span class="token operator">!!</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                        savedUser<span class="token punctuation">.</span>email shouldBe email</span>
<span class="line">                        savedUser<span class="token punctuation">.</span>password shouldNotBe <span class="token keyword">null</span></span>
<span class="line">                        savedUser<span class="token punctuation">.</span>name shouldBe name</span>
<span class="line">                        savedUser<span class="token punctuation">.</span>address shouldBe address</span>
<span class="line">                        savedUser<span class="token punctuation">.</span>phoneNumber shouldBe phoneNumber</span>
<span class="line">                        savedUser<span class="token punctuation">.</span>role shouldBe Role<span class="token punctuation">.</span>USER</span>
<span class="line">                        savedUser<span class="token punctuation">.</span>country<span class="token punctuation">.</span>countryId shouldBe country<span class="token punctuation">.</span>countryId</span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">When</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;이미 가입된 이메일로 가입 인증 요청을 하면&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">val</span> emailRequest <span class="token operator">=</span> <span class="token function">emailVerificationApiRequest</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">val</span> emailResponse <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span></span>
<span class="line">                    url <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;/auth/email-verification/request&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">                    method <span class="token operator">=</span> HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span></span>
<span class="line">                    headers <span class="token operator">=</span> <span class="token function">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    body <span class="token operator">=</span> emailRequest<span class="token punctuation">,</span></span>
<span class="line">                    returnTypeRef <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> TypeReference<span class="token operator">&lt;</span>ApiResponseFormat<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                    expectedStatus <span class="token operator">=</span> <span class="token number">409</span></span>
<span class="line">                <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token function">Then</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;이미 가입되어있기 때문에 요청이 실패한다.(409 에러)&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    emailResponse<span class="token punctuation">.</span>status shouldBe <span class="token number">409</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">setTestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        country <span class="token operator">=</span> <span class="token function">createCountry</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;KOR&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        every <span class="token punctuation">{</span> emailService<span class="token punctuation">.</span><span class="token function">sendTemplateEmail</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span>TemplatedRequest<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> returns Unit</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getCode</span><span class="token punctuation">(</span>email<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> verificationRepository<span class="token punctuation">.</span><span class="token function">findByTargetAndType</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> VerificationType<span class="token punctuation">.</span>SIGN_UP<span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span>verificationCode</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getUserInDatabase</span><span class="token punctuation">(</span>userId<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">orElseThrow</span> <span class="token punctuation">{</span> <span class="token function">UserNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">emailVerificationApiRequest</span><span class="token punctuation">(</span>email<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">EmailVerificationApiRequest</span><span class="token punctuation">(</span></span>
<span class="line">        email <span class="token operator">=</span> email<span class="token punctuation">,</span></span>
<span class="line">        type <span class="token operator">=</span> VerificationType<span class="token punctuation">.</span>SIGN_UP</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">emailVerificationConfirmApiRequest</span><span class="token punctuation">(</span></span>
<span class="line">        email<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">        code<span class="token operator">:</span> String</span>
<span class="line">    <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">EmailVerificationConfirmApiRequest</span><span class="token punctuation">(</span></span>
<span class="line">        email <span class="token operator">=</span> email<span class="token punctuation">,</span></span>
<span class="line">        type <span class="token operator">=</span> VerificationType<span class="token punctuation">.</span>SIGN_UP<span class="token punctuation">,</span></span>
<span class="line">        code <span class="token operator">=</span> code</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 하면 글을 읽는 개발자가 “회원가입 플로우를 어떻게 API 순서대로 테스트하는지”를 한 번에 이해할 수 있고, 각 단계에서 무엇을 검증해야 하는지도 명확하게 알 수 있다.</p><h1 id="마무리" tabindex="-1"><a class="header-anchor" href="#마무리"><span>마무리</span></a></h1><p>이번 글에서는 <strong>회원가입 기능</strong>을 예시로</p><ul><li>코어 기능 테스트 전략을 어떻게 세웠는지</li><li>시나리오 기반 유닛 테스트를 어떻게 작성했는지</li><li>MockMvc로 통합 테스트를 어떻게 구현했는지</li></ul>`,46)),a(o),a(o)])}const y=c(v,[["render",b],["__file","2025-08-05-test1.html.vue"]]),h=JSON.parse('{"path":"/posts/spring/2025-08-05-test1.html","title":"테스트가 업무다 - 1 (테스트 기능 식별, 테스트 작성)","lang":"en-US","frontmatter":{"title":"테스트가 업무다 - 1 (테스트 기능 식별, 테스트 작성)","date":"2025-08-05T00:00:00.000Z","tags":["test","kotest"],"description":"회사에서 테스트 코드를 작성하면서 얻은 인사이트입니다."},"headers":[{"level":1,"title":"문제 해결 순서","slug":"문제-해결-순서","link":"#문제-해결-순서","children":[{"level":2,"title":"1. 목표설정","slug":"_1-목표설정","link":"#_1-목표설정","children":[]},{"level":2,"title":"2. 테스트 대상 기능 명세화","slug":"_2-테스트-대상-기능-명세화","link":"#_2-테스트-대상-기능-명세화","children":[]},{"level":2,"title":"3. 테스트 전략 및 방법 설정","slug":"_3-테스트-전략-및-방법-설정","link":"#_3-테스트-전략-및-방법-설정","children":[]},{"level":2,"title":"4. 테스트 케이스 작성 및 구현","slug":"_4-테스트-케이스-작성-및-구현","link":"#_4-테스트-케이스-작성-및-구현","children":[]},{"level":2,"title":"5. CI/CD 파이프라인과 테스트 툴 연동","slug":"_5-ci-cd-파이프라인과-테스트-툴-연동","link":"#_5-ci-cd-파이프라인과-테스트-툴-연동","children":[]}]},{"level":1,"title":"코드 작성","slug":"코드-작성","link":"#코드-작성","children":[{"level":2,"title":"1. 유닛 테스트","slug":"_1-유닛-테스트","link":"#_1-유닛-테스트","children":[{"level":3,"title":"예시 코드 – 회원가입 유닛 테스트","slug":"예시-코드-–-회원가입-유닛-테스트","link":"#예시-코드-–-회원가입-유닛-테스트","children":[]}]},{"level":2,"title":"2. 통합 테스트","slug":"_2-통합-테스트","link":"#_2-통합-테스트","children":[]}]},{"level":1,"title":"마무리","slug":"마무리","link":"#마무리","children":[]}],"git":{},"filePathRelative":"_posts/spring/2025-08-05-test1.md"}');export{y as comp,h as data};
