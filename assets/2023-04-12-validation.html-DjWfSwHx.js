import{_ as c,c as u,a,b as s,d as r,f as e,r as o,o as d,e as p}from"./app-DUIsGCIT.js";const k="/images/2023-04-12-validation/image-20250909003118853.png",v="/images/2023-04-12-validation/image-20250909003130309.png",m="/images/2023-04-12-validation/image-20250909003155620.png",b={},g={class:"table-of-contents"};function h(f,n){const l=o("Header"),t=o("router-link"),i=o("Footer");return d(),u("div",null,[a(l),s("nav",g,[s("ul",null,[s("li",null,[a(t,{to:"#validation"},{default:e(()=>n[0]||(n[0]=[p("Validation")])),_:1})]),s("li",null,[a(t,{to:"#valid"},{default:e(()=>n[1]||(n[1]=[p("@Valid")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#valid-를-사용하는-이유"},{default:e(()=>n[2]||(n[2]=[p("@Valid 를 사용하는 이유")])),_:1})]),s("li",null,[a(t,{to:"#valid-사용"},{default:e(()=>n[3]||(n[3]=[p("@Valid 사용")])),_:1})]),s("li",null,[a(t,{to:"#어디서-어떻게-검증하는가"},{default:e(()=>n[4]||(n[4]=[p("어디서 어떻게 검증하는가??")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#handlermethodargumentresolver-인터페이스"},{default:e(()=>n[5]||(n[5]=[p("HandlerMethodArgumentResolver 인터페이스")])),_:1})]),s("li",null,[a(t,{to:"#requestresponsebodymethodprocessor"},{default:e(()=>n[6]||(n[6]=[p("RequestResponseBodyMethodProcessor")])),_:1})])])])])]),s("li",null,[a(t,{to:"#validated"},{default:e(()=>n[7]||(n[7]=[p("@Validated")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#적용"},{default:e(()=>n[8]||(n[8]=[p("적용")])),_:1})]),s("li",null,[a(t,{to:"#동작-원리"},{default:e(()=>n[9]||(n[9]=[p("동작 원리")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#methodvalidationpostprocessor"},{default:e(()=>n[10]||(n[10]=[p("MethodValidationPostProcessor")])),_:1})]),s("li",null,[a(t,{to:"#methodvalidationinterceptor"},{default:e(()=>n[11]||(n[11]=[p("MethodValidationInterceptor")])),_:1})])])])])]),s("li",null,[a(t,{to:"#두-어노테이션의-차이점"},{default:e(()=>n[12]||(n[12]=[p("두 어노테이션의 차이점")])),_:1})]),s("li",null,[a(t,{to:"#결론"},{default:e(()=>n[13]||(n[13]=[p("결론")])),_:1})])])]),n[14]||(n[14]=r('<h1 id="validation" tabindex="-1"><a class="header-anchor" href="#validation"><span>Validation</span></a></h1><p>토이프로젝트에 validation 을 적용하기 전에 validation 에 대해서 정리하고 공부하는 시간을 가져야겠다고 생각했습니다. 전에 김영한님이 가르쳐준 것도 잘 기억나지 않구요 ㅠㅠ 이번 포스팅을 통해,</p><p><strong>@Valid 와 @Validated 의 차이, 사용, 던지는 예외 등을 알아보겠습니다.</strong></p><h1 id="valid" tabindex="-1"><a class="header-anchor" href="#valid"><span>@Valid</span></a></h1><h2 id="valid-를-사용하는-이유" tabindex="-1"><a class="header-anchor" href="#valid-를-사용하는-이유"><span>@Valid 를 사용하는 이유</span></a></h2><p><img src="'+k+`" alt="image-20250909003118853"></p><p>@Valid 를 사용하는 이유는 간단히 말해 검증로직을 분리하여 통합관리하고 위함입니다.즉 SRP(단일책임원칙) 때문이라고 할 수도 있습니다.</p><p>Layer 에서의 코드가 간단해져서 유지보수하기 편하다는 겁니다. 그게 아니라면 다음과 같이 복잡한 검증 로직을 추가해야 합니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//앗 코드가 너무 복잡하다!!</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/add&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span> <span class="token class-name">Item</span> item<span class="token punctuation">,</span> <span class="token class-name">RedirectAttributes</span> redirectAttributes<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line">    <span class="token comment">//검증 오류 결과를 보관</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">    <span class="token comment">//검증 로직</span></span>
<span class="line">    <span class="token comment">//item.getItemName() 에 text 가 없으면 errors 에 담아둔다.</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getItemName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;itemName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;상품 이름은 필수입니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//price 범위 설정 후 error 보관</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> item<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1000</span> <span class="token operator">||</span> item<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;가격은 1,000 ~ 1,000,000 까지 허용합니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//quantity 범위 설정 후 error 보관</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> item<span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;quantity&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;수량은 최대 9,999 까지 허용합니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">    <span class="token comment">//특정 필드가 아닌 복합 룰 검증</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> resultPrice <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> item<span class="token punctuation">.</span><span class="token function">getQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>resultPrice <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;globalError&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;가격 * 수량의 합은 10,000원 이상이어야 합니다. 현재 값 = &quot;</span> <span class="token operator">+</span> resultPrice<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">    <span class="token comment">//검증에 실패하면 다시 입력 폼으로</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;errors code = {}&quot;</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//model 에 attribute 로 담는다.</span></span>
<span class="line">        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;errors&quot;</span><span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;validation/v1/addForm&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">    <span class="token comment">//성공 로직</span></span>
<span class="line">    <span class="token class-name">Item</span> savedItem <span class="token operator">=</span> itemRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    redirectAttributes<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;itemId&quot;</span><span class="token punctuation">,</span> savedItem<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    redirectAttributes<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;redirect:/validation/v1/items/{itemId}&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>제 inflearn 강의에서 발췌했습니다.</p><h2 id="valid-사용" tabindex="-1"><a class="header-anchor" href="#valid-사용"><span>@Valid 사용</span></a></h2><ol><li>gradle 은 해당 의존성을 추가합니다.</li></ol><p><code>implementation &#39;org.springframework.boot:spring-boot-starter-validation&#39; </code></p><ol start="2"><li>적용은 다음과 같이 합니다.</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token punctuation">.</span>referenceguide<span class="token punctuation">.</span>chapter01</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Min</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Size</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> manufacturer<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> licensePlate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> seatCount<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> manufacturer<span class="token punctuation">,</span> <span class="token class-name">String</span> licencePlate<span class="token punctuation">,</span> <span class="token keyword">int</span> seatCount<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>manufacturer <span class="token operator">=</span> manufacturer<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>licensePlate <span class="token operator">=</span> licencePlate<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>seatCount <span class="token operator">=</span> seatCount<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//getters and setters ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>이런 적용은 필드뿐만 아니라 property, 파라미터 타입(Iterable, List, Map, Optional 내에서), 클래스 등등 많은 곳에 사용할 수 있습니다. <a href="https://docs.jboss.org/hibernate/validator/8.0/reference/en-US/html_single/#preface" target="_blank" rel="noopener noreferrer">공식문서</a></li></ul><h2 id="어디서-어떻게-검증하는가" tabindex="-1"><a class="header-anchor" href="#어디서-어떻게-검증하는가"><span>어디서 어떻게 검증하는가??</span></a></h2><p><img src="`+v+`" alt="image-20250909003130309"></p><p>스프링 컨테이너의 구조에 대해 큰 그림을 그려봤습니다. 여기서 빨간색 동그라미를 친 ArgumentResolver 에서 @Valid 검증이 실행됩니다. 한번 자세히 보겠습니다. <a href="https://hobeen-kim.github.io/learning/spring-MVC1-%EC%8A%A4%ED%94%84%EB%A7%81-MVC-%EA%B5%AC%EC%A1%B0%EC%9D%B4%ED%95%B4/" target="_blank" rel="noopener noreferrer">스프링 mvc 구조이해</a></p><h3 id="handlermethodargumentresolver-인터페이스" tabindex="-1"><a class="header-anchor" href="#handlermethodargumentresolver-인터페이스"><span>HandlerMethodArgumentResolver 인터페이스</span></a></h3><p>ArgumentResolver 가 아니라 정확히는 HandlerMethodArgumentResolver 에 전달받은 데이터가 핸들러에 맞게 변환되어 전달되게 됩니다. <strong>이때 데이터를 받는 어노테이션에 따라 어떤 구현체가 사용되는지 다름니다.</strong> 다음과 같은 컨트롤러와 DTO가 있다고 생각해봅시다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//컨트롤러</span></span>
<span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">Dto</span> dto<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">String</span> testData <span class="token operator">=</span> <span class="token class-name">Dto</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>testData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//Dto</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dto</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//getter, setter</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 때 컨트롤러에서 @RequestBody 를 사용하게 되면 핸들러어댑터인 HandlerMethodArgumentResolver 의 구현체는 <strong>RequestResponseBodyMethodProcessor</strong> 가 됩니다.</p><p>즉, data 는 Controller 를 들어오기 전에 RequestResponseBodyMethodProcessor 에서 controller 가 받을 수 있는 데이터로 가공된다는 겁니다. 바로 그 안에 검증로직이 있습니다.</p><h3 id="requestresponsebodymethodprocessor" tabindex="-1"><a class="header-anchor" href="#requestresponsebodymethodprocessor"><span>RequestResponseBodyMethodProcessor</span></a></h3><p>위에서 설명했던 @RequestBody 의 ArgumentResolver 입니다. 하나하나 주석을 달아보겠습니다. 매개변수는 바로 설명하겠습니다.</p><ul><li><strong>parameter</strong> : 핸들러에서 처리할 메서드의 매개변수입니다. 이 경우에는 Dto 입니다. 매개변수의 타입, 이름, 어노테이션 등과 같은 메타데이터를 가져옵니다. (String name, @NotNull 등 Dto 의 정보)</li><li><strong>mavContainer</strong> : 컨트롤러에서 반환되는 <code>ModelAndView</code> 객체의 정보를 저장하는 컨테이너입니다. @RestController 에서는 ModelAndView 가 사용되지 않으니 <code>null</code> 입니다.</li><li><strong>webRequest</strong> : HTTP 요청 데이터입니다. NativeWebRequest 는 인터페이스로, 서블릿 기반 웹앱에서의 구현체는 ServletWebRequest 입니다. 이 객체는 내부적으로 <code>HttpServletRequest</code>와 <code>HttpServletResponse</code>를 포함하고 있으며, 이를 추상화하여 사용합니다. 따라서 이 객체를 사용하면 웹 요청의 헤더, 파라미터, 속성 등에 액세스할 수 있습니다.</li><li><strong>binderFactory</strong> : <code>WebDataBinder</code> 인스턴스를 생성하는데 사용되는 팩토리입니다. <code>WebDataBinder</code>는 데이터 바인딩 및 유효성 검사를 처리하는데 사용됩니다. <code>HandlerMethodArgumentResolver</code>가 데이터 바인딩이나 유효성 검사를 처리하지 않는 경우에는 <code>null</code>일 수 있습니다. 일반적으로 <code>DefaultDataBinderFactory</code> 구현체가 자동주입됩니다.</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span></span>
<span class="line">        <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">WebDataBinderFactory</span> binderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">//마찬가지로 매개변수입니다.</span></span>
<span class="line">    parameter <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">nestedIfOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//readWithMessageConverters 를 사용하여 webRequest 에서 파라미터에 맞게 객체를 읽어옵니다. 여기에서 HTTP 요청이 Java 객체로 변환됩니다. readWithMessageConverters 를 세부적으로 들어가진 않겠습니다.</span></span>
<span class="line">    <span class="token class-name">Object</span> arg <span class="token operator">=</span> <span class="token function">readWithMessageConverters</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> parameter<span class="token punctuation">.</span><span class="token function">getNestedGenericParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//주어진 매개변수(Dto) 에 대한 변수 이름을 생성합니다. 클래스 이름에서 첫번째 문자를 소문자로 변환하여 변수 이름을 만듭니다. (name = &quot;dto&quot;)</span></span>
<span class="line">    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Conventions</span><span class="token punctuation">.</span><span class="token function">getVariableNameForParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>binderFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//createBinder 를 통해 데이터 변환(json 의 string 을숫자, 날짜 등의 타입으로 변환), 유효성 검사 적용, 바인딩 및 유효성 검사 결과 관리가 가능합니다.</span></span>
<span class="line">        <span class="token class-name">WebDataBinder</span> binder <span class="token operator">=</span> binderFactory<span class="token punctuation">.</span><span class="token function">createBinder</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> arg<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//validateIfApplicable 를 사용하여 binder 와 parameter 를 매개변수로 해서 유효성 검사를 수행합니다. 핵심로직으로 아래에서 다시 설명하겠습니다.</span></span>
<span class="line">            <span class="token function">validateIfApplicable</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//위에서 validateIfApplicable 를 통해 에러가 있는 경우 binder 의 BindingResult 에 에러를 추가시켰습니다. </span></span>
<span class="line">            <span class="token comment">//따라서 binder.getBindingResult().hasErrors() = true 가 됩니다.</span></span>
<span class="line">            <span class="token comment">//isBindExceptionRequired() 은 @Valid 어노테이션이 있는 매개변수에 대해서만 유효성 검사를 수행하고, 오류가 있을 경우 MethodArgumentNotValidException을 발생시키기 위함입니다.</span></span>
<span class="line">            <span class="token comment">//왜냐하면 @Valid 에 의한 오류가 아닌 것도 있을 수 있기 때문입니다.</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>binder<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBindExceptionRequired</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">//결론적으로 유효성검증 실패시 MethodArgumentNotValidException 에러를 던집니다.</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> binder<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>mavContainer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            mavContainer<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token class-name">BindingResult</span><span class="token punctuation">.</span><span class="token constant">MODEL_KEY_PREFIX</span> <span class="token operator">+</span> name<span class="token punctuation">,</span> binder<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">adaptArgumentIfNecessary</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code> validateIfApplicable(binder, parameter);</code> 추가 설명입니다. 해당 로직에서 <code>@Valid</code> 어노테이션이 적용되었는지와 해당 객체의 타입이 Bean Validation이 적용될 수 있는지를 확인합니다. 만약 검증이 필요하다면, <code>binder.validate()</code>를 호출하여 실제 유효성 검사를 수행합니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">validateIfApplicable</span><span class="token punctuation">(</span><span class="token class-name">WebDataBinder</span> binder<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//prameter 의 어노테이션을 받습니다.</span></span>
<span class="line">    <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> ann <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> validationHints <span class="token operator">=</span> <span class="token class-name">ValidationAnnotationUtils</span><span class="token punctuation">.</span><span class="token function">determineValidationHints</span><span class="token punctuation">(</span>ann<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//검증이 필요한 경우, validate 로 검증을 합니다.</span></span>
<span class="line">        <span class="token comment">//validate 는 validationHints 를 통해 Validator 로 검증을 실시합니다.</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>validationHints <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            binder<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>validationHints<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그림으로 그려봤습니다.</p><p><img src="`+m+`" alt="image-20250909003155620"></p><ol><li>핸들러 어댑터에서 resolveArgument 호출</li><li>resolveArgument 내부에서 validateIfApplicable 호출</li><li>validateIfApplicable 에서 어노테이션을 돌면서 validationHints 가 있으면 DataBinder 의 validate 메서드 호출</li><li>validators 에 검증 요청</li><li>WebDataBinder 의 bindingResult 에 검증결과가 담김</li><li>검증 실시 <ol><li>bindingResult 에 에러가 있고 validation 에러일 때 MethodArgumentNotValidException 반환</li><li>아니면 Handler(Controller) 실행</li></ol></li></ol><p>솔직히 validateIfApplicable 부분부터 헷갈립니다만 이러한 흐름으로 진행되고 결국은 MethodArgumentNotValidException 를 반환한다고 할 수 있겠습니다.</p><h1 id="validated" tabindex="-1"><a class="header-anchor" href="#validated"><span>@Validated</span></a></h1><p>다음은 @Validated 입니다. 앞서 배운 @Valid 는 ArgumentResolver 에서 실행되기 때문에 컨트롤러에만 적용할 수 있습니다. 하지만 서비스를 개발하다 보면 서비스, 리파지토리 등에도 유효성 검증을 해야 할 수도 있습니다.</p><p>이를 위해서 @Validated 는 AOP 기반으로 프록시를 생성하여 메서드의 요청을 가로채서 유효성 검증을 합니다.</p><p>스프링에서는 <em><strong>ValidationAutoConfiguration</strong></em> 을 통해서 <em><strong>MethodValidationPostProcessor</strong></em> 을 자동으로 빈 등록을 합니다.</p><p>이 <em><strong>MethodValidationPostProcessor</strong></em> 에서 @Validated 검증을 하게 됩니다.</p><h2 id="적용" tabindex="-1"><a class="header-anchor" href="#적용"><span>적용</span></a></h2><p>클래스에 @Validated를 붙여주고, 유효성을 검증할 메소드의 파라미터에 @Valid를 붙여주면 검증이 됩니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//컨트롤러</span></span>
<span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Validated</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">Dto</span> dto<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">String</span> testData <span class="token operator">=</span> <span class="token class-name">Dto</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>testData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//Dto</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dto</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@NotNull</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//getter, setter</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="동작-원리" tabindex="-1"><a class="header-anchor" href="#동작-원리"><span>동작 원리</span></a></h2><h3 id="methodvalidationpostprocessor" tabindex="-1"><a class="header-anchor" href="#methodvalidationpostprocessor"><span>MethodValidationPostProcessor</span></a></h3><p>중요한 부분만 보도록 하겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodValidationPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBeanFactoryAwareAdvisingPostProcessor</span></span>
<span class="line">		<span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> validatedAnnotationType <span class="token operator">=</span> <span class="token class-name">Validated</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> </span>
<span class="line">	</span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">Pointcut</span> pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationMatchingPointcut</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>validatedAnnotationType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>advisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">(</span>pointcut<span class="token punctuation">,</span> <span class="token function">createMethodValidationAdvice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>validator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">protected</span> <span class="token class-name">Advice</span> <span class="token function">createMethodValidationAdvice</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Validator</span><span class="token punctuation">&gt;</span></span> validator<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MethodValidationInterceptor</span><span class="token punctuation">(</span>validator<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>먼저 validatedAnnotationType 은 Validated.class 입니다. 해당 값은 setValidatedAnnotationType() 메서드를 변경할 수 있지만 넘어가겠습니다.</li><li>afterPropertiesSet() : Spring의 <code>InitializingBean</code> 인터페이스에서 구현되는 메서드입니다. 이 메서드는 빈이 생성된 후, <code>BeanFactory</code>가 해당 빈에 모든 속성값을 설정한 후에 자동으로 호출됩니다. <ul><li><code>afterPropertiesSet()</code> 메서드는 <code>Advisor</code> 객체를 생성하며, 이 객체는 AOP에서 <code>Advice</code>와 <code>Pointcut</code>를 결합시켜서 적용할 수 있게 해줍니다.</li><li><code>AnnotationMatchingPointcut</code> 클래스는 특정 어노테이션(Validated 혹은 커정한 커스텀 어노테이션)을 가진 메서드만을 대상으로 하는 Pointcut 객체를 생성합니다. <code>DefaultPointcutAdvisor</code>는 <code>Pointcut</code>과 <code>Advice</code>를 결합해서 <code>Advisor</code> 객체를 생성합니다.</li></ul></li><li>createMethodValidationAdvice() : <code>MethodValidationInterceptor</code> 객체를 반환합니다. 따라서 이 메서드가 생성한 <code>MethodValidationInterceptor</code> 객체와 <code>AnnotationMatchingPointcut</code> 객체를 결합해서 afterPropertiesSet()의 <code>Advisor</code> 객체를 생성합니다.</li></ul><p>결국 검증은 Advice 인 MethodValidationInterceptor 가 하게 됩니다. MethodValidationInterceptor 를 살펴보도록 하겠습니다.</p><h3 id="methodvalidationinterceptor" tabindex="-1"><a class="header-anchor" href="#methodvalidationinterceptor"><span>MethodValidationInterceptor</span></a></h3><p>해당 AOP 클래스의 핵심로직인 invoke() 메서드를 보겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token annotation punctuation">@Nullable</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Avoid Validator invocation on FactoryBean.getObjectType/isSingleton</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFactoryBeanMetadataMethod</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//@Validated 가 붙은 클래스를 모두 찾습니다.</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> groups <span class="token operator">=</span> <span class="token function">determineValidationGroups</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Standard Bean Validation 1.1 API</span></span>
<span class="line">    <span class="token class-name">ExecutableValidator</span> execVal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>validator<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forExecutables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Method</span> methodToValidate <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConstraintViolation</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Object</span> target <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> invocation <span class="token keyword">instanceof</span> <span class="token class-name">ProxyMethodInvocation</span> methodInvocation<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Allow validation for AOP proxy without a target</span></span>
<span class="line">        target <span class="token operator">=</span> methodInvocation<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Target must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        result <span class="token operator">=</span> execVal<span class="token punctuation">.</span><span class="token function">validateParameters</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> methodToValidate<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> groups<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Probably a generic type mismatch between interface and impl as reported in SPR-12237 / HV-1011</span></span>
<span class="line">        <span class="token comment">// Let&#39;s try to find the bridged method on the implementation class...</span></span>
<span class="line">        methodToValidate <span class="token operator">=</span> <span class="token class-name">BridgeMethodResolver</span><span class="token punctuation">.</span><span class="token function">findBridgedMethod</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        result <span class="token operator">=</span> execVal<span class="token punctuation">.</span><span class="token function">validateParameters</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> methodToValidate<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> groups<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConstraintViolationException</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    result <span class="token operator">=</span> execVal<span class="token punctuation">.</span><span class="token function">validateReturnValue</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> methodToValidate<span class="token punctuation">,</span> returnValue<span class="token punctuation">,</span> groups<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConstraintViolationException</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>result = execVal.validateParameters(target, methodToValidate, invocation.getArguments(), groups);</code> 가 계속 반복되는 걸 볼 수 있습니다. 해당 메서드가 검증 코드이며, !result.isEmpty 일 때(validation 결과 오류가 있을 때) <strong>ConstraintViolationException</strong> 을 반환하게 됩니다.</p><p><u><em>참고로 ConstraintViolationException 는 RuntimeException 입니다.</em></u></p><blockquote><p>@Validated 에는 제약 조건이 적용될 검증 그룹을 지정할 수 있는 그룹 기능이 있지만 코드가 복잡해져서 거의 사용되지 않으므로 이러한 기능이 있음을 참고하고 넘어가도록 합시다. <a href="https://mangkyu.tistory.com/174" target="_blank" rel="noopener noreferrer">그룹 기능 참고</a></p></blockquote><h1 id="두-어노테이션의-차이점" tabindex="-1"><a class="header-anchor" href="#두-어노테이션의-차이점"><span>두 어노테이션의 차이점</span></a></h1><p><strong>@Valid</strong></p><ul><li>자바 표준 스펙으로, 컨트롤러에만 적용이 됩니다.</li><li>주로 DTO(Data Transfer Object)나 도메인 객체에서 사용하며, 스프링 MVC 컨트롤러 메서드 파라미터에 적용됩니다.</li><li>단순한 데이터 유효성 검증을 위한 어노테이션입니다.</li></ul><p><strong>@Validated</strong></p><ul><li>스프링 프레임워크에서 제공하는 추가적인 검증 기능을 제공합니다. AOP 로 검증이 진행됩니다.</li><li>주로 서비스 계층에서 사용하며, 스프링 빈 메서드 파라미터나 클래스 레벨에서 적용됩니다.</li><li>스프링 프레임워크에서 제공하는 추가적인 유효성 검증을 위한 어노테이션으로, Bean Validation API를 확장하여 유연한 검증을 할 수 있도록 지원합니다.</li></ul><h1 id="결론" tabindex="-1"><a class="header-anchor" href="#결론"><span>결론</span></a></h1><p>이건 제 토이프로젝트에 validation 을 적용하기 위해 공부하려고 포스팅한건데요. validation 은 지금은 컨트롤러 에서 @Valid 를 사용해야 겠다고 생각했습니다.</p><p>근데 적용하는 것보다 동작 원리 파헤치는 게 훨씬 힘드네요. 이거 작성하는데 여기저기 찾아보느라 이틀이나 걸렸습니다 .. ㅎㅎ 일단 제가 제일 궁금했던 건 <strong>어떤 원리로 각각 MethodArgumentNotValidException, ConstraintViolationException 이 반환되는지였습니다.</strong> 이제 알았으니 적용해보도록 합시다.</p>`,62)),a(i)])}const w=c(b,[["render",h],["__file","2023-04-12-validation.html.vue"]]),V=JSON.parse('{"path":"/posts/spring/2023-04-12-validation.html","title":"Validation 의 @Valid 와 @Validated 차이","lang":"en-US","frontmatter":{"title":"Validation 의 @Valid 와 @Validated 차이","date":"2023-04-12T00:00:00.000Z","tags":["spring","validation"],"description":"비슷해보이는 @Valid 와 @Validated 의 차이"},"headers":[{"level":1,"title":"Validation","slug":"validation","link":"#validation","children":[]},{"level":1,"title":"@Valid","slug":"valid","link":"#valid","children":[{"level":2,"title":"@Valid 를 사용하는 이유","slug":"valid-를-사용하는-이유","link":"#valid-를-사용하는-이유","children":[]},{"level":2,"title":"@Valid 사용","slug":"valid-사용","link":"#valid-사용","children":[]},{"level":2,"title":"어디서 어떻게 검증하는가??","slug":"어디서-어떻게-검증하는가","link":"#어디서-어떻게-검증하는가","children":[{"level":3,"title":"HandlerMethodArgumentResolver 인터페이스","slug":"handlermethodargumentresolver-인터페이스","link":"#handlermethodargumentresolver-인터페이스","children":[]},{"level":3,"title":"RequestResponseBodyMethodProcessor","slug":"requestresponsebodymethodprocessor","link":"#requestresponsebodymethodprocessor","children":[]}]}]},{"level":1,"title":"@Validated","slug":"validated","link":"#validated","children":[{"level":2,"title":"적용","slug":"적용","link":"#적용","children":[]},{"level":2,"title":"동작 원리","slug":"동작-원리","link":"#동작-원리","children":[{"level":3,"title":"MethodValidationPostProcessor","slug":"methodvalidationpostprocessor","link":"#methodvalidationpostprocessor","children":[]},{"level":3,"title":"MethodValidationInterceptor","slug":"methodvalidationinterceptor","link":"#methodvalidationinterceptor","children":[]}]}]},{"level":1,"title":"두 어노테이션의 차이점","slug":"두-어노테이션의-차이점","link":"#두-어노테이션의-차이점","children":[]},{"level":1,"title":"결론","slug":"결론","link":"#결론","children":[]}],"git":{},"filePathRelative":"_posts/spring/2023-04-12-validation.md"}');export{w as comp,V as data};
