import{_ as o,c as u,a as n,b as a,d as r,f as p,r as e,o as k,e as l}from"./app-dXp5MBUq.js";const d={},m={class:"table-of-contents"};function v(g,s){const c=e("Header"),t=e("router-link"),i=e("Footer");return k(),u("div",null,[n(c),a("nav",m,[a("ul",null,[a("li",null,[n(t,{to:"#_1-불변-클래스란"},{default:p(()=>s[0]||(s[0]=[l("1. 불변 클래스란?")])),_:1})]),a("li",null,[n(t,{to:"#_2-불변-클래스-구현"},{default:p(()=>s[1]||(s[1]=[l("2. 불변 클래스 구현")])),_:1})])])]),s[2]||(s[2]=r(`<h1 id="_1-불변-클래스란" tabindex="-1"><a class="header-anchor" href="#_1-불변-클래스란"><span>1. 불변 클래스란?</span></a></h1><p>불변 클래스는 한 번 생성되면 객체 내부의 상태(값)를 변경할 수 없는 클래스를 말한다. 불변 클래스의 인스턴스는 생성 시점에 상태가 결정된 후 객체가 메모리에서 사라질 때까지 절대 변하지 않으며, 상태 변경이 필요할 때는 완전히 새로운 객체를 생성해야 한다.</p><p>자바의 String 클래스가 대표적인 불변 클래스이며, 이러한 특성은 코드의 안정성과 신뢰성을 높여 다중 스레드 환경에서 동기화 문제를 예방하는 데 도움이 된다.</p><h1 id="_2-불변-클래스-구현" tabindex="-1"><a class="header-anchor" href="#_2-불변-클래스-구현"><span>2. 불변 클래스 구현</span></a></h1><ol><li>final 클래스로 만들어서 상속되지 않게 한다.</li><li>모든 필드를 private 과 final 로 만든다.</li><li>setter 를 만들지 않는다.</li><li>만약 필드가 List 와 같이 가변 객체이면 생성자와 getter 에서 defensive copy (방어적 복사)를 사용한다.</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> categories<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> categories<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>categories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>categories<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//defensive copy</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>categories<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//defensive copy</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),n(i)])}const _=o(d,[["render",v],["__file","2025-10-05-immutableclass.html.vue"]]),f=JSON.parse('{"path":"/posts/java/2025-10-05-immutableclass.html","title":"[구현] 불변 클래스 구현","lang":"en-US","frontmatter":{"title":"[구현] 불변 클래스 구현","date":"2025-10-05T00:00:00.000Z","tags":["java","immutable"],"description":"불변 클래스를 구현해보자"},"headers":[{"level":1,"title":"1. 불변 클래스란?","slug":"_1-불변-클래스란","link":"#_1-불변-클래스란","children":[]},{"level":1,"title":"2. 불변 클래스 구현","slug":"_2-불변-클래스-구현","link":"#_2-불변-클래스-구현","children":[]}],"git":{},"filePathRelative":"_posts/java/2025-10-05-immutableclass.md"}');export{_ as comp,f as data};
