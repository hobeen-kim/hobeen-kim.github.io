import{_ as i,c as u,a,b as s,d as k,f as e,r as o,o as r,e as p}from"./app-D55JN7D8.js";const d="/images/2025-02-13-security/image-20250213220050372.png",v={},m={class:"table-of-contents"};function h(g,n){const c=o("Header"),t=o("router-link"),l=o("Footer");return r(),u("div",null,[a(c),s("nav",m,[s("ul",null,[s("li",null,[a(t,{to:"#_1-문제상황"},{default:e(()=>n[0]||(n[0]=[p("1. 문제상황")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#_1-1-문제-발견"},{default:e(()=>n[1]||(n[1]=[p("1.1 문제 발견")])),_:1})])])]),s("li",null,[a(t,{to:"#_2-해결-방법"},{default:e(()=>n[2]||(n[2]=[p("2. 해결 방법")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#_2-1-oauth2accesstokenresponseclient"},{default:e(()=>n[3]||(n[3]=[p("2.1 OAuth2AccessTokenResponseClient")])),_:1})]),s("li",null,[a(t,{to:"#_2-2-securityconfig"},{default:e(()=>n[4]||(n[4]=[p("2.2 SecurityConfig")])),_:1})])])]),s("li",null,[a(t,{to:"#_3-구체적인-코드"},{default:e(()=>n[5]||(n[5]=[p("3. 구체적인 코드")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#_3-1-oauth2authorizationcodegrantrequestentityconverter"},{default:e(()=>n[6]||(n[6]=[p("3.1 OAuth2AuthorizationCodeGrantRequestEntityConverter")])),_:1})]),s("li",null,[a(t,{to:"#_3-2-customtokenresponseclient"},{default:e(()=>n[7]||(n[7]=[p("3.2 CustomTokenResponseClient")])),_:1})])])]),s("li",null,[a(t,{to:"#_4-결론"},{default:e(()=>n[8]||(n[8]=[p("4. 결론")])),_:1})])])]),n[9]||(n[9]=k('<h1 id="_1-문제상황" tabindex="-1"><a class="header-anchor" href="#_1-문제상황"><span>1. 문제상황</span></a></h1><p>SpringSecurity 로 세션 로그인, Jwt 로그인, OAuth2 등등 많은 방법으로 로그인을 구현해봤지만 제일 귀찮은 건 OAuth2 이다. 외부 API 와 연동해야 해서 테스트도 어려운 데다가 처음엔 플로우도 잘 이해가 안되기 때문이다.</p><p>이제는 어느정도 익숙해져서 간단히 설정파일과 커스텀 핸들러로 OAuth 로그인을 구현할 수 있다. 하지만 이번에 카카오 로그인을 구현하면서 카카오는 별도의 추가적인 설정이 필요하다는걸 발견했다.</p><h2 id="_1-1-문제-발견" tabindex="-1"><a class="header-anchor" href="#_1-1-문제-발견"><span>1.1 문제 발견</span></a></h2><p>naver 와 kakao 를 구현하면서 naver 는 별도 설정없이 인증토큰 발급이 잘 되는데 kakao 는 에러 메시지도 없이 진행이 되지 않았다. 그래서 RestTemplate 의 로깅 레벨을 DEBUG 로 설정하고 API 를 확인했다.</p><blockquote><p><code>logging.level.org.springframework.web.client.RestTemplate=DEBUG</code> 추가</p></blockquote><p>확인해보니 <code>https://kauth.kakao.com/oauth/token</code> 을 요청하는 과정에서 401 에러가 발생했다. DEBUG 로 설정하면 Request 의 Body 값도 볼 수 있는데 grant_type, code, redirect_uri 가 들어가있다. 이게 구글이든 네이버든 기본적으로 인증토큰을 발급받을 때의 필수 요소이다. <strong>하지만 카카오는 달랐다.</strong></p><p><img src="'+d+`" alt="image-20250213220050372"></p><p>위에서 보듯이 &#39;client_id&#39;도 포함사항이다. 그래서 계속 401 에러가 난 것이다.</p><h1 id="_2-해결-방법" tabindex="-1"><a class="header-anchor" href="#_2-해결-방법"><span>2. 해결 방법</span></a></h1><p>문제를 찾았으니 해결하기는 쉽다. token-uri 을 호출하는 클래스를 찾은 뒤 커스텀으로 변경해주면 된다.</p><h2 id="_2-1-oauth2accesstokenresponseclient" tabindex="-1"><a class="header-anchor" href="#_2-1-oauth2accesstokenresponseclient"><span>2.1 OAuth2AccessTokenResponseClient</span></a></h2><p>인증 토큰은 <code>OAuth2AccessTokenResponseClient</code> 에서 API 를 요청해 발급받는다. 좀 더 자세히 말하자면, 해당 클래스에서 인증정보(authorizationCodeGrantRequest)를 조합해서 HTTP 요청으로 만드는데 이는 requestEntityConverter 로 이루어진다. 그리고 restTemplate 으로 요청이 이루어진다.</p><p><em>대략적인 pseudo code 로 확인해보면,</em></p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">class</span> OAuth2AccessTokenResponseClient <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">//토큰을 가져오는 메서드</span></span>
<span class="line">	<span class="token keyword">fun</span> <span class="token function">getTokenResponse</span><span class="token punctuation">(</span>인증정보<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">val</span> httpRequest <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">toHttpRequest</span><span class="token punctuation">(</span>인증정보<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line highlighted">    httpRequest<span class="token punctuation">.</span><span class="token function">addBody</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;client_id&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;abfup72345by8gfs&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">//client_id 추가</span></span>
<span class="line">		</span>
<span class="line">		<span class="token keyword">val</span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">)</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>인증정보를 받으면 해당 정보 내에 grant_type, redirect_uri, code 등이 있으니 http body 로 만들 수 있다. <strong>나는 이렇게 중간에 client_id 를 추가하는 방식으로 구현했다.</strong></p><blockquote><p><strong>참고</strong></p><p>해당 과정은 OAuth2LoginAuthenticationFilter 의 attemptAuthentication() 에서 진행된다. 필터 내에서 토큰 인증, 유저 정보 가져오기가 모두 진행된 후 SuccessHandler 로 이동한다. 실패하면 당연히 FailureHandler 로 이동한다.</p></blockquote><h2 id="_2-2-securityconfig" tabindex="-1"><a class="header-anchor" href="#_2-2-securityconfig"><span>2.2 SecurityConfig</span></a></h2><p>아래와 같이 tokenEndpoint 로 accessTokenResponseClient 을 커스텀으로 넣을 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">http<span class="token punctuation">.</span><span class="token function">oauth2Login</span><span class="token punctuation">(</span>oauth2 <span class="token operator">-&gt;</span> oauth2</span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">authorizationEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">tokenEndpoint</span><span class="token punctuation">(</span>token <span class="token operator">-&gt;</span> token<span class="token punctuation">.</span><span class="token function">accessTokenResponseClient</span><span class="token punctuation">(</span><span class="token function">customTokenResponseClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">failureHandler</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 카카오로 요청하면 client_id 가 잘 들어간다!</p><h1 id="_3-구체적인-코드" tabindex="-1"><a class="header-anchor" href="#_3-구체적인-코드"><span>3. 구체적인 코드</span></a></h1><p><code>OAuth2AccessTokenResponseClient</code> 만 자세히 살펴보자. <code>OAuth2AccessTokenResponseClient</code> 의 기본 구현체는 <code>DefaultAuthorizationCodeTokenResponseClient</code> 이다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">OAuth2AccessTokenResponse</span> <span class="token function">getTokenResponse</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AuthorizationCodeGrantRequest</span> authorizationCodeGrantRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>authorizationCodeGrantRequest<span class="token punctuation">,</span> <span class="token string">&quot;authorizationCodeGrantRequest cannot be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RequestEntity</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestEntityConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>authorizationCodeGrantRequest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OAuth2AccessTokenResponse</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">OAuth2AccessTokenResponse</span> tokenResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OAuth2AccessTokenResponse</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>tokenResponse<span class="token punctuation">,</span> <span class="token string">&quot;The authorization server responded to this Authorization Code grant request with an empty body; as such, it cannot be materialized into an OAuth2AccessTokenResponse instance. Please check the HTTP response code in your server logs for more details.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> tokenResponse<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getTokenResponse() 메서드만 보면, this.requestEntityConverter.convert(authorizationCodeGrantRequest) 를 통해 RequestEntity 를 만든다. 그렇다면 requestEntityConverter 를 커스텀으로 넣어줘도 된다는 얘기이다.</p><p>converter 의 구현체는 <code>OAuth2AuthorizationCodeGrantRequestEntityConverter</code> 가 들어간다.</p><h2 id="_3-1-oauth2authorizationcodegrantrequestentityconverter" tabindex="-1"><a class="header-anchor" href="#_3-1-oauth2authorizationcodegrantrequestentityconverter"><span>3.1 OAuth2AuthorizationCodeGrantRequestEntityConverter</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">createParameters</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AuthorizationCodeGrantRequest</span> authorizationCodeGrantRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ClientRegistration</span> clientRegistration <span class="token operator">=</span> authorizationCodeGrantRequest<span class="token punctuation">.</span><span class="token function">getClientRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">OAuth2AuthorizationExchange</span> authorizationExchange <span class="token operator">=</span> authorizationCodeGrantRequest<span class="token punctuation">.</span><span class="token function">getAuthorizationExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        parameters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;grant_type&quot;</span><span class="token punctuation">,</span> authorizationCodeGrantRequest<span class="token punctuation">.</span><span class="token function">getGrantType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        parameters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> authorizationExchange<span class="token punctuation">.</span><span class="token function">getAuthorizationResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> redirectUri <span class="token operator">=</span> authorizationExchange<span class="token punctuation">.</span><span class="token function">getAuthorizationRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRedirectUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> codeVerifier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>authorizationExchange<span class="token punctuation">.</span><span class="token function">getAuthorizationRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;code_verifier&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>redirectUri <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            parameters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;redirect_uri&quot;</span><span class="token punctuation">,</span> redirectUri<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ClientAuthenticationMethod</span><span class="token punctuation">.</span><span class="token constant">CLIENT_SECRET_BASIC</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientRegistration<span class="token punctuation">.</span><span class="token function">getClientAuthenticationMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            parameters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;client_id&quot;</span><span class="token punctuation">,</span> clientRegistration<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ClientAuthenticationMethod</span><span class="token punctuation">.</span><span class="token constant">CLIENT_SECRET_POST</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientRegistration<span class="token punctuation">.</span><span class="token function">getClientAuthenticationMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            parameters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;client_secret&quot;</span><span class="token punctuation">,</span> clientRegistration<span class="token punctuation">.</span><span class="token function">getClientSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>codeVerifier <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            parameters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;code_verifier&quot;</span><span class="token punctuation">,</span> codeVerifier<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> parameters	<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>해당 클래스의 createParameters() 를 보면 기본적으로 grant_type, code, redirect_uri 는 들어간다. <strong>하지만 client_id 는 ClientAuthenticationMethod 가 CLIENT_SECRET_BASIC 가 아닐 때만 들어간다.</strong> 확인 결과 kakao 는 CLIENT_SECRET_BASIC 였다.</p><p>그렇다면 ClientAuthenticationMethod 를 다른 걸로 (NONE 등) 바꿔주면 될까 생각했지만 그러지 않기로 했다. ClientAuthenticationMethod 의 쓰임새가 다른 필터에도 있다면 의도치 않은 문제를 일으킬 수도 있기 때문이다.</p><h2 id="_3-2-customtokenresponseclient" tabindex="-1"><a class="header-anchor" href="#_3-2-customtokenresponseclient"><span>3.2 CustomTokenResponseClient</span></a></h2><p>그래서 만든게 CustomTokenResponseClient 이다. <strong>DefaultAuthorizationCodeTokenResponseClient 를 복사하고 필요한 부분만 변경하였다.</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomTokenResponseClient</span> <span class="token keyword">implements</span> <span class="token class-name">OAuth2AccessTokenResponseClient</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OAuth2AuthorizationCodeGrantRequest</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">INVALID_TOKEN_RESPONSE_ERROR_CODE</span> <span class="token operator">=</span> <span class="token string">&quot;invalid_token_response&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OAuth2AuthorizationCodeGrantRequest</span><span class="token punctuation">,</span> <span class="token class-name">RequestEntity</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> requestEntityConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OAuth2AuthorizationCodeGrantRequestEntityConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RestOperations</span> restOperations<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">CustomTokenResponseClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FormHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OAuth2AccessTokenResponseHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        restTemplate<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OAuth2ErrorResponseErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>restOperations <span class="token operator">=</span> restTemplate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">OAuth2AccessTokenResponse</span> <span class="token function">getTokenResponse</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AuthorizationCodeGrantRequest</span> authorizationCodeGrantRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>authorizationCodeGrantRequest<span class="token punctuation">,</span> <span class="token string">&quot;authorizationCodeGrantRequest cannot be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>authorizationCodeGrantRequest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>authorizationCodeGrantRequest<span class="token punctuation">.</span><span class="token function">getClientRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistrationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;kakao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">addClientId</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> authorizationCodeGrantRequest<span class="token punctuation">.</span><span class="token function">getClientRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OAuth2AccessTokenResponse</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">OAuth2AccessTokenResponse</span> tokenResponse <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>tokenResponse<span class="token punctuation">,</span> <span class="token string">&quot;The authorization server responded to this Authorization Code grant request with an empty body; as such, it cannot be materialized into an OAuth2AccessTokenResponse instance. Please check the HTTP response code in your server logs for more details.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> tokenResponse<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OAuth2AccessTokenResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token class-name">RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restOperations<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">OAuth2AccessTokenResponse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RestClientException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">OAuth2Error</span> oauth2Error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OAuth2Error</span><span class="token punctuation">(</span><span class="token string">&quot;invalid_token_response&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;An error occurred while attempting to retrieve the OAuth 2.0 Access Token Response: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OAuth2AuthorizationException</span><span class="token punctuation">(</span>oauth2Error<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * ClientAuthenticationMethodValidatingRequestEntityConverter 내용</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AuthorizationCodeGrantRequest</span> grantRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ClientRegistration</span> clientRegistration <span class="token operator">=</span> grantRequest<span class="token punctuation">.</span><span class="token function">getClientRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ClientAuthenticationMethod</span> clientAuthenticationMethod <span class="token operator">=</span> clientRegistration<span class="token punctuation">.</span><span class="token function">getClientAuthenticationMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> registrationId <span class="token operator">=</span> clientRegistration<span class="token punctuation">.</span><span class="token function">getRegistrationId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">boolean</span> supportedClientAuthenticationMethod <span class="token operator">=</span> clientAuthenticationMethod<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">ClientAuthenticationMethod</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span> <span class="token operator">||</span> clientAuthenticationMethod<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">ClientAuthenticationMethod</span><span class="token punctuation">.</span><span class="token constant">CLIENT_SECRET_BASIC</span><span class="token punctuation">)</span> <span class="token operator">||</span> clientAuthenticationMethod<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">ClientAuthenticationMethod</span><span class="token punctuation">.</span><span class="token constant">CLIENT_SECRET_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>supportedClientAuthenticationMethod<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;This class supports \`client_secret_basic\`, \`client_secret_post\`, and \`none\` by default. Client [%s] is using [%s] instead. Please use a supported client authentication method, or use \`setRequestEntityConverter\` to supply an instance that supports [%s].&quot;</span><span class="token punctuation">,</span> registrationId<span class="token punctuation">,</span> clientAuthenticationMethod<span class="token punctuation">,</span> clientAuthenticationMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestEntityConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>grantRequest<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addClientId</span><span class="token punctuation">(</span><span class="token class-name">RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> clientId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// request 에 client_id 추가</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> additionalParameters <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            additionalParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;client_id&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>코드가 길긴 한데 제일 밑의 <code>addClientId()</code> 메서드만 보면 된다. body 를 가져와서 client_id 를 넣는다.</p><h1 id="_4-결론" tabindex="-1"><a class="header-anchor" href="#_4-결론"><span>4. 결론</span></a></h1><p>최근 vue 공부를 하면서 코딩애플의 vue 강의를 들었다. 코딩애플은 vue 가 쉬운 이유가 코드를 짜는 방법이 정형화되어있기 때문이라고 했다. 예를 들어 특정 로직을 반복 하려면 react 에서는 map, for(), forEach 등등 많은 선택지가 있지만 vue 에서는 v-for 로 퉁친다고 했다.</p><p>springSecurity 도 비슷한 맥락인데, 기본설정으로 쓰기는 좋지만 커스텀이 필요하면 어디서부터 손을 대야하는지 막막하기는 하다. 이번 문제도 몇가지 해결방법이 있는데,</p><ol><li>Filter 를 구현한다.</li><li>AuthenticationProvider 를 구현한다.</li><li><strong>OAuth2AccessTokenResponseClient 을 구현한다.</strong> (선택한 방식)</li><li>Converter 를 구현한다. (가능한지는 확인안했음)</li><li>엔드포인트를 직접 Controller로 구현하고 필터를 무시한다.</li></ol><p>등등 셀 수 없는 방법으로 해결할 수 있다. 안타깝게도 방법이 많으면 생각을 많이 하게 되고, 장고 끝에 악수를 두게 된다. 그래서 길게 생각안하고 필요한 부분만 들어내서 고쳤다.</p>`,39)),a(l)])}const f=i(v,[["render",h],["__file","2025-02-13-security.html.vue"]]),R=JSON.parse('{"path":"/posts/spring/2025-02-13-security.html","title":"kakao 는 왜 OAuth API 스펙이 다를까(진짜 모름)","lang":"en-US","frontmatter":{"title":"kakao 는 왜 OAuth API 스펙이 다를까(진짜 모름)","date":"2025-02-13T00:00:00.000Z","tags":["oauth2"],"description":"OAuth2 로그인을 구현하면서 마주친 Token 발급 문제"},"headers":[{"level":1,"title":"1. 문제상황","slug":"_1-문제상황","link":"#_1-문제상황","children":[{"level":2,"title":"1.1 문제 발견","slug":"_1-1-문제-발견","link":"#_1-1-문제-발견","children":[]}]},{"level":1,"title":"2. 해결 방법","slug":"_2-해결-방법","link":"#_2-해결-방법","children":[{"level":2,"title":"2.1 OAuth2AccessTokenResponseClient","slug":"_2-1-oauth2accesstokenresponseclient","link":"#_2-1-oauth2accesstokenresponseclient","children":[]},{"level":2,"title":"2.2 SecurityConfig","slug":"_2-2-securityconfig","link":"#_2-2-securityconfig","children":[]}]},{"level":1,"title":"3. 구체적인 코드","slug":"_3-구체적인-코드","link":"#_3-구체적인-코드","children":[{"level":2,"title":"3.1 OAuth2AuthorizationCodeGrantRequestEntityConverter","slug":"_3-1-oauth2authorizationcodegrantrequestentityconverter","link":"#_3-1-oauth2authorizationcodegrantrequestentityconverter","children":[]},{"level":2,"title":"3.2 CustomTokenResponseClient","slug":"_3-2-customtokenresponseclient","link":"#_3-2-customtokenresponseclient","children":[]}]},{"level":1,"title":"4. 결론","slug":"_4-결론","link":"#_4-결론","children":[]}],"git":{},"filePathRelative":"_posts/spring/2025-02-13-security.md"}');export{f as comp,R as data};
