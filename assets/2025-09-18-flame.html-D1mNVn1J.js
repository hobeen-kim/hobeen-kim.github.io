import{_ as u,c as r,a,b as s,d,f as e,r as l,o as k,e as t}from"./app-6M4v-pIF.js";const m="/images/2025-09-18-flame/image-20250918142334423.png",v="/images/2025-09-18-flame/thumbnail.png",i="/images/2025-09-18-flame/image-20250919103504996.png",g="/images/2025-09-18-flame/image-20250919104717340.png",b="/images/2025-09-18-flame/image-20250919131244957.png",f="/images/2025-09-18-flame/image-20250919132358833.png",h="/images/2025-09-18-flame/image-20250919132641975.png",_="/images/2025-09-18-flame/image-20250919132822033.png",w="/images/2025-09-18-flame/image-20250919133422527.png",y="/images/2025-09-18-flame/image-20250919133643773.png",x="/images/2025-09-18-flame/image-20250919133954007.png",j={},F={class:"table-of-contents"};function S(G,n){const o=l("Header"),p=l("router-link"),c=l("Footer");return k(),r("div",null,[a(o),s("nav",F,[s("ul",null,[s("li",null,[a(p,{to:"#_1-flame-graph-읽는-방법"},{default:e(()=>n[0]||(n[0]=[t("1. Flame Graph 읽는 방법")])),_:1})]),s("li",null,[a(p,{to:"#_2-싱글-콜스택-구조"},{default:e(()=>n[1]||(n[1]=[t("2. 싱글 콜스택 구조")])),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#_2-1-구조"},{default:e(()=>n[2]||(n[2]=[t("2.1 구조")])),_:1})]),s("li",null,[a(p,{to:"#_2-2-상세"},{default:e(()=>n[3]||(n[3]=[t("2.2 상세")])),_:1})])])]),s("li",null,[a(p,{to:"#_3-여러-콜스택의-통합"},{default:e(()=>n[4]||(n[4]=[t("3. 여러 콜스택의 통합")])),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#_3-1-sampling"},{default:e(()=>n[5]||(n[5]=[t("3.1 Sampling")])),_:1})]),s("li",null,[a(p,{to:"#_3-2-sorting"},{default:e(()=>n[6]||(n[6]=[t("3.2 Sorting")])),_:1})]),s("li",null,[a(p,{to:"#_3-3-merging-grouping"},{default:e(()=>n[7]||(n[7]=[t("3.3 Merging (Grouping)")])),_:1})])])]),s("li",null,[a(p,{to:"#_4-flame-graph-활용"},{default:e(()=>n[8]||(n[8]=[t("4. Flame graph 활용")])),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#_4-1-성능-이슈-찾기"},{default:e(()=>n[9]||(n[9]=[t("4.1 성능 이슈 찾기")])),_:1})]),s("li",null,[a(p,{to:"#_4-2-코드-개선"},{default:e(()=>n[10]||(n[10]=[t("4.2 코드 개선")])),_:1})]),s("li",null,[a(p,{to:"#_4-3-개선-측정"},{default:e(()=>n[11]||(n[11]=[t("4.3 개선 측정")])),_:1})]),s("li",null,[a(p,{to:"#_4-4-반복과-정제"},{default:e(()=>n[12]||(n[12]=[t("4.4 반복과 정제")])),_:1})])])]),s("li",null,[a(p,{to:"#ref"},{default:e(()=>n[13]||(n[13]=[t("Ref.")])),_:1})])])]),n[14]||(n[14]=d('<p>Flame Graph 는 소프트웨어 performance 를 분석하는 데 필수적인 도구다. 병목 구간과 코드 최적화를 위한 시각화 도구를 제공한다. Flame Graph 를 뒤집어놓은 게 Icicle 인데 콜스택이라는 의미에 맞게 위에서 아래로 구성되어있다.</p><p>아래는 그라파나에서 설정한 pyroscope 의 Flame Graph 이다. (실제로는 icicle 인 듯하다.)</p><p><img src="'+m+'" alt="image-20250918142334423"></p><h1 id="_1-flame-graph-읽는-방법" tabindex="-1"><a class="header-anchor" href="#_1-flame-graph-읽는-방법"><span>1. Flame Graph 읽는 방법</span></a></h1><p>가장 명심해야 할 건 &quot;<strong>색은 아무 의미 없으며</strong>&quot;, &quot;<strong>x 축은 시간 순이 아니다</strong>&quot; 다. 이를 염두에 두고 설명한다.</p><p><img src="'+v+`" alt="image-20250918142557305"></p><ol><li>각각의 사각형은 스택의 함수 호출을 의미한다. 그리고 그 사각형의 너비는 함수의 상대적인 리소스 사용량을 의미하는데, 하위 함수의 사용량도 함께 포함한다.</li><li>y 축은 스택의 깊이다. 가장 위쪽의 사각형은 실행 중인 leaf 함수로 자원이 소비되는 지점이다. 그리고 그 하위의 스택들은 호출 경로를 의미한다.</li><li>x 축은 시간의 흐름이 아니라 샘플링된 데이터를 좌우로 펼쳐놓은 것이다. 같은 스택들을 합친다음 알파벳 순서로 정렬된다.</li><li>사각형의 너비는 리소스의 총 사용량을 나타낸다. 넓은 사각형의 함수는 좁은 사각형보다 리소스를 더 많이 소모했을 것이다.</li></ol><blockquote><p>색은 특별한 의미를 가지고 있지 않다. 함수별로 똑같은 색을 가질 수는 있지만 랜덤한 패턴으로 색이 선택된다. (flame 은 주로 붉은 계열)</p></blockquote><h1 id="_2-싱글-콜스택-구조" tabindex="-1"><a class="header-anchor" href="#_2-싱글-콜스택-구조"><span>2. 싱글 콜스택 구조</span></a></h1><p>Flame graph 는 프로그램의 콜스택을 보여준다. 그게 정확히 어떤 의미일까?</p><h2 id="_2-1-구조" tabindex="-1"><a class="header-anchor" href="#_2-1-구조"><span>2.1 구조</span></a></h2><p>그래프는 가로로 정렬된 직사각형들로 구성된 콜스택이다. 각 직사각형은 하나의 함수이고 그 너비는 그 함수가 소비한 시간(하위 함수를 포함하여)을 의미한다. 직사각형들은 다른 직사각형 위에 계속 쌓인다. 따라서 부모 함수가 가장 아래에 위치하고 하위 함수가 위에 계속 쌓이는 형식이다. 이 계층적 구조와 관계는 수직적인 정렬로 이해하기 쉽게 구성된다. 중요한 점은 다음과 같다.</p><ul><li>각 직사각형의 너비는 함수의 리소스 소모량을 나타낸다.</li><li>직사각형의 높이는 아무런 의미가 없다. 수직적인 정렬은 콜스택의 계층적 구조를 나타내기 위함이다.</li></ul><h2 id="_2-2-상세" tabindex="-1"><a class="header-anchor" href="#_2-2-상세"><span>2.2 상세</span></a></h2><p>하나의 콜스택으로 어떻게 그래프가 그려지는지 확인해보자. 다음 함수는 <code>a</code> 함수가 <code>b</code> 함수를 부르고, <code>b</code> 함수가 무한 루프를 도는 <code>c</code> 함수를 호출한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>예를 들어 위 함수를 50ms 동안 프로파일링했다면 아래와 같이 나타난다.</p><p><img src="`+i+`" alt="image-20250919103504996"></p><p>이 예제에서 <code>c</code> 함수가 시간의 대부분을 사용하지만 모든 직사각형이 같은 너비를 가지고 있다. 그 이유는 직사각형의 너비가 그 함수와 하위 함수까지 포함하기때문이다.</p><p>만약 <code>c</code> 함수를 더 많이 호출한다면 어떻게 될까?</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>큰 변화가 있어보이지는 않는다. 왜냐하면 콜스택은 <code>merge</code> 되기 때문이다. 따라서 <code>c</code> 함수는 <code>b</code> 함수 위에서 3개로 나눠지는 게 아니라 하나로 합쳐져서 보인다. 즉 <strong>함수가 같은 레벨에서 몇 번이나 실행되었느냐는 flame graph 에서 보여지지 않는다.</strong></p><p><img src="`+i+`" alt="image-20250919103504996"></p><p>여기서 이제 <code>b</code> 함수가 <code>d</code>, <code>e</code> 함수를 추가로 호출해보자. 순서는 <code>d</code> -&gt; <code>e</code> -&gt; <code>c</code> 순서로 호출한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그러면 아래와 같이 나타난다.</p><p><img src="`+g+`" alt="image-20250919104717340"></p><p>해당 콜스택에서 눈여겨볼 점은 <code>b</code> 의 하위로 <code>d</code> -&gt; <code>e</code> -&gt; <code>c</code> 순서로 호출되었는데 flame graph 에서는 알파벳 순서로 정렬되어있다. <strong>콜스택은 호출 순서와 전혀 관련이 없다는 뜻이다.</strong> 또한 x 축은 시간의 흐름을 나타내지 않는 것도 기억해야 한다.</p><p>비슷하게 이번에는 <code>a</code> -&gt; <code>b</code>, <code>c</code> -&gt; (b,c 각각) <code>d</code>,<code>e</code>,<code>f</code> 순으로 호출한다고 해보자.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 main 함수를 호출한 콜스택은 아래와 같이 된다. 여기서 확인할 점은 <code>d</code>, <code>e</code>, <code>f</code> 함수가 같은 깊이에서 두번씩 호출되더라도 같은 부모 함수가 아니라면 merge 되지 않는다는 것이다.</p><p><img src="`+b+'" alt="image-20250919131244957"></p><h1 id="_3-여러-콜스택의-통합" tabindex="-1"><a class="header-anchor" href="#_3-여러-콜스택의-통합"><span>3. 여러 콜스택의 통합</span></a></h1><p>프로그램이 실행되는 동안 수많은 콜스택이 생성된다. 1초 동안 프로그램은 수천 개의 콜스택을 가질 수 있는데 이는 현실적으로 모두 수집하기가 쉽지 않다. 따라서 일정 간격으로 샘플링을 하고 스택을 통합하면서 이를 해결할 수 있다.</p><p>콜스택은 다음 3단계로 수집되고 통합된다.</p><h2 id="_3-1-sampling" tabindex="-1"><a class="header-anchor" href="#_3-1-sampling"><span>3.1 Sampling</span></a></h2><p>샘플링은 성능 분석을 위해 통계적으로 중요하고 충분한 데이터를 제공한다. 샘플링은 모든 이벤트에 대한 수집 없이 프로그램 리소스 소모를 보여준다. 콜스택을 지속적으로 캡처하면서 프로그램 실행의 트랜드와 패턴에 대한 <strong>스냅샷</strong>을 얻는 것이다.</p><blockquote><p>이러한 접근은 데이터 분석을 위한 성능 오버헤드를 최소화하면서 더 효율적이고 관리가 편하게 만든다. 물론 모든 이벤트를 기록하는 게 더 포괄적인 관점을 제공하겠지만 너무 큰 오버헤드와 감당할 수 없는 데이터량에 압도될 수 있다. 따라서 샘플링은 데이터를 실용적으로 수집하면서도 신뢰할 수 있고 효율적인 성능 분석을 가능케 한다.</p></blockquote><p>예를 들어 50ms 의 간격으로 아래와 같은 샘플링 데이터를 얻었다고 하자. 50ms 간격으로 하나씩(여기선 왼쪽부터) 스냅샷을 떠 하나의 수직적인 콜스택을 얻는다.</p><p><img src="'+f+'" alt="image-20250919132358833"></p><h2 id="_3-2-sorting" tabindex="-1"><a class="header-anchor" href="#_3-2-sorting"><span>3.2 Sorting</span></a></h2><p>이제 샘플링된 콜스택을 주어진 시간 범위 내에서 알파벳 순으로 정렬한다. (이때 샘플의 순서는 보장되지 않는다.)</p><p><img src="'+h+'" alt="image-20250919132641975"></p><h2 id="_3-3-merging-grouping" tabindex="-1"><a class="header-anchor" href="#_3-3-merging-grouping"><span>3.3 Merging (Grouping)</span></a></h2><p>마지막으로 같은 콜스택을 모두 더한다. 앞서 싱글 스택에서 <code>c</code> 함수가 같은 레벨이고 같은 부모일 때 merge 되는 것을 확인했다. 그것과 같은 과정이다.</p><p><img src="'+_+'" alt="image-20250919132822033"></p><p>이 과정을 통해 flame graph 가 그려지고, 이를 통해 병목 현상을 식별하고 코드를 최적화할 수 있게 된다.</p><h1 id="_4-flame-graph-활용" tabindex="-1"><a class="header-anchor" href="#_4-flame-graph-활용"><span>4. Flame graph 활용</span></a></h1><p>성능 최적화는 모든 소프트웨어에 중요한 문제이며, 유저 경험과 시스템 리소스에 큰 영향을 미친다. 따라서 성능 이슈의 원인을 확인하고 매우 중요하고, 특히 큰 코드베이스와 복잡한 콜스택에서 더 중요해준다. Flame graph 는 다음과 같을 때 유용하다.</p><ol><li><strong>복잡한 데이터 시각화</strong> : Flame graph 는 콜스택 데이터를 그래프로 보여줘서 서로 다른 함수 간의 관계나 리소스 소모를 더 잘 표현하고 이해하기 쉽게 만들어준다.</li><li><strong>병목구간 식별</strong> : 콜스택 데이터를 시각화해서 개발자들이 CPU 소모량이나 메모리 양이 큰 병목구간을 식별하게 해준다.</li><li><strong>profile 비교</strong> : flame graph 는 다른 프로필과 비교해서 코드베이스의 수정이 성능 상으로 어떤 변화를 가져오는지 알기 쉽게 해준다.</li></ol><p><img src="'+w+'" alt="image-20250919133422527"></p><h2 id="_4-1-성능-이슈-찾기" tabindex="-1"><a class="header-anchor" href="#_4-1-성능-이슈-찾기"><span>4.1 성능 이슈 찾기</span></a></h2><p><strong>너비가 긴 콜스택 찾기</strong></p><p>많은 양의 리소스를 소모하는 함수를 찾으려면 우선 직사각형의 길이가 긴 함수를 찾는다. 그 함수가 바로 전체 실행 시간의 큰 부분을 차지한다. 그리고 이런 함수들을 최적화의 후보로 잡아야 한다.</p><p><img src="'+y+'" alt="image-20250919133643773"></p><p><strong>콜스택 검사</strong></p><p>다른 함수들 간의 관계를 이해하기 위해 호출 스택 계층 구조를 확인해야 한다. 이를 통해 성능 문제가 단일 함수에서 비롯된 것인지, 아니면 여러 함수의 조합에서 발생한 것인지 파악할 수 있다. 또한 호출 스택을 이해하면 리팩터링이나 불필요한 호출 제거와 같은 최적화 기회를 발견할 수도 있다.</p><p><strong>tall 스택 확인</strong></p><p>호출의 깊이가 긴 tall 스택은 복잡하고 비효율적인 코드일 수 있다.</p><p><img src="'+x+'" alt="image-20250919133954007"></p><p><strong>반복 패턴 확인</strong></p><p>그래프에서 반복되는 패턴은 불필요하거나 반복적인 코드일 수 있고, 개선의 대상이 될 수 이싿.</p><h2 id="_4-2-코드-개선" tabindex="-1"><a class="header-anchor" href="#_4-2-코드-개선"><span>4.2 코드 개선</span></a></h2><p>만약 문제가 되는 함수를 찾고 콜스택을 분석했다면 코드 개선을 시작해야 한다.</p><ol><li><strong>알고리즘 최적화</strong></li><li><strong>성능이 매우 중요한 코드 경로의 함수 호출을 최소화</strong></li><li><strong>코드 병렬</strong> : 성능 병목 현상이 CPU 연산에 의해 발생한다면, 코드를 병렬화하여 여러 프로세서 코어를 활용하는 것을 고려해야 한다.</li><li><strong>메모리 사용 줄이기</strong> : 메모리 할당과 해제를 최적화하고, 메모리 단편화를 최소화해야 한다.</li></ol><h2 id="_4-3-개선-측정" tabindex="-1"><a class="header-anchor" href="#_4-3-개선-측정"><span>4.3 개선 측정</span></a></h2><p>개선 이후에는 새로운 프로파일링 데이터로 flame graph 를 확인한다. 이전 그래프와 새로운 그래프를 확인하면서 개선 사항이 성능 상으로 어떤 변화를 보여주는지 측정한다.</p><p>만약 개선이 성공적이라면 문제가 되는 함수의 너비가 줄어드는 것을 볼 수 있을 것이다.</p><h2 id="_4-4-반복과-정제" tabindex="-1"><a class="header-anchor" href="#_4-4-반복과-정제"><span>4.4 반복과 정제</span></a></h2><p>성능 개선은 반복적인 프로세스다. 지속적으로 분석하고 그래프를 업데이트하면서 새로운 병목 구간을 찾고 관련된 코드를 업데이트해야 한다. 그러면서 목표로 하는 성능까지 지속적으로 개선해야 한다.</p><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>Ref.</span></a></h1><ul><li><a href="https://www.polarsignals.com/blog/posts/2023/03/28/how-to-read-icicle-and-flame-graphs" target="_blank" rel="noopener noreferrer">Ice and Fire: How to read icicle and flame graphs</a></li></ul>',72)),a(c)])}const N=u(j,[["render",S],["__file","2025-09-18-flame.html.vue"]]),C=JSON.parse('{"path":"/posts/tech/2025-09-18-flame.html","title":"flame graph 읽는 법","lang":"en-US","frontmatter":{"title":"flame graph 읽는 법","date":"2025-09-18T00:00:00.000Z","tags":["profile","flamegraph"],"description":"flame graph 가 복잡해서 찾아본 graph 읽는 방법"},"headers":[{"level":1,"title":"1. Flame Graph 읽는 방법","slug":"_1-flame-graph-읽는-방법","link":"#_1-flame-graph-읽는-방법","children":[]},{"level":1,"title":"2. 싱글 콜스택 구조","slug":"_2-싱글-콜스택-구조","link":"#_2-싱글-콜스택-구조","children":[{"level":2,"title":"2.1 구조","slug":"_2-1-구조","link":"#_2-1-구조","children":[]},{"level":2,"title":"2.2 상세","slug":"_2-2-상세","link":"#_2-2-상세","children":[]}]},{"level":1,"title":"3. 여러 콜스택의 통합","slug":"_3-여러-콜스택의-통합","link":"#_3-여러-콜스택의-통합","children":[{"level":2,"title":"3.1 Sampling","slug":"_3-1-sampling","link":"#_3-1-sampling","children":[]},{"level":2,"title":"3.2 Sorting","slug":"_3-2-sorting","link":"#_3-2-sorting","children":[]},{"level":2,"title":"3.3 Merging (Grouping)","slug":"_3-3-merging-grouping","link":"#_3-3-merging-grouping","children":[]}]},{"level":1,"title":"4. Flame graph 활용","slug":"_4-flame-graph-활용","link":"#_4-flame-graph-활용","children":[{"level":2,"title":"4.1 성능 이슈 찾기","slug":"_4-1-성능-이슈-찾기","link":"#_4-1-성능-이슈-찾기","children":[]},{"level":2,"title":"4.2 코드 개선","slug":"_4-2-코드-개선","link":"#_4-2-코드-개선","children":[]},{"level":2,"title":"4.3 개선 측정","slug":"_4-3-개선-측정","link":"#_4-3-개선-측정","children":[]},{"level":2,"title":"4.4 반복과 정제","slug":"_4-4-반복과-정제","link":"#_4-4-반복과-정제","children":[]}]},{"level":1,"title":"Ref.","slug":"ref","link":"#ref","children":[]}],"git":{},"filePathRelative":"_posts/tech/2025-09-18-flame.md"}');export{N as comp,C as data};
