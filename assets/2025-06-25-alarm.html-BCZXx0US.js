import{_ as r,c as d,a,b as i,d as u,f as t,r as n,o as m,e as s}from"./app-ChmD4FNX.js";const g="/images/2025-06-25-alarm/image-20250725111905343.png",h="/images/2025-06-25-alarm/image-20250725113928260.png",_="/images/2025-06-25-alarm/image-20250725122119913.png",f="/images/2025-06-25-alarm/image-20250725151335781.png",c="/images/2025-06-25-alarm/image-20250725151356553.png",S="/images/2025-06-25-alarm/image-20250725160306531.png",b="/images/2025-06-25-alarm/image-20250725160001366.png",x="/images/2025-06-25-alarm/image-20250725160840853.png",k={},v={class:"table-of-contents"};function q(Q,l){const p=n("Header"),e=n("router-link"),o=n("Footer");return m(),d("div",null,[a(p),i("nav",v,[i("ul",null,[i("li",null,[a(e,{to:"#_1-요구사항"},{default:t(()=>l[0]||(l[0]=[s("1. 요구사항")])),_:1})]),i("li",null,[a(e,{to:"#_2-해결-과정"},{default:t(()=>l[1]||(l[1]=[s("2. 해결 과정")])),_:1}),i("ul",null,[i("li",null,[a(e,{to:"#방법1-레디스를-활용한-간단한-알림"},{default:t(()=>l[2]||(l[2]=[s("방법1. 레디스를 활용한 간단한 알림")])),_:1}),i("ul",null,[i("li",null,[a(e,{to:"#해당-구조의-문제점"},{default:t(()=>l[3]||(l[3]=[s("해당 구조의 문제점")])),_:1})])])]),i("li",null,[a(e,{to:"#방법2-sqs-로-알림-컴포넌트를-서버로-분리"},{default:t(()=>l[4]||(l[4]=[s("방법2. SQS 로 알림 컴포넌트를 서버로 분리")])),_:1}),i("ul",null,[i("li",null,[a(e,{to:"#초기-구상"},{default:t(()=>l[5]||(l[5]=[s("초기 구상")])),_:1})]),i("li",null,[a(e,{to:"#추가-방안"},{default:t(()=>l[6]||(l[6]=[s("추가 방안")])),_:1})]),i("li",null,[a(e,{to:"#아이디-생성-방법"},{default:t(()=>l[7]||(l[7]=[s("아이디 생성 방법")])),_:1})])])]),i("li",null,[a(e,{to:"#방법3-작업-서버-분리-추가사항"},{default:t(()=>l[8]||(l[8]=[s("방법3. 작업 서버 분리 (추가사항)")])),_:1})]),i("li",null,[a(e,{to:"#최종-구조"},{default:t(()=>l[9]||(l[9]=[s("최종 구조")])),_:1})])])]),i("li",null,[a(e,{to:"#추가-사항들"},{default:t(()=>l[10]||(l[10]=[s("추가 사항들")])),_:1}),i("ul",null,[i("li",null,[a(e,{to:"#_1-데이터베이스에-포함될-내용"},{default:t(()=>l[11]||(l[11]=[s("1. 데이터베이스에 포함될 내용")])),_:1})])])])])]),l[12]||(l[12]=u('<h1 id="_1-요구사항" tabindex="-1"><a class="header-anchor" href="#_1-요구사항"><span>1. 요구사항</span></a></h1><p>지금 개발하고 있는 서버에서 알림과 비슷한, 다음과 같은 요구사항이 필요했다.</p><p><img src="'+g+'" alt="image-20250725111905343"></p><ol><li>애플리케이션 설치 시 &quot;설치 중&quot; 표시 (알림으로 지칭)</li><li>설치가 완료되면 &quot;완료&quot; 또는 &quot;실패&quot; 표시</li><li>알림 목록을 조회</li></ol><p>우선적으로 빠르게 개발을 완료했고 (시간이 가장 중요했기 때문에) 이후에 예전에 읽었던 <code>가상 면접 사례로 배우는 대규모 시스템 설계 기초</code> 에서 알림 서비스 챕터가 생각나서 추가로 개선을 해보았다.</p><h1 id="_2-해결-과정" tabindex="-1"><a class="header-anchor" href="#_2-해결-과정"><span>2. 해결 과정</span></a></h1><h2 id="방법1-레디스를-활용한-간단한-알림" tabindex="-1"><a class="header-anchor" href="#방법1-레디스를-활용한-간단한-알림"><span>방법1. 레디스를 활용한 간단한 알림</span></a></h2><p>우선 빠르게 개발하기 위해 (또한 예상되는 트래픽이 적어서) 레디스로 알림을 생성, 수정하고 조회하도록 만들었다.</p><p><img src="'+h+'" alt="image-20250725113928260"></p><p>하나의 WAS 에서 앱과 알림 컴포넌트가 동작한다.</p><ul><li>앱 설치 등의 이벤트가 발생했을 떄 알림 컴포넌트로 메시지를 보낸다.</li><li>알림 컴포넌트는 레디스에 알림을 저장하고 사용자에게 알림을 푸시한다. (pub/sub 방식 또는 polling 방식)</li></ul><p>알림을 생성할 때는 Threadpool 을 만들어서 비동기로 동작하게 했다.</p><h3 id="해당-구조의-문제점" tabindex="-1"><a class="header-anchor" href="#해당-구조의-문제점"><span>해당 구조의 문제점</span></a></h3><ol><li>알림의 종류가 많아지면 변경해야 할 포인트가 많아진다.</li><li>레디스에 정보를 저장하면서 장애 시 알림 유실 위험이 있다.</li><li>다수 사용자에게 동시에 푸시가 발생하면 thread pool 포화, CPU 사용률 증가로 서비스 전체에 영향을 줄 수 있다.</li></ol><h2 id="방법2-sqs-로-알림-컴포넌트를-서버로-분리" tabindex="-1"><a class="header-anchor" href="#방법2-sqs-로-알림-컴포넌트를-서버로-분리"><span>방법2. SQS 로 알림 컴포넌트를 서버로 분리</span></a></h2><p>디커플링 도구로 카프카 대신 SQS 를 선택한 이유는 다음과 같다.</p><ul><li>Kafka (MSK) 와 대비해서 SQS는 AWS에서 완전관리형으로 제공되며, 별도 인프라 운영 없이 빠른 개발이 가능하다.</li><li>고성능 스트리밍 보다는 비교적 단순한 이벤트 전달만 필요하다.</li><li>SQS 도 retry 와 DLQ 로 예외 처리가 가능하다.</li><li>초기 비용이 적다.</li></ul><h3 id="초기-구상" tabindex="-1"><a class="header-anchor" href="#초기-구상"><span>초기 구상</span></a></h3><p><img src="'+_+'" alt="image-20250725122119913"></p><p>초기에는 이런 식으로 구상했는데 다음과 같은 문제점이 있었다.</p><ol><li>같은 알림을 추적해서 수정해야 한다. 설치가 완료되면 해당 알림을 &quot;완료&quot; 또는 &quot;실패&quot; 로 표시해야 하기 때문이다.</li><li>따라서 앱 서비스는 알림 id 를 응답값으로 받아야 한다.</li><li>그런데 큐로 분리하면 앱 서비스에서는 알림 id 를 받을 수 없다.</li></ol><h3 id="추가-방안" tabindex="-1"><a class="header-anchor" href="#추가-방안"><span>추가 방안</span></a></h3><p>따라서 아래와 같은 두 가지 방안을 생각해보았다.</p><p><strong>앱 서비스 쪽에서 알림 id 를 생성 (선택)</strong></p><ul><li>장점 : 알림 서버와 디커플링 가능</li><li>단점 : 알림 서버에서 알림 id 생성에 관한 정책을 결정할 수 없음</li></ul><p><img src="'+f+'" alt="image-20250725151335781"></p><p><strong>알림 서버와 알림 작업 서버를 구분</strong></p><p>알림 서버에서는 알림 id 생성 및 반환 후 알림 작업 서버 큐로 작업을 던진다.</p><p><em>(두 개의 서버가 하나의 저장소를 공유하는 구조떄문에 해당 설계를 선택하지 않았다.)</em></p><ul><li>장점 : 알림 서버에서 메타 데이터를 관리하고 알림 id 생성 가능</li><li>단점 : 단일 장애점이 될 수 있다. 현재 구조에서, 알림 작업 서버는 다시 레디스로 저장해야 하기 때문에 두 개의 서버가 하나의 저장소를 공유한다.</li></ul><p><img src="'+c+'" alt="image-20250725151356553"></p><h3 id="아이디-생성-방법" tabindex="-1"><a class="header-anchor" href="#아이디-생성-방법"><span>아이디 생성 방법</span></a></h3><p>앱 서비스쪽에서 알림 id 를 생성한다면 다음같은 문제가 있을 것이라고 생각했다.</p><ol><li>알림 서버에서 id 정책을 정할 수 없음 <ul><li>해결 : 공유 라이브러리를 사용하거나, 아이디 정책을 설정하고 각 서버에 전파해야 한다. 그리고 맞지 않는 형식이면 거부해야 한다.</li></ul></li><li>id 가 겹치는 문제 <ul><li>UUID 로 사용하면 개별적으로 생성한 id 가 겹칠 일은 없다. 하지만 생성된 id 가 연속해서 쓰이거나, 테스트용으로 넣은 정적 String 값이 id 로 보내질 수 있다.</li><li>해결 : 이 부분은 알림 서버에서는 해결할 수 없고 각 서비스별로 잘 관리해야 한다.</li></ul></li></ol><p>우선 id 생성 정책은 다음과 같다.</p><ul><li>서비스#uuid (ex. app#abacabcsefasdfad)</li></ul><p>그리고 아래와 같이 sqs 전 api gateway 에서 id 를 정책에 맞는지 평가하고 평가 여부를 응답한다. (200, 400 응답)</p><p><img src="'+S+'" alt="image-20250725160306531"></p><h2 id="방법3-작업-서버-분리-추가사항" tabindex="-1"><a class="header-anchor" href="#방법3-작업-서버-분리-추가사항"><span>방법3. 작업 서버 분리 (추가사항)</span></a></h2><p><code>대규모 시스템 설계 기초</code> 에서는 알림 서버와 작업 서버를 분리하고 있다.</p><p><img src="'+b+'" alt="image-20250725160001366"></p><p>하지만 서비스 규모가 크지 않을 때 작업 서버와 큐를 여러 개 둔다는 건 운영적인 측면에서 필요하지 않다고 생각했다. 그리고 이미 <strong>서비스들과 알림 서버는 디커플링되어 있기 때문에</strong> 알림 서버가 단일 장애점이라고도 생각하지 않았다.</p><h2 id="최종-구조" tabindex="-1"><a class="header-anchor" href="#최종-구조"><span>최종 구조</span></a></h2><p><img src="'+x+'" alt="image-20250725160840853"></p><ul><li>알림 서버는 다음 기능을 제공한다. <ul><li>알림 전송 API (SQS 만 구독, 같은 VPC 에서만 api gateway 호출 가능) <ul><li>여러 유저에게 동시에 보낼 수 있도록 다중 전송 기능도 포함</li></ul></li><li>알림 검증 : 이메일 주소, 전화 번호 등에 대한 기본적인 검증</li><li>알림 전송</li><li>알림 조회</li></ul></li></ul><h1 id="추가-사항들" tabindex="-1"><a class="header-anchor" href="#추가-사항들"><span>추가 사항들</span></a></h1><h2 id="_1-데이터베이스에-포함될-내용" tabindex="-1"><a class="header-anchor" href="#_1-데이터베이스에-포함될-내용"><span>1. 데이터베이스에 포함될 내용</span></a></h2><p>데이터베이스에는 다음과 같은 두 가지 정보를 포함한다.</p><ol><li><p>알림</p><ul><li><p>기존에 보낸 알림을 조회한다.</p></li><li><p>처리 결과, 읽음(필요 시) 등의 정보도 함께 포함한다.</p></li></ul></li><li><p>유저 메타 데이터</p><ol><li>유저가 가진 이메일, 휴대폰 번호, 디바이스 (디바이스 정보는 유저와 다대일 관계이다.)</li><li>각 채널 별 알림 on/off 상태</li></ol></li></ol>',49)),a(o)])}const V=r(k,[["render",q],["__file","2025-06-25-alarm.html.vue"]]),A=JSON.parse(`{"path":"/posts/spring/2025-06-25-alarm.html","title":"(푸시) 알림 서버 만들기","lang":"en-US","frontmatter":{"title":"(푸시) 알림 서버 만들기","date":"2025-06-25T00:00:00.000Z","tags":["alarm","msa"],"description":"'가상 면접 사례로 배우는 대규모 시스템 설계 기초' 를 참고로 한 실제 알림 서버 만들기"},"headers":[{"level":1,"title":"1. 요구사항","slug":"_1-요구사항","link":"#_1-요구사항","children":[]},{"level":1,"title":"2. 해결 과정","slug":"_2-해결-과정","link":"#_2-해결-과정","children":[{"level":2,"title":"방법1. 레디스를 활용한 간단한 알림","slug":"방법1-레디스를-활용한-간단한-알림","link":"#방법1-레디스를-활용한-간단한-알림","children":[{"level":3,"title":"해당 구조의 문제점","slug":"해당-구조의-문제점","link":"#해당-구조의-문제점","children":[]}]},{"level":2,"title":"방법2. SQS 로 알림 컴포넌트를 서버로 분리","slug":"방법2-sqs-로-알림-컴포넌트를-서버로-분리","link":"#방법2-sqs-로-알림-컴포넌트를-서버로-분리","children":[{"level":3,"title":"초기 구상","slug":"초기-구상","link":"#초기-구상","children":[]},{"level":3,"title":"추가 방안","slug":"추가-방안","link":"#추가-방안","children":[]},{"level":3,"title":"아이디 생성 방법","slug":"아이디-생성-방법","link":"#아이디-생성-방법","children":[]}]},{"level":2,"title":"방법3. 작업 서버 분리 (추가사항)","slug":"방법3-작업-서버-분리-추가사항","link":"#방법3-작업-서버-분리-추가사항","children":[]},{"level":2,"title":"최종 구조","slug":"최종-구조","link":"#최종-구조","children":[]}]},{"level":1,"title":"추가 사항들","slug":"추가-사항들","link":"#추가-사항들","children":[{"level":2,"title":"1. 데이터베이스에 포함될 내용","slug":"_1-데이터베이스에-포함될-내용","link":"#_1-데이터베이스에-포함될-내용","children":[]}]}],"git":{},"filePathRelative":"_posts/spring/2025-06-25-alarm.md"}`);export{V as comp,A as data};
