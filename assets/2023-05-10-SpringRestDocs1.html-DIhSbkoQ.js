import{_ as i,c as u,a,b as s,d as k,f as t,r as o,o as r,e}from"./app-Dhq2k8d_.js";const d="/images/2023-05-10-SpringRestDocs1/image-20230508191009728.png",m="/images/2023-05-10-SpringRestDocs1/image-20230508191911011.png",v="/images/2023-05-10-SpringRestDocs1/image-20230508192100190.png",b="/images/2023-05-10-SpringRestDocs1/image-20230508192714898.png",g="/images/2023-05-10-SpringRestDocs1/image-20230513130449680.png",f="/images/2023-05-10-SpringRestDocs1/image-20230513131622218.png",h="/images/2023-05-10-SpringRestDocs1/image-20230513132034403.png",q="/images/2023-05-10-SpringRestDocs1/image-20230513140731556.png",w={},y={class:"table-of-contents"};function x(P,n){const c=o("Header"),p=o("router-link"),l=o("Footer");return r(),u("div",null,[a(c),s("nav",y,[s("ul",null,[s("li",null,[a(p,{to:"#spring-rest-docs"},{default:t(()=>n[0]||(n[0]=[e("Spring REST Docs")])),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#특징"},{default:t(()=>n[1]||(n[1]=[e("특징")])),_:1})]),s("li",null,[a(p,{to:"#swagger-vs-spring-rest-docs"},{default:t(()=>n[2]||(n[2]=[e("Swagger vs Spring REST Docs")])),_:1})])])]),s("li",null,[a(p,{to:"#spring-rest-docs-사용"},{default:t(()=>n[3]||(n[3]=[e("Spring REST Docs 사용")])),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#gradle-build"},{default:t(()=>n[4]||(n[4]=[e("gradle.build")])),_:1})]),s("li",null,[a(p,{to:"#예제-설정"},{default:t(()=>n[5]||(n[5]=[e("예제 설정")])),_:1})]),s("li",null,[a(p,{to:"#mockmvc-를-이용한-테스트-코드-작성"},{default:t(()=>n[6]||(n[6]=[e("MockMvc 를 이용한 테스트 코드 작성")])),_:1})]),s("li",null,[a(p,{to:"#문서화"},{default:t(()=>n[7]||(n[7]=[e("문서화")])),_:1})]),s("li",null,[a(p,{to:"#json-prettyprint"},{default:t(()=>n[8]||(n[8]=[e("JSON prettyPrint")])),_:1})]),s("li",null,[a(p,{to:"#빌드"},{default:t(()=>n[9]||(n[9]=[e("빌드")])),_:1})]),s("li",null,[a(p,{to:"#문서-커스텀-하기"},{default:t(()=>n[10]||(n[10]=[e("문서 커스텀 하기")])),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#prettyprint"},{default:t(()=>n[11]||(n[11]=[e("prettyPrint")])),_:1})]),s("li",null,[a(p,{to:"#responsefield-넣기-커스텀"},{default:t(()=>n[12]||(n[12]=[e("ResponseField 넣기, 커스텀")])),_:1})])])])])])])]),n[13]||(n[13]=k(`<p>저번에 RestAPI 를 간략하게 정리하면서 제 토이프로젝트에는 REST API 가 제대로 적용되지 않았다는 걸 깨달았습니다. 제대로 공부하기 전까진 그냥 GET, POST 만 써서 uri 로 연결하면 되는 줄 알았거든요...</p><blockquote><p>[<a href="https://hobeen-kim.github.io/web/WEB-RESTAPI/" target="_blank" rel="noopener noreferrer">web] restapi</a> 제가 RestAPI 에 대해 정리한 문서입니다.</p></blockquote><p>그래서 API 를 리팩토링하는 겸, Spring REST Docs를 공부하고 함께 적용하기로 했습니다.</p><p>툴은 Swagger 와 Spring REST Docs 중에 고민했었는데요. Spring REST Docs 가 깔끔해보여서... 마음이 가는대로 정했습니다. ㅎㅎ (실제 코드에 추가되는 코드가 없다는 게 끌렸습니다.) 아래 포스팅에서 간략히 비교해보겠습니다.</p><h1 id="spring-rest-docs" tabindex="-1"><a class="header-anchor" href="#spring-rest-docs"><span>Spring REST Docs</span></a></h1><p>Spring Rest Docs 는 API 를 명세화하기 위한 툴입니다. 프로젝트를 진행하면서 API 를 만들고, 통합하고 사용할 때 API 의 명세화는 필수 입니다. 하지만 이러한 API 를 일일히 수동으로 문서화하는 것은 매우 힘든 작업이며, 프로젝트 핵심 로직에서 벗어난 일입니다.</p><p>예를 들어서 API 가 변경되었을 때 문서를 적시에 변경해주지 않으면 API 를 사용하는 입장에서는 API 문서대로 요청했음에도 제대로 된 응답을 받을 수 없게 됩니다.</p><p>따라서 API 명세화의 자동화가 필요한데 그를 위한 대표적인 툴 중 하나로 Spring Rest Docs 가 있습니다.</p><p>Rest Docs 는 테스트 코드를 기반으로 Asciidoctor 를 사용하여 Restful 문서를 생성하고 테스트로 생성된 snippet 을 사용하여 snippet 이 올바르지 않으면 생성된 테스트가 실패하여 정확성을 보장해줍니다.</p><h2 id="특징" tabindex="-1"><a class="header-anchor" href="#특징"><span>특징</span></a></h2><ol><li>Test-driven documentation 입니다. 문서는 API 를 기반으로 한 테스트를 통해서 생성되며, 이를 통해 문서는 항상 최신화된 상태를 유지합니다. 따라서 테스트가 성공해야 문서가 작성되어 API 의 신뢰도를 높이고 테스트 코드 검증을 강제로 하게 합니다.</li><li>프로덕션 코드와 분리되어 있어 실제 코드에 추가되는 코드가 없습니다. (제가 가장 마음에 들었던 부분입니다.)</li></ol><h2 id="swagger-vs-spring-rest-docs" tabindex="-1"><a class="header-anchor" href="#swagger-vs-spring-rest-docs"><span>Swagger vs Spring REST Docs</span></a></h2><p>위에서 서술한 것처럼 Swagger 와 Spring Rest Docs 중에 많은 고민을 했는데, 둘의 차이를 개략적으로 짚고 넘어가겠습니다.</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">Spring Rest Docs</th><th style="text-align:left;">Swagger</th></tr></thead><tbody><tr><td style="text-align:left;">장점</td><td style="text-align:left;">제품코드에 영향 없다.</td><td style="text-align:left;">API 를 테스트 해 볼수 있는 화면을 제공한다.</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">테스트가 성공해야 문서작성된다.</td><td style="text-align:left;">적용하기 쉽다.</td></tr><tr><td style="text-align:left;">단점</td><td style="text-align:left;">적용하기 어렵다.</td><td style="text-align:left;">제품코드에 어노테이션 추가해야한다.</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;">제품코드와 동기화가 안될수 있다.</td></tr></tbody></table><h1 id="spring-rest-docs-사용" tabindex="-1"><a class="header-anchor" href="#spring-rest-docs-사용"><span>Spring REST Docs 사용</span></a></h1><h2 id="gradle-build" tabindex="-1"><a class="header-anchor" href="#gradle-build"><span>gradle.build</span></a></h2><p>Rest Docs 는 gradle 부터 난관입니다. gradle 문법은 다음에 따로 포스팅해보겠습니다.</p><p>먼저 Java17, SpringBoot 3.0.6, Gradle 7.6.1 을 사용했습니다. build 에서 간단한 건 주석, 설명이 필요한 건 주석에 번호를 달아서 아래에 적어보겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">plugins <span class="token punctuation">{</span></span>
<span class="line">	id <span class="token char">&#39;java&#39;</span></span>
<span class="line">	id &#39;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot&#39; version <span class="token char">&#39;3.0.6&#39;</span></span>
<span class="line">	id &#39;io<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>dependency<span class="token operator">-</span>management&#39; version <span class="token char">&#39;1.1.0&#39;</span></span>
<span class="line">    <span class="token comment">//asciidoctor 파일을 컨버팅하고 build 폴더에 복사하기 위한 플러그인</span></span>
<span class="line">	id &#39;org<span class="token punctuation">.</span>asciidoctor<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>convert&#39; version <span class="token char">&#39;3.3.2&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">configurations <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//asciicodctorExt 를 configuration 으로 지정</span></span>
<span class="line">	asciidoctorExt</span>
<span class="line">	compileOnly <span class="token punctuation">{</span></span>
<span class="line">		extendsFrom annotationProcessor</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">dependencies <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">        </span>
<span class="line">	<span class="token comment">//spring rest docs</span></span>
<span class="line">    <span class="token comment">//adoc 파일에서 사용할 snippets 속성이 자동으로 build/generated-snippets 를 가리키게 함</span></span>
<span class="line">	asciidoctorExt &#39;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token operator">:</span>spring<span class="token operator">-</span>restdocs<span class="token operator">-</span>asciidoctor&#39;</span>
<span class="line">	testImplementation &#39;org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token operator">:</span>spring<span class="token operator">-</span>restdocs<span class="token operator">-</span>mockmvc<span class="token operator">:</span><span class="token number">3.0</span><span class="token number">.0</span>&#39;</span>
<span class="line"></span>
<span class="line">	</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">ext <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//snippets 파일이 저장될 경로를 snippetsDir 로 변수 설정</span></span>
<span class="line">	snippetsDir <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span>&#39;build<span class="token operator">/</span>generated<span class="token operator">-</span>snippets&#39;<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">test <span class="token punctuation">{</span></span>
<span class="line">	outputs<span class="token punctuation">.</span>dir snippetsDir</span>
<span class="line">    <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">asciidoctor <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//Asciidoctor 에서 asciidoctorExt 설정을 사용하도록 함</span></span>
<span class="line">	configurations &#39;asciidoctorExt&#39;</span>
<span class="line">    <span class="token comment">//1</span></span>
<span class="line">	<span class="token function">baseDirFollowsSourceFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">//input 디렉토리를 SnippetsDir 로 설정합니다.</span></span>
<span class="line">	inputs<span class="token punctuation">.</span>dir snippetsDir</span>
<span class="line">    <span class="token comment">//2</span></span>
<span class="line">	dependsOn test</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">asciidoctor<span class="token punctuation">.</span>doFirst <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//기존에 생성된 파일은 지운 후 새로운 파일을 만들 준비를 합니다.</span></span>
<span class="line">	delete <span class="token function">file</span><span class="token punctuation">(</span>&#39;src<span class="token operator">/</span>main<span class="token operator">/</span>resources<span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>docs&#39;<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//from 에 위치한 파일들은 into 로 복사하는 task</span></span>
<span class="line">task <span class="token function">createDocument</span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token class-name">Copy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">//asciidoctor 실행 후 실행됨</span></span>
<span class="line">	dependsOn asciidoctor</span>
<span class="line">	from <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;build/docs/asciidoc/&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	into <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;src/main/resources/static&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//생성된 문서를 jar 파일에 패키징하는 설정</span></span>
<span class="line">bootJar <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//createDocument 이후 실행됨</span></span>
<span class="line">	dependsOn createDocument</span>
<span class="line">    <span class="token comment">//3</span></span>
<span class="line">	from <span class="token punctuation">(</span><span class="token string">&quot;\${asciidoctor.outputDir}&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		into &#39;<span class="token keyword">static</span><span class="token operator">/</span>docs&#39;</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>.adoc 파일에서 다른 .adoc 파일을 include 하는 경우가 있습니다. 그 때 동일한 경로를 baseDir 로 설정하도록 합니다. gradle 6 에서는 자동으로 설정되었지만 gradle 7 부터 baseDir 을 각각 설정해야 한다고 합니다.</li><li>test 가 성공적으로 실행되어야만 asciidoctor 가 실행된다는 것을 명시한 코드입니다.</li><li>build 시 asciidoctor.outputDir 에 html 파일이 생깁니다. 해당 파일을 jar 안에 있는 /resources/static 폴더에 복사합니다.</li></ol><h2 id="예제-설정" tabindex="-1"><a class="header-anchor" href="#예제-설정"><span>예제 설정</span></a></h2><p>예제는 Member 를 만드는 Member, MemberRepository, MemberService, MemberController, Dto 와 Post 를 만드는 Post, PostRepository, PostService, PostController, Dto 가 있습니다. 원래 다 올리려고 했는데 너무 길어질 것 같아 깃허브로 대체하겠습니다. <a href="https://github.com/hobeen-kim/RestDocsEx" target="_blank" rel="noopener noreferrer">깃허브 이동</a></p><p>src &gt; main 디렉토리만 깃허브로 대체하겠습니다. 물론 restdocs 설정이나 gradle 도 있긴 합니다만 아래에서 설명하겠습니다.</p><p>혹시나 src &gt; main 그대로 따라하시는 분들은 h2 사용하셔야 합니다.</p><h2 id="mockmvc-를-이용한-테스트-코드-작성" tabindex="-1"><a class="header-anchor" href="#mockmvc-를-이용한-테스트-코드-작성"><span>MockMvc 를 이용한 테스트 코드 작성</span></a></h2><p><strong>Post</strong></p><p>이것도 주석으로 하나하나 달아보겠습니다. import 가 겹치는 게 많아 import 도 남겨놨습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>assertj<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Lists</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">BeforeEach</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">ExtendWith</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">MockBean</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span></span><span class="token class-name">RestDocumentationContextProvider</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span></span><span class="token class-name">RestDocumentationExtension</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span></span><span class="token class-name">SpringExtension</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MockMvc</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>setup<span class="token punctuation">.</span></span><span class="token class-name">MockMvcBuilders</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">WebApplicationContext</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">PostResponse</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">PostService</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">ArgumentMatchers</span><span class="token punctuation">.</span><span class="token static">any</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">ArgumentMatchers</span><span class="token punctuation">.</span><span class="token static">anyLong</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token static">when</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>mockmvc<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRestDocumentation</span><span class="token punctuation">.</span><span class="token static">document</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>mockmvc<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRestDocumentation</span><span class="token punctuation">.</span><span class="token static">documentationConfiguration</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>mockmvc<span class="token punctuation">.</span></span><span class="token class-name">RestDocumentationRequestBuilders</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>payload<span class="token punctuation">.</span></span><span class="token class-name">PayloadDocumentation</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestDocumentation</span><span class="token punctuation">.</span><span class="token static">parameterWithName</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestDocumentation</span><span class="token punctuation">.</span><span class="token static">pathParameters</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token static">status</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">RestDocumentationExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">PostControllerTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@BeforeEach</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span> webApplicationContext<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token class-name">RestDocumentationContextProvider</span> restDocumentation<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc <span class="token operator">=</span> <span class="token class-name">MockMvcBuilders</span><span class="token punctuation">.</span><span class="token function">webAppContextSetup</span><span class="token punctuation">(</span>webApplicationContext<span class="token punctuation">)</span></span>
<span class="line">            	<span class="token comment">//해당 설정을 통해 문서화를 할 수 있습니다.</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">documentationConfiguration</span><span class="token punctuation">(</span>restDocumentation<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MockBean</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">PostService</span> postService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">PostResponse</span> postResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostResponse</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">when</span><span class="token punctuation">(</span>postService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>postResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/posts&quot;</span><span class="token punctuation">)</span> <span class="token comment">//요청 방식을 선택합니다. </span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;title\\&quot;: \\&quot;title\\&quot;, \\n\\&quot;content\\&quot;: \\&quot;content\\&quot;}&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//보낼 데이터를 입력합니다.</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//contentType 을 설정합니다.</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//정상 동작 시 응답 상태코드입니다.</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token string">&quot;post-create&quot;</span><span class="token punctuation">,</span> <span class="token comment">//post-create 문서를 만듭니다.</span></span>
<span class="line">                        <span class="token function">requestFields</span><span class="token punctuation">(</span>  <span class="token comment">//requestFields 를 만들어줍니다.</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post 제목&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//문서에 설정될 필드와 설명을 설정합니다.</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post 내용&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//null 일수도 있으므로 optional() 로 설정합니다.</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PostResponse</span><span class="token punctuation">&gt;</span></span> postResponses <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">PostResponse</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;title1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">new</span> <span class="token class-name">PostResponse</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">&quot;title2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content2&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">when</span><span class="token punctuation">(</span>postService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>postResponses<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> expectedJson <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>postResponses<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/posts&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>expectedJson<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//api 호출 시 기대값을 설정합니다.</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token string">&quot;post-get-all&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">responseFields</span><span class="token punctuation">(</span> <span class="token comment">//responseFields 를 만들어줍니다.</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;[].id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//List 형식은 [].id 처럼 작성합니다.</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;[].title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post 제목&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;[].content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post 내용&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">PostResponse</span> postResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostResponse</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">when</span><span class="token punctuation">(</span>postService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token function">anyLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>postResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/posts/{postId}&quot;</span><span class="token punctuation">,</span> postResponse<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token string">&quot;post-get-one&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">pathParameters</span><span class="token punctuation">(</span> <span class="token comment">//pathVariable 을 받을 때 명시해줍니다.</span></span>
<span class="line">                                <span class="token function">parameterWithName</span><span class="token punctuation">(</span><span class="token string">&quot;postId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post Id&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">responseFields</span><span class="token punctuation">(</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post 제목&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post 내용&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/posts/{postId}&quot;</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;title\\&quot;: \\&quot;turtle\\&quot;, \\n\\&quot;content\\&quot;: \\&quot;context\\&quot;}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token string">&quot;post-update&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">pathParameters</span><span class="token punctuation">(</span></span>
<span class="line">                                <span class="token function">parameterWithName</span><span class="token punctuation">(</span><span class="token string">&quot;postId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post Id&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">requestFields</span><span class="token punctuation">(</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post 제목&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post 내용&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;/posts/{postId}&quot;</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token string">&quot;post-delete&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">pathParameters</span><span class="token punctuation">(</span></span>
<span class="line">                                <span class="token function">parameterWithName</span><span class="token punctuation">(</span><span class="token string">&quot;postId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post Id&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Member</strong></p><p>member 와 post 는 겹치니까 주석을 별도로 달지 않겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">RestDocumentationExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MemberControllerTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@BeforeEach</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span> webApplicationContext<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token class-name">RestDocumentationContextProvider</span> restDocumentation<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc <span class="token operator">=</span> <span class="token class-name">MockMvcBuilders</span><span class="token punctuation">.</span><span class="token function">webAppContextSetup</span><span class="token punctuation">(</span>webApplicationContext<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">documentationConfiguration</span><span class="token punctuation">(</span>restDocumentation<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MockBean</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">MemberService</span> memberService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">signUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">MemberResponse</span> memberResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberResponse</span><span class="token punctuation">(</span><span class="token string">&quot;memberName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">when</span><span class="token punctuation">(</span>memberService<span class="token punctuation">.</span><span class="token function">signUp</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>memberResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/members/signup&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;memberName\\&quot;: \\&quot;memberName\\&quot;, \\&quot;password\\&quot;: \\&quot;password\\&quot;, \\&quot;email\\&quot;: \\&quot;email@example.com\\&quot;}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Updated JSON payload</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token string">&quot;member-signup&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">requestFields</span><span class="token punctuation">(</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;memberName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Member memberName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Member password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Member email&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">MemberResponse</span> memberResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberResponse</span><span class="token punctuation">(</span><span class="token string">&quot;memberName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">when</span><span class="token punctuation">(</span>memberService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>memberResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/members/login&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;memberName\\&quot;: \\&quot;memberName\\&quot;, \\&quot;password\\&quot;: \\&quot;password\\&quot;}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Updated JSON payload</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token string">&quot;member-login&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">requestFields</span><span class="token punctuation">(</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;memberName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Member memberName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Member password&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;/members/{memberName}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;memberName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token string">&quot;member-delete&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">pathParameters</span><span class="token punctuation">(</span></span>
<span class="line">                                <span class="token function">parameterWithName</span><span class="token punctuation">(</span><span class="token string">&quot;memberName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;member memberName&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="문서화" tabindex="-1"><a class="header-anchor" href="#문서화"><span>문서화</span></a></h2><p><code>build</code> 를 하면 <code>build/generated-snippets</code> 에 다음과 같이 <code>.adoc</code> 파일이 생깁니다.</p><p><img src="`+d+`" alt="image-20230508191009728"></p><p>이제 이 파일들을 모아서 보여줄 수 있도록 문서화를 하겠습니다.</p><p>문서를 하기 위해선 src 디렉토리에 <code>docs/asciidoc</code> 디렉토리를 만들어야 합니다. 해당 디렉토리 하위에 만드는 <code>*.adoc</code> 파일이 <code>src/main/resources/static</code> 으로 문서화되어 이동합니다.</p><p><strong>src/docs/aciidoc/index.adoc</strong></p><p>모든 adoc 파일을 한번에 만들기 위해서 <code>index.adoc</code> 파일을 만들겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token operator">=</span> <span class="token class-name">Rest</span> <span class="token class-name">Docs</span> <span class="token class-name">Practice</span> <span class="token class-name">Application</span> <span class="token constant">API</span> <span class="token class-name">Document</span></span>
<span class="line"><span class="token operator">:</span>doctype<span class="token operator">:</span> book</span>
<span class="line"><span class="token operator">:</span>source<span class="token operator">-</span>highlighter<span class="token operator">:</span> highlightjs</span>
<span class="line"><span class="token operator">:</span>toc<span class="token operator">:</span> left</span>
<span class="line"><span class="token operator">:</span>toclevels<span class="token operator">:</span> <span class="token number">2</span></span>
<span class="line"><span class="token operator">:</span>sectlinks<span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">include<span class="token operator">::</span><span class="token function">member</span><span class="token punctuation">.</span>adoc<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">include<span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">.</span>adoc<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>=</code> 은 h1 과 같습니다. <code>==</code> 는 h2, <code>===</code> 는 h3 입니다.</p></li><li><p><code>:source-highlighter: highlightjs</code> : http 에 구분 색을 넣어줍니다. 가독성을 올려줍니다.</p></li><li><p><code>:toc: left</code> : 왼쪽에 메뉴와 같은 toc 를 만들어줍니다.</p></li><li><p><code>:toclevels: 2</code> : toc level 을 2로 설정합니다. 하위 2개 level 까지 나타냅니다.</p></li><li><p><code>:sectlinks:</code> 해당 API 의 제목을 클릭하면 해당 API 로 이동할 수 있게 합니다.</p></li><li><p><code>include::member.adoc[]</code> : 같은 디렉토리에 있는 <code>member.adoc</code> 파일을 포함해서 문서화를 합니다.</p><p><img src="`+m+'" alt="image-20230508191911011"></p><ul><li>이런 식으로 만들어질겁니다. (현재 단계에서는 아니며, 아래 단계를 따라 member.adoc, post.adoc 을 만들고 build 를 해야 합니다.)</li></ul></li><li><p>AsciiDoc 플러그인을 사용하면 <code>.adoc</code> 에서 다음과 같이 보여집니다.</p><p><img src="'+v+`" alt="image-20230508192100190"></p></li></ul><p><strong>member.adoc</strong></p><p>이제 <code>index.adoc</code> 에 들어갈 <code>member.adoc</code> 파일을 만들어보겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token operator">==</span> 멤버</span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">=</span> 회원가입</span>
<span class="line">operation<span class="token operator">::</span><span class="token function">member</span><span class="token operator">-</span>signup<span class="token punctuation">[</span>snippets<span class="token operator">=</span>&#39;http<span class="token operator">-</span>request<span class="token punctuation">,</span>http<span class="token operator">-</span>response&#39;<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">=</span> 로그인</span>
<span class="line">operation<span class="token operator">::</span><span class="token function">member</span><span class="token operator">-</span>login<span class="token punctuation">[</span>snippets<span class="token operator">=</span>&#39;http<span class="token operator">-</span>request<span class="token punctuation">,</span>http<span class="token operator">-</span>response&#39;<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">=</span> 멤버 삭제</span>
<span class="line">operation<span class="token operator">::</span><span class="token function">member</span><span class="token operator">-</span>delete<span class="token punctuation">[</span>snippets<span class="token operator">=</span>&#39;http<span class="token operator">-</span>request<span class="token punctuation">,</span>http<span class="token operator">-</span>response&#39;<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>operation::member-signup[snippets=&#39;http-request,http-response&#39;]</code> : <code>build/generated-snippet</code> 에서 <code>member-signup</code> 폴더의 <code>http-request</code>, <code>http-response</code> adoc 파일을 가져옵니다. 나머지도 똑같습니다.</li></ul><p><strong>post.adoc</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token operator">==</span> 게시글</span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">=</span> 게시글 전체 조회</span>
<span class="line">operation<span class="token operator">::</span><span class="token function">post</span><span class="token operator">-</span>get<span class="token operator">-</span>all<span class="token punctuation">[</span>snippets<span class="token operator">=</span>&#39;http<span class="token operator">-</span>request<span class="token punctuation">,</span>http<span class="token operator">-</span>response&#39;<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">=</span> 게시글 <span class="token number">1</span>개 조회</span>
<span class="line">operation<span class="token operator">::</span><span class="token function">post</span><span class="token operator">-</span>get<span class="token operator">-</span>one<span class="token punctuation">[</span>snippets<span class="token operator">=</span>&#39;http<span class="token operator">-</span>request<span class="token punctuation">,</span>http<span class="token operator">-</span>response&#39;<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">=</span> 게시글 등록</span>
<span class="line">operation<span class="token operator">::</span><span class="token function">post</span><span class="token operator">-</span>create<span class="token punctuation">[</span>snippets<span class="token operator">=</span>&#39;http<span class="token operator">-</span>request<span class="token punctuation">,</span>http<span class="token operator">-</span>response&#39;<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">=</span> 게시글 수정</span>
<span class="line">operation<span class="token operator">::</span><span class="token function">post</span><span class="token operator">-</span>update<span class="token punctuation">[</span>snippets<span class="token operator">=</span>&#39;http<span class="token operator">-</span>request<span class="token punctuation">,</span>http<span class="token operator">-</span>response&#39;<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">==</span><span class="token operator">=</span> 게시글 삭제</span>
<span class="line">operation<span class="token operator">::</span><span class="token function">post</span><span class="token operator">-</span>delete<span class="token punctuation">[</span>snippets<span class="token operator">=</span>&#39;http<span class="token operator">-</span>request<span class="token punctuation">,</span>http<span class="token operator">-</span>response&#39;<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>위 <code>member.adoc</code> 과 똑같습니다. 이렇게 만들어진 <code>.adoc</code> 파일이 <code>index.adoc</code> 에서 함께 보여집니다.</li></ul><h2 id="json-prettyprint" tabindex="-1"><a class="header-anchor" href="#json-prettyprint"><span>JSON prettyPrint</span></a></h2><h2 id="빌드" tabindex="-1"><a class="header-anchor" href="#빌드"><span>빌드</span></a></h2><p>이제 빌드를 해봅시다. <code>/gradlew build</code> 로 빌드를 하면 <code>main/resources/static</code> 에 index.html, member.html, post.html 문서가 생깁니다. 그 중 index.html 을 사용하면 됩니다.</p><p><img src="`+b+'" alt="image-20230508192714898"></p><h2 id="문서-커스텀-하기" tabindex="-1"><a class="header-anchor" href="#문서-커스텀-하기"><span>문서 커스텀 하기</span></a></h2><h3 id="prettyprint" tabindex="-1"><a class="header-anchor" href="#prettyprint"><span>prettyPrint</span></a></h3><p>지금 JSON 형식을 보시면 아래와 같이 한줄로 되어있습니다.</p><p><img src="'+g+`" alt="image-20230513130449680"></p><p>Test 에서 @BeforeEach 에 <code>.withResponseDefaults(prettyPrint())</code> 설정을 추가하여 보기 쉽도록 하겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@BeforeEach</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span> webApplicationContext<span class="token punctuation">,</span></span>
<span class="line">                  <span class="token class-name">RestDocumentationContextProvider</span> restDocumentation<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc <span class="token operator">=</span> <span class="token class-name">MockMvcBuilders</span><span class="token punctuation">.</span><span class="token function">webAppContextSetup</span><span class="token punctuation">(</span>webApplicationContext<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">documentationConfiguration</span><span class="token punctuation">(</span>restDocumentation<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">operationPreprocessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                   	<span class="token punctuation">.</span><span class="token function">withRequestDefaults</span><span class="token punctuation">(</span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">withResponseDefaults</span><span class="token punctuation">(</span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>설정을 추가하면 아래와 같이 됩니다.</p><p><img src="`+f+'" alt="image-20230513131622218"></p><h3 id="responsefield-넣기-커스텀" tabindex="-1"><a class="header-anchor" href="#responsefield-넣기-커스텀"><span>ResponseField 넣기, 커스텀</span></a></h3><p>각 요청 혹은 응답마다 필요한 field 의 이름, type, Desciption 이 있습니다. 이를 표로 만들어서 index 에 넣어주도록 하겠습니다. 다음과 같이 넣으면 오른쪽과 같이 보여집니다.</p><p><img src="'+h+`" alt="image-20230513132034403"></p><p>하지만 API 문서를 보면서 필요한 게 위 3가지만은 아니겠죠. Optional 여부, Constraints 같은 조건도 필요합니다. Optional 은 test 의 Field 에 <code>.optional</code> 로 설정되어있으므로 제약조건 설정해보겠습니다. 이를 위해 먼저 config 파일은 <code>RestDocsConfig.java</code> 파일을 test 폴더 내에 만들어 줍니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestConfiguration</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span>  <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>snippet<span class="token punctuation">.</span></span><span class="token class-name">Attributes</span><span class="token punctuation">.</span><span class="token class-name">Attribute</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestDocsConfig</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Attribute</span> <span class="token function">field</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span></span>
<span class="line">            <span class="token keyword">final</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Attribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>나중에 configuration 설정으로 쓰기 위해 이름을 <code>~Config</code> 라고 했습니다.</li></ul><p>이제 PostControllerTest 에서 <code>.attributes(field(&quot;constraints&quot;, &quot;길이 100 이하&quot;))</code> 를 붙이겠습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"> <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Change the postResponse object</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">PostResponse</span> postResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostResponse</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">when</span><span class="token punctuation">(</span>postService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>postResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/posts&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;title\\&quot;: \\&quot;title\\&quot;, \\n\\&quot;content\\&quot;: \\&quot;content\\&quot;}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Change the expected status code</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token string">&quot;post-create&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">requestFields</span><span class="token punctuation">(</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post 제목&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attributes</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;constraints&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;길이 100 이하&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Post 내용&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이까지 했다고 .adoc 파일의 테이블에 optional 이나 contraints 가 추가되는 건 아닙니다. 추가되는 형식을 바꿔줘야 하는데요. <code>src/test/resources/org/springframework/restdocs/templates</code> 경로에 <code>request-fields.snippet</code> 와 <code>response-fields.snippet</code> 파일을 추가하면 됩니다. 문법은 mustache 입니다. 두 형식이 똑같기 때문에 하나만 적을게요.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">|===</span>
<span class="line">|Path|Type|Description|Contraints|Optional</span>
<span class="line"></span>
<span class="line">{{#fields}}</span>
<span class="line">|{{#tableCellContent}}\`+{{path}}+\`{{/tableCellContent}}</span>
<span class="line">|{{#tableCellContent}}\`+{{type}}+\`{{/tableCellContent}}</span>
<span class="line">|{{#tableCellContent}}{{description}}{{/tableCellContent}}</span>
<span class="line">|{{#tableCellContent}}{{#constraints}}{{.}}{{/constraints}}{{/tableCellContent}}</span>
<span class="line">|{{#tableCellContent}}{{^optional}}No{{/optional}}{{#optional}}Yes{{/optional}}{{/tableCellContent}}</span>
<span class="line"></span>
<span class="line">{{/fields}}</span>
<span class="line">|===</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 이런 식으로 나옵니다.</p><p><img src="`+q+'" alt="image-20230513140731556"></p>',71)),a(l)])}const S=i(w,[["render",x],["__file","2023-05-10-SpringRestDocs1.html.vue"]]),D=JSON.parse('{"path":"/posts/spring/2023-05-10-SpringRestDocs1.html","title":"Spring RestDocs 를 활용한 RestfulAPI","lang":"en-US","frontmatter":{"title":"Spring RestDocs 를 활용한 RestfulAPI","date":"2023-05-10T00:00:00.000Z","tags":["spring","restDocs","restapi"],"description":"Spring RestDocs 로 문서 남기기"},"headers":[{"level":1,"title":"Spring REST Docs","slug":"spring-rest-docs","link":"#spring-rest-docs","children":[{"level":2,"title":"특징","slug":"특징","link":"#특징","children":[]},{"level":2,"title":"Swagger vs Spring REST Docs","slug":"swagger-vs-spring-rest-docs","link":"#swagger-vs-spring-rest-docs","children":[]}]},{"level":1,"title":"Spring REST Docs 사용","slug":"spring-rest-docs-사용","link":"#spring-rest-docs-사용","children":[{"level":2,"title":"gradle.build","slug":"gradle-build","link":"#gradle-build","children":[]},{"level":2,"title":"예제 설정","slug":"예제-설정","link":"#예제-설정","children":[]},{"level":2,"title":"MockMvc 를 이용한 테스트 코드 작성","slug":"mockmvc-를-이용한-테스트-코드-작성","link":"#mockmvc-를-이용한-테스트-코드-작성","children":[]},{"level":2,"title":"문서화","slug":"문서화","link":"#문서화","children":[]},{"level":2,"title":"JSON prettyPrint","slug":"json-prettyprint","link":"#json-prettyprint","children":[]},{"level":2,"title":"빌드","slug":"빌드","link":"#빌드","children":[]},{"level":2,"title":"문서 커스텀 하기","slug":"문서-커스텀-하기","link":"#문서-커스텀-하기","children":[{"level":3,"title":"prettyPrint","slug":"prettyprint","link":"#prettyprint","children":[]},{"level":3,"title":"ResponseField 넣기, 커스텀","slug":"responsefield-넣기-커스텀","link":"#responsefield-넣기-커스텀","children":[]}]}]}],"git":{},"filePathRelative":"_posts/spring/2023-05-10-SpringRestDocs1.md"}');export{S as comp,D as data};
