import{_ as i,c as p,a as n,b as r,d,f as a,r as o,o as k,e as l}from"./app-D9_gZhBA.js";const u="/images/2025-09-15-autoscaling/image-20250915232215825.png",h={},g={class:"table-of-contents"};function c(f,e){const s=o("Header"),t=o("router-link");return k(),p("div",null,[n(s),r("nav",g,[r("ul",null,[r("li",null,[n(t,{to:"#karpenter-란"},{default:a(()=>e[0]||(e[0]=[l("Karpenter 란?")])),_:1}),r("ul",null,[r("li",null,[n(t,{to:"#karpenter-동작원리"},{default:a(()=>e[1]||(e[1]=[l("karpenter 동작원리")])),_:1})]),r("li",null,[n(t,{to:"#karpenter-특징"},{default:a(()=>e[2]||(e[2]=[l("karpenter 특징")])),_:1})]),r("li",null,[n(t,{to:"#karpenter-를-선택한-이유"},{default:a(()=>e[3]||(e[3]=[l("karpenter 를 선택한 이유")])),_:1})])])]),r("li",null,[n(t,{to:"#설정-및-구성"},{default:a(()=>e[4]||(e[4]=[l("설정 및 구성")])),_:1}),r("ul",null,[r("li",null,[n(t,{to:"#hpa-구성"},{default:a(()=>e[5]||(e[5]=[l("HPA 구성")])),_:1})]),r("li",null,[n(t,{to:"#karpenter-설정-및-구성"},{default:a(()=>e[6]||(e[6]=[l("karpenter 설정 및 구성")])),_:1})])])]),r("li",null,[n(t,{to:"#ref"},{default:a(()=>e[7]||(e[7]=[l("Ref.")])),_:1})])])]),e[8]||(e[8]=d('<p>쿠버네티스 운영 환경의 두번째 단계는 오토스케일링 준비다. 이전에는 HPA + ASG 를 활용해서 오토스케일링을 구성했는데 이번에는 비용 효율적이고 속도가 빠른 Karpenter 를 활용해보려고 한다.</p><h1 id="karpenter-란" tabindex="-1"><a class="header-anchor" href="#karpenter-란"><span>Karpenter 란?</span></a></h1><p>Karpenter는 대기(Pending) 파드를 감지해 요구사항에 꼭 맞는 노드를 수십 초–수분 내 신속히 띄우고, 유휴 노드는 합리적으로 줄여 비용과 가용성을 동시에 최적화하는 노드 오토스케일러이다. 기존 Cluster Autoscaler(CA)가 ASG(노드 그룹) 중심으로 스케일링하는 반면, Karpenter는 파드 요구사항을 직접 읽어 가장 알맞은 인스턴스(타입/크기/구역/구매옵션)를 고른 뒤 EC2 Fleet API로 곧장 노드를 띄운다. 이 구조 덕분에 더 빠른 확장과 세밀한 인스턴스 선택이 가능하게 된다.</p><h2 id="karpenter-동작원리" tabindex="-1"><a class="header-anchor" href="#karpenter-동작원리"><span>karpenter 동작원리</span></a></h2><p><img src="'+u+'" alt="image-20250915232215825"></p><ol><li><strong>Horizontal Pod AutoScaler(HPA)</strong> 에 의한 Pod의 수평적 확장이 한계에 다다르면, Pod 는 적절한 Node 를 배정받지 못하고 pending 상태에 빠진다.</li><li>이때 <strong>Karpenter</strong> 는 지속해서 unscheduled Pod 를 관찰하고 있다가, 새로운 Node 추가를 결정하고 직접 배포한다.</li><li>추가된 Node가 Ready 상태가 되면 <strong>Karpenter</strong> 는 <strong>kube-scheduler</strong> 를 대신하여 pod 의 <strong>Node binding</strong> 요청도 수행한다.</li></ol><h2 id="karpenter-특징" tabindex="-1"><a class="header-anchor" href="#karpenter-특징"><span>karpenter 특징</span></a></h2><ol><li><strong>간단한 구성</strong></li></ol><ul><li><code>NodePool</code>(스케일 정책) + <code>EC2NodeClass</code>(AWS 세부설정) 두 개의 CRD 로 구성됨</li><li>ASG 중심의 복잡한 노드그룹 관리가 줄고, 선언형으로 일관되게 운용할 수 있음</li><li>서브넷/보안그룹은 태그 셀렉터로 자동 발견이 가능해 초기 세팅이 가벼움</li></ul><ol start="2"><li><strong>신속한 Node 추가/제거</strong></li></ol><ul><li>Pending 파드를 즉시 감지해 EC2 Fleet로 곧바로 노드를 띄워 초 단위~수분 단위로 확장됨</li><li>Spot 중단 신호(2분 전) 감지 시 자동 cordon/drain 후 보충까지 이어집니다.</li></ul><ol start="3"><li><strong>다양한 인스턴스 타입 적용</strong></li></ol><ul><li><code>requirements</code>로 인스턴스 카테고리/사이즈/아키텍처/가용영역/구매옵션(spot·on-demand)을 폭넓게 열어두면, Karpenter가 가격·용량 최적 조합을 찾는다.</li></ul><h2 id="karpenter-를-선택한-이유" tabindex="-1"><a class="header-anchor" href="#karpenter-를-선택한-이유"><span>karpenter 를 선택한 이유</span></a></h2><p>이전 회사에서 EKS 를 구성할 때 CPU 와 메모리가 특정 범위를 초과하면 ASG 가 노드를 추가하도록 구성했다. 하지만 노드가 추가되는 게 느렸고 적절한 트리거를 설정하는 것도 어려웠다. 또한 파드 하나를 띄우기 위해 큰 사이즈의 노드가 생성되는 것도 비용적으로 낭비라고 느껴졌다.</p><p>karpenter 는 이러한 점을 모두 커버할 수 있는 신속하고 비용 효율적인 선택이라고 생각되었다. 또한 여러 옵션의 조합을 manifest 파일로 관리할 수 있는 것도 좋았다. 반대로 ASG 는 인프라 레벨에서 조정해야 하는 부분이 번거로웠기도 했다.</p><h1 id="설정-및-구성" tabindex="-1"><a class="header-anchor" href="#설정-및-구성"><span>설정 및 구성</span></a></h1><h2 id="hpa-구성" tabindex="-1"><a class="header-anchor" href="#hpa-구성"><span>HPA 구성</span></a></h2><p>HPA 란~</p><h2 id="karpenter-설정-및-구성" tabindex="-1"><a class="header-anchor" href="#karpenter-설정-및-구성"><span>karpenter 설정 및 구성</span></a></h2><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>Ref.</span></a></h1><ul><li><a href="https://docs.aws.amazon.com/eks/latest/userguide/autoscaling.html" target="_blank" rel="noopener noreferrer">EKS User Guide</a></li><li><a href="https://karpenter.sh/docs/concepts/nodepools/" target="_blank" rel="noopener noreferrer">Karpenter v1 문서</a></li><li><a href="https://aws.amazon.com/blogs/containers/using-amazon-ec2-spot-instances-with-karpenter/" target="_blank" rel="noopener noreferrer">AWS 컨테이너 블로그</a></li><li><a href="https://aws.amazon.com/blogs/containers/optimizing-your-kubernetes-compute-costs-with-karpenter-consolidation/?utm_source=chatgpt.com" target="_blank" rel="noopener noreferrer">Consolidation 효과 및 실무 주의점</a></li><li><a href="https://devblog.kakaostyle.com/ko/2022-10-13-1-karpenter-on-eks/" target="_blank" rel="noopener noreferrer">EKS클러스터 Karpenter 적용기</a></li></ul>',22))])}const b=i(h,[["render",c],["__file","2025-09-15-autoscaling.html.vue"]]),_=JSON.parse('{"path":"/posts/infra/2025-09-15-autoscaling.html","title":"쿠버네티스 운영 환경 준비 하기 - 2. karpenter","lang":"en-US","frontmatter":{"title":"쿠버네티스 운영 환경 준비 하기 - 2. karpenter","date":"2025-09-15T00:00:00.000Z","tags":["kubenetes","karpenter"],"description":"오토스케일링을 위한 karpenter 설정"},"headers":[{"level":1,"title":"Karpenter 란?","slug":"karpenter-란","link":"#karpenter-란","children":[{"level":2,"title":"karpenter 동작원리","slug":"karpenter-동작원리","link":"#karpenter-동작원리","children":[]},{"level":2,"title":"karpenter 특징","slug":"karpenter-특징","link":"#karpenter-특징","children":[]},{"level":2,"title":"karpenter 를 선택한 이유","slug":"karpenter-를-선택한-이유","link":"#karpenter-를-선택한-이유","children":[]}]},{"level":1,"title":"설정 및 구성","slug":"설정-및-구성","link":"#설정-및-구성","children":[{"level":2,"title":"HPA 구성","slug":"hpa-구성","link":"#hpa-구성","children":[]},{"level":2,"title":"karpenter 설정 및 구성","slug":"karpenter-설정-및-구성","link":"#karpenter-설정-및-구성","children":[]}]},{"level":1,"title":"Ref.","slug":"ref","link":"#ref","children":[]}],"git":{},"filePathRelative":"_posts/infra/2025-09-15-autoscaling.md"}');export{b as comp,_ as data};
