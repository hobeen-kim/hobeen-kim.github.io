import{_ as d,c as i,a,b as s,d as c,e as r,r as n,o as m,f as o}from"./app-BayAt2dZ.js";const f="/images/2025-03-20-aws/image-20250320202003522.png",u={},h={class:"table-of-contents"};function w(g,e){const l=n("Header"),t=n("router-link"),p=n("Footer");return m(),i("div",null,[a(l),s("nav",h,[s("ul",null,[s("li",null,[a(t,{to:"#서버리스-기반-아키텍처"},{default:r(()=>e[0]||(e[0]=[o("서버리스 기반 아키텍처")])),_:1})]),s("li",null,[a(t,{to:"#serverless-framework"},{default:r(()=>e[1]||(e[1]=[o("serverless framework")])),_:1})]),s("li",null,[a(t,{to:"#서버리스로-요구사항-해결하기"},{default:r(()=>e[2]||(e[2]=[o("서버리스로 요구사항 해결하기")])),_:1})]),s("li",null,[a(t,{to:"#기타"},{default:r(()=>e[3]||(e[3]=[o("기타")])),_:1})])])]),e[4]||(e[4]=c('<h1 id="서버리스-기반-아키텍처" tabindex="-1"><a class="header-anchor" href="#서버리스-기반-아키텍처"><span>서버리스 기반 아키텍처</span></a></h1><p>웹사이트는 s3 와 cloudfront로, 서버는 람다 + API gateway (채팅 조회/입력, 유저 목록 추가/삭제), 데이터베이스는 dynamoDB 를 사용한다. 특이한 점은 api gateway 로 웹소켓을 구현했다는 점이다. 나는 웹소켓이 있는 걸 알았지만 제대로 구현하는 방법을 몰라서 그 부분은 유익했다.</p><p><strong>API Gateway WebSocket</strong></p><p>API Gateway 타입에서 websocket 을 선택하면 된다. 웹소켓을 연결하면 각 주체에 대해 ConnectionID 를 부여해서 해당 아이디로 사용자를 구분을 한다.</p><p>만약 서버가 A 라는 ConnectionID 로 메시지를 pub 하고 싶으면 람다에서 해당 ConnectionID 를 DB 에서 불러와 값을 넣어줘야 한다. 전체에 보내는 기능은 없기 때문에 순회하면서 보내야 한다. 하지만 그럭저럭 빠르다.</p><p><strong>dynamoDB</strong></p><p>dynamoDB 는 connection limit 이 없다. 따라서 갑자기 사용자가 폭증해서 람다 동시성이 증가해도 dynamoDB 는 안정적으로 서빙할 수 있다.</p><h1 id="serverless-framework" tabindex="-1"><a class="header-anchor" href="#serverless-framework"><span>serverless framework</span></a></h1><p>서버리스 아키텍처를 배포하는 IaC 이다. 발표자는 예전에 SAM 이 별로라서 serverless framework 를 쓴다고 한다(...!) 커스텀도 가능하다고 한다. 핸즈온 실습이라 딱히 적을 건 없는데 SAM 이랑 비슷한 느낌이다.</p><p>소스코드를 받아서 <code>yarn</code>, <code>yarn deploy</code> 명령어 2개로 서버 배포가 완료되었다. 30초 정도 걸렸던 것 같다.</p><p><code> yarn deploy -f chat_put</code> 명령어로 특정 람다만 업데이트 가능하다. 그러면 서버 배포가 10초 이내로 끝난다.</p><p><strong>배포 테스트 화면</strong></p><p><img src="'+f+'" alt="image-20250320202003522"></p><h1 id="서버리스로-요구사항-해결하기" tabindex="-1"><a class="header-anchor" href="#서버리스로-요구사항-해결하기"><span>서버리스로 요구사항 해결하기</span></a></h1><p><code>서버리스 비용 많이 들지 않나요?</code>, <code>확장성은 코드로도(or 이런 소프트웨어로도) 해결할 수 있지 않나요?</code> 와 같은 질문을 받는다고 한다. 확장성, 탄력성 등과 같은 비기능적 요구사항을 해결하는 방법은 여러가지인데 이중 서버리스는 &#39;서비스&#39;로 해결하는 관점이다. aws 의 웰메이드 서비스를 사용한다면 코드나 복잡한 구성없이(가령 db 디커플링이라든지) 문제를 해결할 수 있다.</p><p>따라서 어떤 관점에서 문제를 해결하냐의 차이인 것 뿐이지, 굳이 이러이러한 해결책이 있는데 서버리스를 왜 사용하느냐? 와 같은 단순한 비교는 불가능하다.</p><h1 id="기타" tabindex="-1"><a class="header-anchor" href="#기타"><span>기타</span></a></h1><p>서버리스 모임은 밥을 안준다. 배고파서 더 이상 못갈 것 같다.</p><p>추가) 근데 스타벅스 기프티콘 받아서 가야할 것 같다.</p>',19)),a(p)])}const v=d(u,[["render",w],["__file","2025-03-20-aws.html.vue"]]),k=JSON.parse('{"path":"/posts/conference/2025-03-20-aws.html","title":"[AWSKRUG] AWS Serverless Meetup (센터필드)","lang":"en-US","frontmatter":{"title":"[AWSKRUG] AWS Serverless Meetup (센터필드)","date":"2025-03-20T00:00:00.000Z","tags":["aws","lambda","api_gateway"],"description":"AWSKRUG 서버리스 모임(서버리스 채팅 서비스 핸즈온)"},"headers":[{"level":1,"title":"서버리스 기반 아키텍처","slug":"서버리스-기반-아키텍처","link":"#서버리스-기반-아키텍처","children":[]},{"level":1,"title":"serverless framework","slug":"serverless-framework","link":"#serverless-framework","children":[]},{"level":1,"title":"서버리스로 요구사항 해결하기","slug":"서버리스로-요구사항-해결하기","link":"#서버리스로-요구사항-해결하기","children":[]},{"level":1,"title":"기타","slug":"기타","link":"#기타","children":[]}],"git":{},"filePathRelative":"_posts/conference/2025-03-20-aws.md"}');export{v as comp,k as data};
