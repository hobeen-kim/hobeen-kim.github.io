import{_ as c,c as r,a,b as s,d as u,f as p,r as t,o as d,e as l}from"./app-BitF5Zgk.js";const k="/images/2025-09-29-loadtest/image-20250929231833005.png",m="/images/2025-09-29-loadtest/image-20251001140342979.png",v="/images/2025-09-29-loadtest/image-20250929232801290.png",g="/images/2025-09-29-loadtest/image0.png",b="/images/2025-09-29-loadtest/iamge1.png",y="/images/2025-09-29-loadtest/image-20250929234806583.png",h="/images/2025-09-29-loadtest/image-20250929234820210.png",_="/images/2025-09-29-loadtest/image-20250929235231715.png",f="/images/2025-09-29-loadtest/image2.png",w="/images/2025-09-29-loadtest/image-20250930002413940.png",x="/images/2025-09-29-loadtest/image3.png",E="/images/2025-09-29-loadtest/image-20250930003649983.png",A="/images/2025-09-29-loadtest/image-20250930003743155.png",P={},R={class:"table-of-contents"};function I(S,n){const i=t("Header"),e=t("router-link"),o=t("Footer");return d(),r("div",null,[a(i),s("nav",R,[s("ul",null,[s("li",null,[a(e,{to:"#_1-부하테스트-준비"},{default:p(()=>n[0]||(n[0]=[l("1. 부하테스트 준비")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_1-1-부하테스트-툴"},{default:p(()=>n[1]||(n[1]=[l("1.1 부하테스트 툴")])),_:1})]),s("li",null,[a(e,{to:"#_1-2-k6-와-influxdb-grafana"},{default:p(()=>n[2]||(n[2]=[l("1.2 k6 와 influxDB, grafana")])),_:1})]),s("li",null,[a(e,{to:"#_1-3-주의사항"},{default:p(()=>n[3]||(n[3]=[l("1.3 주의사항")])),_:1})]),s("li",null,[a(e,{to:"#_1-4-tempo-모니터링-툴-추가"},{default:p(()=>n[4]||(n[4]=[l("1.4 tempo 모니터링 툴 추가")])),_:1})])])]),s("li",null,[a(e,{to:"#_2-부하테스트-결과-분석-및-개선"},{default:p(()=>n[5]||(n[5]=[l("2. 부하테스트 결과 분석 및 개선")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_2-2-테스트-수행"},{default:p(()=>n[6]||(n[6]=[l("2.2 테스트 수행")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_2-2-1-시나리오"},{default:p(()=>n[7]||(n[7]=[l("2.2.1 시나리오")])),_:1})]),s("li",null,[a(e,{to:"#_2-2-2-첫번째-테스트"},{default:p(()=>n[8]||(n[8]=[l("2.2.2 첫번째 테스트")])),_:1})]),s("li",null,[a(e,{to:"#_2-2-3-첫번째-개선-projection-활용"},{default:p(()=>n[9]||(n[9]=[l("2.2.3 첫번째 개선: Projection 활용")])),_:1})]),s("li",null,[a(e,{to:"#_2-2-4-두번째-테스트"},{default:p(()=>n[10]||(n[10]=[l("2.2.4 두번째 테스트")])),_:1})]),s("li",null,[a(e,{to:"#_2-2-5-두번째-개선-materialized-view-테이블-활용"},{default:p(()=>n[11]||(n[11]=[l("2.2.5 두번째 개선: MATERIALIZED VIEW 테이블 활용")])),_:1})]),s("li",null,[a(e,{to:"#_2-2-6-세번째-테스트"},{default:p(()=>n[12]||(n[12]=[l("2.2.6 세번째 테스트")])),_:1})])])])])]),s("li",null,[a(e,{to:"#마치며"},{default:p(()=>n[13]||(n[13]=[l("마치며")])),_:1})])])]),n[14]||(n[14]=u('<p>쿠버네티스 운영 환경의 마지막 단계는 부하테스트다. k6 test, grafana 를 활용해 부하테스트를 시각화하고 병목 구간을 식별해 RED 지표를 개선해보자.</p><h1 id="_1-부하테스트-준비" tabindex="-1"><a class="header-anchor" href="#_1-부하테스트-준비"><span>1. 부하테스트 준비</span></a></h1><h2 id="_1-1-부하테스트-툴" tabindex="-1"><a class="header-anchor" href="#_1-1-부하테스트-툴"><span>1.1 부하테스트 툴</span></a></h2><p>부하테스트 툴은 k6 를 선택했다. k6 는 스크립트 방식이라 가벼울 뿐더러 코드 기반이라 깃으로 관리도 쉽기 때문이다. 반면 비교 대상이었던 jmeter 는 1스레드 = 1Vuser 이고 코드로 관리하기가 쉽지 않다. 물론 k6 에 비해 jmeter 에서 추가적으로 지원하는 기능이 있지만 동기식 HTTP API 호출만 필요했기 때문에 간단한 k6 를 선택했다.</p><h2 id="_1-2-k6-와-influxdb-grafana" tabindex="-1"><a class="header-anchor" href="#_1-2-k6-와-influxdb-grafana"><span>1.2 k6 와 influxDB, grafana</span></a></h2><p>k6 에는 지표를 시각화하는 대시보드가 없기 때문에 (사실 있는데 쓸모없다.) 아래와 같이 grafana 와 연동해서 볼 수 있다.</p><p><img src="'+k+`" alt="image-20250929231833005"></p><p>이를 위해서 아래와 같이 docker-compose.yaml 을 구성해볼 수 있다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">tempo</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> grafana/tempo<span class="token punctuation">:</span>2.8.0</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> tempo</span>
<span class="line">    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;-config.file=/etc/tempo.yaml&quot;</span> <span class="token punctuation">]</span></span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> ./tempo/tempo.yaml<span class="token punctuation">:</span>/etc/tempo.yaml</span>
<span class="line">      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/tmp/tempo</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;4317:4317&quot;</span>     <span class="token comment"># otlp grpc</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;4318:4318&quot;</span>     <span class="token comment"># otlp http</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;3200:3200&quot;</span>     <span class="token comment"># tempo query</span></span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">grafana</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> grafana/grafana<span class="token punctuation">:</span>latest</span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> grafana</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;3000:3000&quot;</span></span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> GF_AUTH_ANONYMOUS_ENABLED=true</span>
<span class="line">      <span class="token punctuation">-</span> GF_AUTH_ANONYMOUS_ORG_ROLE=Admin</span>
<span class="line">      <span class="token punctuation">-</span> GF_AUTH_BASIC_ENABLED=false</span>
<span class="line">    <span class="token key atrule">volumes</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> ./grafana/provisioning<span class="token punctuation">:</span>/etc/grafana/provisioning</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 tempo 와 grafana 설정을 넣는다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token comment"># grafana/provisioning/datasources.datasource.yaml</span></span>
<span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">datasources</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Tempo</span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> tempo</span>
<span class="line">    <span class="token key atrule">uid</span><span class="token punctuation">:</span> tempo</span>
<span class="line">    <span class="token key atrule">access</span><span class="token punctuation">:</span> proxy</span>
<span class="line">    <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//tempo<span class="token punctuation">:</span><span class="token number">3200</span>       <span class="token comment"># Tempo 서버 주소</span></span>
<span class="line">    <span class="token key atrule">isDefault</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span>
<span class="line">    <span class="token key atrule">jsonData</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">httpMethod</span><span class="token punctuation">:</span> GET</span>
<span class="line">      </span>
<span class="line"><span class="token comment"># tempo/tempo.yaml</span></span>
<span class="line"><span class="token key atrule">storage</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">trace</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">backend</span><span class="token punctuation">:</span> s3                <span class="token comment"># trace 저장소를 s3로 변경</span></span>
<span class="line">    <span class="token key atrule">s3</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">bucket</span><span class="token punctuation">:</span> agmo<span class="token punctuation">-</span>observability<span class="token punctuation">-</span>backend   <span class="token comment"># S3 버킷 이름</span></span>
<span class="line">      <span class="token key atrule">prefix</span><span class="token punctuation">:</span> tempo/</span>
<span class="line">      <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> s3.amazonaws.com</span>
<span class="line">      <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>northeast<span class="token punctuation">-</span><span class="token number">2</span>    <span class="token comment"># AWS 리전</span></span>
<span class="line">    <span class="token key atrule">wal</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/tempo/wal      <span class="token comment"># Ingester의 write-ahead log (임시 저장 경로, 재시작시 안전하게 flush)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">http_listen_port</span><span class="token punctuation">:</span> <span class="token number">3200</span>        <span class="token comment"># Tempo HTTP API 포트 (ex: /metrics, /ready 등)</span></span>
<span class="line">  <span class="token key atrule">grpc_listen_port</span><span class="token punctuation">:</span> <span class="token number">9095</span>        <span class="token comment"># gRPC 포트 (querier, ingester 등 내부 컴포넌트 통신용)</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">distributor</span><span class="token punctuation">:</span>                    <span class="token comment"># span을 수신해서 적절한 ingester로 전달</span></span>
<span class="line">  <span class="token key atrule">receivers</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">otlp</span><span class="token punctuation">:</span>                       <span class="token comment"># OpenTelemetry Protocol (OTLP) 수신 설정</span></span>
<span class="line">      <span class="token key atrule">protocols</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">grpc</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> 0.0.0.0<span class="token punctuation">:</span><span class="token number">4317</span> <span class="token comment"># gRPC OTLP endpoint (Collector, SDK에서 push할 때 사용)</span></span>
<span class="line">        <span class="token key atrule">http</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> 0.0.0.0<span class="token punctuation">:</span><span class="token number">4318</span> <span class="token comment"># HTTP OTLP endpoint</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">ingester</span><span class="token punctuation">:</span>                       <span class="token comment"># trace 데이터를 메모리에 저장 후 backend(local/S3 등)로 flush</span></span>
<span class="line">  <span class="token key atrule">lifecycler</span><span class="token punctuation">:</span>                   <span class="token comment"># ingester의 등록/종료 및 ring 관리</span></span>
<span class="line">    <span class="token key atrule">ring</span><span class="token punctuation">:</span>                       <span class="token comment"># 멀티노드 시 데이터 분산/복제를 위한 구조 (단일노드면 의미 거의 없음)</span></span>
<span class="line">      <span class="token key atrule">kvstore</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">store</span><span class="token punctuation">:</span> memberlist       <span class="token comment"># ring metadata 저장소로 memberlist 사용 (별도 etcd/consul 불필요)</span></span>
<span class="line">  <span class="token key atrule">flush_all_on_shutdown</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 종료 시 메모리에 남은 trace를 전부 backend로 flush</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">memberlist</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">join_members</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token comment"># memberlist 클러스터에 참여할 peer 주소 (단일 노드라 비워둠)</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">compactor</span><span class="token punctuation">:</span>                      <span class="token comment"># 오래된 trace block들을 compact하고 retention 관리</span></span>
<span class="line">  <span class="token key atrule">compaction</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">block_retention</span><span class="token punctuation">:</span> 48h        <span class="token comment"># trace block을 48시간 보관</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">querier</span><span class="token punctuation">:</span>                        <span class="token comment"># trace 쿼리 실행 컴포넌트</span></span>
<span class="line">  <span class="token key atrule">frontend_worker</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">frontend_address</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">9095</span> <span class="token comment"># 쿼리 프론트엔드 주소 (여기서는 동일 노드 내 gRPC)</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">metrics_generator</span><span class="token punctuation">:</span>              <span class="token comment"># span 데이터를 바탕으로 Prometheus metrics 생성</span></span>
<span class="line">  <span class="token key atrule">processor</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">span_metrics</span><span class="token punctuation">:</span>               <span class="token comment"># (오타: span_metrics) Span 단위로 metric 생성하는 processor 설정</span></span>
<span class="line">      <span class="token key atrule">intrinsic_dimensions</span><span class="token punctuation">:</span>     <span class="token comment"># 기본 dimension(라벨) 지정</span></span>
<span class="line">        <span class="token key atrule">service</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>           <span class="token comment"># 서비스 이름 라벨 추가</span></span>
<span class="line">        <span class="token key atrule">span_name</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>         <span class="token comment"># span 이름 라벨 추가</span></span>
<span class="line">        <span class="token key atrule">span_kind</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>         <span class="token comment"># client/server/producer/consumer 구분 라벨 추가</span></span>
<span class="line">        <span class="token key atrule">status_code</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token comment"># 성공/에러 상태 코드 라벨 추가</span></span>
<span class="line">  <span class="token key atrule">registry</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">external_labels</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">source</span><span class="token punctuation">:</span> tempo             <span class="token comment"># 생성된 metrics에 붙일 external label</span></span>
<span class="line">  <span class="token key atrule">storage</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/tempo/generator  <span class="token comment"># metrics generator가 임시 데이터 저장할 로컬 경로</span></span>
<span class="line">  <span class="token key atrule">ring</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">kvstore</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">store</span><span class="token punctuation">:</span> memberlist         <span class="token comment"># 멀티노드 시 metrics generator 간 작업 분산용 ring (단일노드면 의미 없음)</span></span>
<span class="line"></span>
<span class="line">  <span class="token key atrule">traces_storage</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">&quot;/tmp/tempo/generator/traces&quot;</span> <span class="token comment"># metrics generator가 처리 중인 trace 임시 저장 경로</span></span>
<span class="line"></span>
<span class="line"><span class="token key atrule">overrides</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">metrics_generator_processors</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>service<span class="token punctuation">-</span>graphs<span class="token punctuation">,</span> span<span class="token punctuation">-</span>metrics<span class="token punctuation">,</span> local<span class="token punctuation">-</span>blocks<span class="token punctuation">]</span></span>
<span class="line">  <span class="token comment"># metrics-generator에서 활성화할 processor 목록</span></span>
<span class="line">  <span class="token comment"># service-graphs : 서비스 간 호출 관계 파악</span></span>
<span class="line">  <span class="token comment"># span-metrics   : span 기반 메트릭 생성 (예: 요청 수, 지연시간)</span></span>
<span class="line">  <span class="token comment"># local-blocks   : local block processor (단일노드에서 필요)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-주의사항" tabindex="-1"><a class="header-anchor" href="#_1-3-주의사항"><span>1.3 주의사항</span></a></h2><ul><li>K6 테스트가 경량이지만 그럼에도 대량의 부하 테스트는 리소스가 많이 소모된다. 또한 influxDB 도 메모리와 디스크가 많이 필요하다. 따라서 회사 서버에 구성하는 것이 제일 좋고 여의치 않다면 로컬 머신(개인 노트북)에 구성하는 것이 리소스를 줄일 수 있다.</li><li>k6 테스트에서 &quot;같은 시간&quot;에 &quot;같은 API&quot; 로 보내는 요청은 influxDB 에서 하나의 데이터로 취급된다. 따라서 동시에 같은 요청을 보내면 influxDB 는 1개로 취급된다. 이를 피하기 위해선 타임스탬프가 달라야 하는데 대량으로 테스트하다보면 초단위에서 소수점 6자리까지 같아지는 경우가 있다. 이러면 다른 요청이라도 influxDB 는 1개로 취급되는데, 이를 예방하기 위해 각 요청의 Tag 값으로 __VU (vuser 고유값)을 넣을 수 있다. 대신 이렇게 하면 카디널리티가 증가해 influxDB 의 크기가 커지거나 심지어 카디널리티 제한(백만개)에 걸릴 수 있다. 하지만 테스트 결과를 계속 저장할 것도 아니니 테스트 종료 후 적절히 삭제해주면 된다.</li></ul><h2 id="_1-4-tempo-모니터링-툴-추가" tabindex="-1"><a class="header-anchor" href="#_1-4-tempo-모니터링-툴-추가"><span>1.4 tempo 모니터링 툴 추가</span></a></h2><p>현재 사용 중인 모니터링 툴은 Prometheus (노드 및 파드 매트릭), Actuator (JVM 및 커넥션 관리), Loki (로그 관리), Pyroscope (cpu 및 메모리 상세 분석), Grafana 를 사용하고 있다.</p><p>그리고 span 분석을 위해 grafana 의 Tempo 를 추가했다. response time 이 느릴 때 데이터베이스의 응답이 늦는건지, 외부 서버의 응답이 늦는건지 혹은 테스트 대상 자체가 늦는건지 쉽게 확인하기 위해서다. 아래와 같은 데이터를 보여준다.</p><p><img src="`+m+'" alt="image-20251001140342979"></p><blockquote><p>tempo 로 span 데이터를 보내기 위해 opentelemetry 를 설정하는 것도 CPU 와 memory 를 소모하기 때문에 무조건 붙이는 건 좋지 않다.</p></blockquote><h1 id="_2-부하테스트-결과-분석-및-개선" tabindex="-1"><a class="header-anchor" href="#_2-부하테스트-결과-분석-및-개선"><span>2. 부하테스트 결과 분석 및 개선</span></a></h1><p>부하테스트가 원하는 RPS (또는 TPS)가 나오지 않는다면 병목을 찾고 개선해야 한다. 우선 현재 시스템 구성을 개략적으로 보면 다음과 같다.</p><p><img src="'+v+'" alt="image-20250929232801290"></p><p>여기서 병목 현상이 일어날 부분은 크게 4가지이다.</p><ol><li>네트워크 레벨 <ul><li>테스트 대상 서버에 대한 네트워크 대역폭 부족 (로드밸런서 리소스 포함)</li></ul></li><li>테스트 대상</li><li>데이터 베이스</li><li>외부 서버</li></ol><p>미리 설명하자면, 비즈니스 로직이 복잡할 게 없기 때문에 주로 데이터베이스에서 병목 현상이 발생했다.</p><p><strong>테스트 환경</strong></p><p>현재 리소스는 다음과 같다.</p><ul><li>m6g.xlarge : 4 vCPU 16GiB memory <ul><li>리소스가 많지만 모니터링 파드가 많이 띄워져있어 실제로 사용할 수 있는 <strong>cpu 는 2개, memory 는 9GiB</strong> 다.</li></ul></li><li>db.r6g.large : <strong>2 vCPU, 16GiB memory</strong></li></ul><h2 id="_2-2-테스트-수행" tabindex="-1"><a class="header-anchor" href="#_2-2-테스트-수행"><span>2.2 테스트 수행</span></a></h2><p>테스트는 목적으로 분류하면 개별 테스트(개별 API 에 대한 호출)와 통합 테스트(유저 플로우 순서대로 API 호출)로 이루어졌다. 그리고 각각은 로드 테스트와 스트레스 테스트, 브레이크 포인트 테스트가 이루어졌다. 이중 <strong>개별테스트에 대한 10분 간의 로드 테스트</strong>를 예시로 분석해보겠다.</p><h3 id="_2-2-1-시나리오" tabindex="-1"><a class="header-anchor" href="#_2-2-1-시나리오"><span>2.2.1 시나리오</span></a></h3><ul><li>호출 API <ul><li>앱 첫 페이지 조회 (<code>GET: /apps/first-page</code>)</li><li>카테고리별 첫페이지 조회 (<code>GET: /apps/first-page/{category}</code>)</li></ul></li><li>방법 <ul><li>RPS(초당 요청 수)를 점진적으로 증가 후 유지</li><li>테스트 시간 : 10분</li><li>CPU / 메모리 / DB 부하 지표와 RED 기록</li></ul></li><li>성공 기준 <ul><li>p95 응답속도 ≤ 800ms</li><li>에러율 0%</li></ul></li></ul><h3 id="_2-2-2-첫번째-테스트" tabindex="-1"><a class="header-anchor" href="#_2-2-2-첫번째-테스트"><span>2.2.2 첫번째 테스트</span></a></h3><h4 id="조건" tabindex="-1"><a class="header-anchor" href="#조건"><span><strong>조건</strong></span></a></h4><ul><li>duration : 10분, <strong>100 rps</strong></li></ul><h4 id="결과" tabindex="-1"><a class="header-anchor" href="#결과"><span><strong>결과</strong></span></a></h4><p><strong>응답시간</strong></p><p><img src="'+g+'" alt="Screenshot 2025-09-29 at 11.43.39 PM"></p><ul><li>p95 를 기준으로 응답 시간이 <strong>1s ~ 1.7s</strong> 로 많이 늦다는 걸 알 수 있다.</li></ul><p><strong>CPU, Memory</strong></p><p><img src="'+b+'" alt="Screenshot 2025-09-29 at 11.45.49 PM"></p><ul><li>CPU 는 평균적으로 0.2 ~ 0.25 코어정도 사용한다.(1코어 limit)</li><li>메모리도 500 ~ 600MiB 에서 큰 변화가 없다.</li></ul><p><strong>Database</strong></p><p><img src="'+y+'" alt="image-20250929234806583"></p><p><img src="'+h+'" alt="image-20250929234820210"></p><ul><li>데이터베이스 지표는 많이 튀는데, CPU 의 78% 를 사용했다.</li><li>일부 쿼리가 Database 의 리소스를 많이 사용하고 있다. 해당 쿼리를 개선해야 한다.</li></ul><h3 id="_2-2-3-첫번째-개선-projection-활용" tabindex="-1"><a class="header-anchor" href="#_2-2-3-첫번째-개선-projection-활용"><span>2.2.3 첫번째 개선: Projection 활용</span></a></h3><p><img src="'+_+`" alt="image-20250929235231715"></p><p>리소스를 많이 소모하는 쿼리 중 하나는 다음과 같은 테이블로 구성되고 join 된다. (이 쿼리 외에도 리소스 소모가 큰 쿼리가 1개 더 있다.)</p><ul><li><strong>App</strong> : app 정보를 가지고 있다. 메인 테이블이다.</li><li><strong>Review</strong> : app 에 대한 별점 정보를 가지고 있다. 별점순으로 정렬할 때 필요하다. 리뷰가 없는 앱도 있기 때문에 left join 이 필요하다.</li><li><strong>Category</strong> : app 카테고리 정보를 가지고 있다. 카테고리별로 검색할 때 필요하다.</li></ul><p><strong>카테고리별로 필터링된 앱의 별점순으로 조회</strong>하는 쿼리는 <u>2번 호출</u>된다.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> app<span class="token punctuation">.</span>app_id<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>review<span class="token punctuation">.</span>rating<span class="token punctuation">)</span> <span class="token keyword">as</span> rating</span>
<span class="line"><span class="token keyword">from</span> app</span>
<span class="line"><span class="token keyword">join</span> category <span class="token keyword">on</span> app<span class="token punctuation">.</span>category_id <span class="token operator">=</span> category<span class="token punctuation">.</span>category_id</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> review <span class="token keyword">on</span> app<span class="token punctuation">.</span>app_id <span class="token operator">=</span> review<span class="token punctuation">.</span>app_id</span>
<span class="line"><span class="token keyword">where</span> category<span class="token punctuation">.</span>category_code <span class="token operator">=</span> :category_code</span>
<span class="line">  <span class="token operator">and</span> app<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;RELEASED&#39;</span></span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> app<span class="token punctuation">.</span>app_id</span>
<span class="line"><span class="token keyword">order</span> <span class="token keyword">by</span> rating <span class="token keyword">desc</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>released_at <span class="token keyword">desc</span></span>
<span class="line"><span class="token keyword">limit</span> ? <span class="token keyword">offset</span> ?<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>첫번째 호출에서는 rating 으로 정렬된 app_id 목록을 찾는다.</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> app<span class="token punctuation">.</span><span class="token operator">*</span></span>
<span class="line"><span class="token keyword">from</span> app</span>
<span class="line"><span class="token keyword">where</span> app_id <span class="token operator">in</span> <span class="token punctuation">(</span>?<span class="token punctuation">,</span> ?<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>두번째 호출에서는 첫번째 호출로 찾은 app_id 목록으로 where in 검색을 한다.</strong> 이렇게 하는 이유는 <u>lazy loading 이나 매핑 등의 JPA 기능을 사용하기 위해 App 객체를 영속성 컨텍스트에 넣어서 관리하려고 했기 때문</u>이다. API 의 Response 객체에서 category 정보를 넣기 위해서도 lazy loading 이 필요했다.</p><p>하지만 위 쿼리문에서 필요없는 필드들도 있고, 불필요한 조인도 보였기 때문에 Projection 을 사용하면서 개선하고자 생각을 했다.</p><h4 id="projection-사용" tabindex="-1"><a class="header-anchor" href="#projection-사용"><span>Projection 사용</span></a></h4><p>해당 쿼리의 결과는 List 형태의 Reponse 로 반환되는데, app 의 모든 정보가 필요하지는 았않다. 따라서 Projection 으로 필요한 정보만 가져오려고 했고 자연스럽게 영속성으로 관리하는 걸 포기했다.</p><p>따라서 위 두 쿼리가 아래와 같이 하나의 쿼리로 변경되었다.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> app<span class="token punctuation">.</span>app_id<span class="token punctuation">,</span> app<span class="token punctuation">.</span>app_name<span class="token punctuation">,</span> app<span class="token punctuation">.</span>app_description<span class="token punctuation">,</span> app<span class="token punctuation">.</span>main_image<span class="token punctuation">,</span> app<span class="token punctuation">.</span>category_id <span class="token function">avg</span><span class="token punctuation">(</span>review<span class="token punctuation">.</span>rating<span class="token punctuation">)</span> <span class="token keyword">as</span> rating</span>
<span class="line"><span class="token keyword">from</span> app</span>
<span class="line"><span class="token keyword">join</span> category <span class="token keyword">on</span> app<span class="token punctuation">.</span>category_id <span class="token operator">=</span> category<span class="token punctuation">.</span>category_id</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> review <span class="token keyword">on</span> app<span class="token punctuation">.</span>app_id <span class="token operator">=</span> review<span class="token punctuation">.</span>app_id</span>
<span class="line"><span class="token keyword">where</span> category<span class="token punctuation">.</span>category_code <span class="token operator">=</span> :category_code</span>
<span class="line">  <span class="token operator">and</span> app<span class="token punctuation">.</span><span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;RELEASED&#39;</span></span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> app<span class="token punctuation">.</span>app_id</span>
<span class="line"><span class="token keyword">order</span> <span class="token keyword">by</span> rating <span class="token keyword">desc</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>released_at <span class="token keyword">desc</span></span>
<span class="line"><span class="token keyword">limit</span> ? <span class="token keyword">offset</span> ?<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 쿼리를 위해서 다음과 같은 Projection 을 정의하고 사용했다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">class</span> AppData <span class="token annotation builtin">@QueryProjection</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">val</span> appId<span class="token operator">:</span> Long<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> appName<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> description<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> mainImage<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> categoryId<span class="token operator">:</span> Long<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>하지만 이렇게 하면 <u>app 과 매핑된 category 가 response 로 변환될 때 자동으로 lazy loading 이 되지 않는다.</u> 내가 필요한 Reponse 는 아래와 같았다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">AppListResponse</span><span class="token punctuation">(</span> <span class="token comment">//전체 리스트 및 페이지 정보</span></span>
<span class="line">  <span class="token keyword">val</span> apps<span class="token operator">:</span> List<span class="token operator">&lt;</span>AppResponse<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token keyword">val</span> pageInfo<span class="token operator">:</span> PageInfo</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">AppResponse</span><span class="token punctuation">(</span> <span class="token comment">//리스트 내 개별적인 AppResponse</span></span>
<span class="line">    <span class="token keyword">val</span> appId<span class="token operator">:</span> Long<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> appName<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> description<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> mainImage<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> category<span class="token operator">:</span> CategoryResponse<span class="token punctuation">,</span> <span class="token comment">//이 정보를 원래는 app.category 의 lazy loading 으로 가져왔으나, AppData 를 사용하면서 불가능해졌다.</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">CategoryResponse</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">val</span> categoryId<span class="token operator">:</span> Long<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> categoryCode<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> categoryIcon<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>따라서 AppResponse 를 반환하기 위해선 <strong>app 의 categoryId 로 카테고리 전체 정보를 조회하는 동작이 추가로 필요</strong>했다.</p><p>나는 이를 해결하기 위해 <code>CategoryService</code> 를 만들고 애플리케이션 생성 시 init 블럭을 통해 category 정보를 메모리(hash)에 넣었다. 그리고 필요 시 해당 메모리를 조회했다. 이렇게 판단한 이유는 category 테이블의 row 수가 3개에 불과하고 수정이 극히 적기 때문이다. 다만 데이터를 모델링할 때 category 에도 여러 정보가 포함될 수 있고, 동적으로 수정이 편하게 하려고 Enum 이 아닌 DB 테이블로 관리하고 있었다.</p><p>따라서 아래와 같은 클래스를 만들어서 활용한다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token function">CategoryService</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> categoryRepository<span class="token operator">:</span> CategoryRepository<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> categoryCache<span class="token operator">:</span> HashMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Category<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">//스프링 빈 init 시 DB 에 있는 정보를 categoryCache 에 넣기</span></span>
<span class="line">        categoryRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> categoryCache<span class="token punctuation">[</span>it<span class="token punctuation">.</span>categoryId<span class="token operator">!!</span><span class="token punctuation">]</span> <span class="token operator">=</span> it <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//카테고리 가져오기</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getCategory</span><span class="token punctuation">(</span>categoryId<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Category <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">				<span class="token keyword">return</span> CategoryCache<span class="token punctuation">[</span>categoryId<span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">CategoryNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>최초 로딩 시 categoryRepository 에서 모든 카테고리를 HashMap 에 넣는다. 그리고 <strong>category 정보가 필요하면 DB 가 아니라 hashmap 에서 가져온다.</strong></p><blockquote><p>다음을 고려해야 한다.</p><ol><li>n 분마다 DB 업데이트</li><li>캐시에서 notFound 이면 에러를 반환하는 게 아니라 DB 조회 후 있으면 캐시에 저장하고 반환, 없으면 에러 반환</li></ol></blockquote><h3 id="_2-2-4-두번째-테스트" tabindex="-1"><a class="header-anchor" href="#_2-2-4-두번째-테스트"><span>2.2.4 두번째 테스트</span></a></h3><h4 id="조건-1" tabindex="-1"><a class="header-anchor" href="#조건-1"><span><strong>조건</strong></span></a></h4><ul><li>duration : 10분, <strong>150 rps</strong></li></ul><h4 id="결과-1" tabindex="-1"><a class="header-anchor" href="#결과-1"><span><strong>결과</strong></span></a></h4><p><strong>응답시간</strong></p><p><img src="`+f+'" alt="Screenshot 2025-09-30 at 12.22.24 AM"></p><ul><li>p95 를 기준으로 응답 시간이 <strong>700ms ~ 710ms</strong> 로 <u>상당히 개선되었다</u>.</li></ul><p><strong>CPU, Memory</strong></p><ul><li>CPU 는 평균적으로 0.3 코어정도 사용</li><li>메모리는 마찬가지로 500 ~ 600MiB 에서 큰 변화가 없다.</li></ul><p><strong>Database</strong></p><p><img src="'+w+'" alt="image-20250930002413940"></p><ul><li>데이터베이스 지표가 개선되었다. <strong>약 46% 를 사용한다.</strong></li></ul><p><strong>Span</strong></p><p>이번엔 tempo 로 수집한 Span 데이터를 살펴보자</p><p><img src="'+x+`" alt="Screenshot 2025-09-30 at 12.24.49 AM"></p><p>하나씩 설명하긴 힘들지만, 긴 쿼리가 2개정도 보인다. 해당 쿼리는 <strong>&quot;별점순&quot;조회와 &quot;다운로드순&quot; 조회</strong>다. 첫페이지 조회에서는 여러 순서(별점순, 다운로드순, 최신순, 최신 업데이트 순 등)으로 보여주기 때문에 하나의 요청에 여러 쿼리가 나갈 수밖에 없다. 그 중 별점순과 다운로드순은 각각 Review 와 Download 테이블과 조인해야 하기 때문에 더 오랜 시간이 걸린다.</p><p>따라서 해당 쿼리를 해결해야 한다.</p><h3 id="_2-2-5-두번째-개선-materialized-view-테이블-활용" tabindex="-1"><a class="header-anchor" href="#_2-2-5-두번째-개선-materialized-view-테이블-활용"><span>2.2.5 두번째 개선: MATERIALIZED VIEW 테이블 활용</span></a></h3><p>나는 <strong>MATERIALIZED VIEW</strong> 를 활용해 주기적으로 별점순, 다운로드순 결과를 캐싱했다.</p><blockquote><p><strong>MATERIALIZED VIEW</strong> 는 쿼리 결과를 <strong>실제 테이블처럼</strong> 다룰 수 있게 해주는 객체다. 조회할 때는 원본 테이블을 보지 않고, materialized view 에서 저장된 데이터를 바로 읽는다. 다만 원본 데이터가 변경돼도 자동 갱신되지는 않기 때문에 cron job 이 필요하다.</p></blockquote><p>예를 들어 App 의 review rating 을 1분마다 캐싱하려면 다음과 같이 사용한다.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> MATERIALIZED <span class="token keyword">VIEW</span> app_avg_rating <span class="token keyword">AS</span></span>
<span class="line"><span class="token keyword">SELECT</span> app<span class="token punctuation">.</span>app_id<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>rating<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_rating<span class="token punctuation">,</span> app<span class="token punctuation">.</span>app_name<span class="token punctuation">,</span> app<span class="token punctuation">.</span>app_description<span class="token punctuation">,</span> app<span class="token punctuation">.</span>main_image<span class="token punctuation">,</span> app<span class="token punctuation">.</span>category_id </span>
<span class="line"><span class="token keyword">FROM</span> app_review</span>
<span class="line"><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> app_id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- pg_cron 확장 설치</span></span>
<span class="line"><span class="token keyword">CREATE</span> EXTENSION <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> pg_cron<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 1분마다 refresh</span></span>
<span class="line"><span class="token keyword">SELECT</span> cron<span class="token punctuation">.</span>schedule<span class="token punctuation">(</span><span class="token string">&#39;refresh_app_avg_rating&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*/1 * * * *&#39;</span><span class="token punctuation">,</span> $$</span>
<span class="line">  REFRESH MATERIALIZED <span class="token keyword">VIEW</span> CONCURRENTLY app_avg_rating<span class="token punctuation">;</span></span>
<span class="line">$$<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 cron 으로 1분마다 뷰를 리프레시하도록 등록한다.</p><p>이렇게 하면 요청 시마다 app 과 review 를 조인해서 결과를 만드는 것이 아니라, app_avg_rating 테이블만 조회해서 정렬하면 되기 때문에 DB 부하가 줄어든다.</p><h3 id="_2-2-6-세번째-테스트" tabindex="-1"><a class="header-anchor" href="#_2-2-6-세번째-테스트"><span>2.2.6 세번째 테스트</span></a></h3><h4 id="조건-2" tabindex="-1"><a class="header-anchor" href="#조건-2"><span><strong>조건</strong></span></a></h4><p>RPS 를 늘려서 테스트한다.</p><ul><li>duration : 10분, <strong>400 rps</strong></li></ul><h4 id="결과-2" tabindex="-1"><a class="header-anchor" href="#결과-2"><span><strong>결과</strong></span></a></h4><p><strong>응답시간</strong></p><p><img src="`+E+'" alt="image-20250930003649983"></p><ul><li>(첫 테스트보다 4배많은) 400RPS 임에도 p95 를 기준으로 응답 시간이 <strong>750ms ~ 760ms</strong> 로 상당히 개선되었다.</li></ul><p><strong>Database</strong></p><p><img src="'+A+'" alt="image-20250930003743155"></p><ul><li>데이터베이스는 CPU 를 90% 이상 소모했다. <strong>현재의 개선사항으로는 400 RPS 가 최선으로 보이며, 또 다시 데이터베이스가 다음 단계의 병목으로 보인다.</strong></li></ul><h1 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h1><ul><li>리소스 추가 없이 100 RPS 에서 400 RPS 로 개선했다.</li><li>캐싱을 사용하지 않은 이유는 &quot;추가적인 리소스없이&quot; 개선하려고 했기 때문이다. 이번 테스트 간 나의 개선 순서는, <ul><li>비즈니스 로직 개선, 쿼리 개선 -&gt; 캐시 사용 -&gt; 리소스 추가 -&gt; 아키텍처 변경이다.</li></ul></li><li>리팩토링에서 테스트가 중요하다고 느꼈다. <strong>쿼리를 개선하면서 테스트를 깨트린 적이 여러 번 있었는데 테스트가 없었다면 배포하고 나서야 알 오류들이었다.</strong></li></ul>',106)),a(o)])}const C=c(P,[["render",I],["__file","2025-09-29-loadtest.html.vue"]]),T=JSON.parse('{"path":"/posts/infra/2025-09-29-loadtest.html","title":"쿠버네티스 운영 환경 준비 하기 - 3. load test 와 성능 개선","lang":"en-US","frontmatter":{"title":"쿠버네티스 운영 환경 준비 하기 - 3. load test 와 성능 개선","date":"2025-09-29T00:00:00.000Z","tags":["부하테스트"],"description":"부하테스트로 처리량 4배로 늘리기"},"headers":[{"level":1,"title":"1. 부하테스트 준비","slug":"_1-부하테스트-준비","link":"#_1-부하테스트-준비","children":[{"level":2,"title":"1.1 부하테스트 툴","slug":"_1-1-부하테스트-툴","link":"#_1-1-부하테스트-툴","children":[]},{"level":2,"title":"1.2 k6 와 influxDB, grafana","slug":"_1-2-k6-와-influxdb-grafana","link":"#_1-2-k6-와-influxdb-grafana","children":[]},{"level":2,"title":"1.3 주의사항","slug":"_1-3-주의사항","link":"#_1-3-주의사항","children":[]},{"level":2,"title":"1.4 tempo 모니터링 툴 추가","slug":"_1-4-tempo-모니터링-툴-추가","link":"#_1-4-tempo-모니터링-툴-추가","children":[]}]},{"level":1,"title":"2. 부하테스트 결과 분석 및 개선","slug":"_2-부하테스트-결과-분석-및-개선","link":"#_2-부하테스트-결과-분석-및-개선","children":[{"level":2,"title":"2.2 테스트 수행","slug":"_2-2-테스트-수행","link":"#_2-2-테스트-수행","children":[{"level":3,"title":"2.2.1 시나리오","slug":"_2-2-1-시나리오","link":"#_2-2-1-시나리오","children":[]},{"level":3,"title":"2.2.2 첫번째 테스트","slug":"_2-2-2-첫번째-테스트","link":"#_2-2-2-첫번째-테스트","children":[]},{"level":3,"title":"2.2.3 첫번째 개선: Projection 활용","slug":"_2-2-3-첫번째-개선-projection-활용","link":"#_2-2-3-첫번째-개선-projection-활용","children":[]},{"level":3,"title":"2.2.4 두번째 테스트","slug":"_2-2-4-두번째-테스트","link":"#_2-2-4-두번째-테스트","children":[]},{"level":3,"title":"2.2.5 두번째 개선: MATERIALIZED VIEW 테이블 활용","slug":"_2-2-5-두번째-개선-materialized-view-테이블-활용","link":"#_2-2-5-두번째-개선-materialized-view-테이블-활용","children":[]},{"level":3,"title":"2.2.6 세번째 테스트","slug":"_2-2-6-세번째-테스트","link":"#_2-2-6-세번째-테스트","children":[]}]}]},{"level":1,"title":"마치며","slug":"마치며","link":"#마치며","children":[]}],"git":{},"filePathRelative":"_posts/infra/2025-09-29-loadtest.md"}');export{C as comp,T as data};
