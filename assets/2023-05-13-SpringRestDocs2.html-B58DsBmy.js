import{_ as i,c as u,a,b as s,d as r,f as t,r as o,o as k,e}from"./app-GZaBdJFr.js";const d="/images/2023-05-13-SpringRestDocs2/image-20230513170330210.png",m="/images/2023-05-13-SpringRestDocs2/image-20230513200534716.png",v="/images/2023-05-13-SpringRestDocs2/image-20230513201233004.png",b={},g={class:"table-of-contents"};function f(h,n){const c=o("Header"),p=o("router-link"),l=o("Footer");return k(),u("div",null,[a(c),s("nav",g,[s("ul",null,[s("li",null,[a(p,{to:"#enum-코드-문서화"},{default:t(()=>n[0]||(n[0]=[e("Enum 코드 문서화")])),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#main-java"},{default:t(()=>n[1]||(n[1]=[e("main.java")])),_:1})]),s("li",null,[a(p,{to:"#test-java"},{default:t(()=>n[2]||(n[2]=[e("Test.java")])),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#custom-response-fields-snippet"},{default:t(()=>n[3]||(n[3]=[e("custom-response-fields.snippet")])),_:1})]),s("li",null,[a(p,{to:"#customresponsefieldssnippet"},{default:t(()=>n[4]||(n[4]=[e("CustomResponseFieldsSnippet")])),_:1})]),s("li",null,[a(p,{to:"#apiresponsedto-java"},{default:t(()=>n[5]||(n[5]=[e("ApiResponseDto.java")])),_:1})]),s("li",null,[a(p,{to:"#enumdocs"},{default:t(()=>n[6]||(n[6]=[e("EnumDocs")])),_:1})]),s("li",null,[a(p,{to:"#commondoccontroller"},{default:t(()=>n[7]||(n[7]=[e("CommonDocController")])),_:1})]),s("li",null,[a(p,{to:"#commondoccontrollertest"},{default:t(()=>n[8]||(n[8]=[e("CommonDocControllerTest")])),_:1})])])]),s("li",null,[a(p,{to:"#팝업창-만들기"},{default:t(()=>n[9]||(n[9]=[e("팝업창 만들기")])),_:1})]),s("li",null,[a(p,{to:"#membercontrollertest-login"},{default:t(()=>n[10]||(n[10]=[e("MemberControllerTest.login()")])),_:1})])])]),s("li",null,[a(p,{to:"#마치며"},{default:t(()=>n[11]||(n[11]=[e("마치며")])),_:1})]),s("li",null,[a(p,{to:"#ref"},{default:t(()=>n[12]||(n[12]=[e("Ref.")])),_:1})])])]),n[13]||(n[13]=r('<h1 id="enum-코드-문서화" tabindex="-1"><a class="header-anchor" href="#enum-코드-문서화"><span>Enum 코드 문서화</span></a></h1><p>지금까지 사용한 필드 중에 Enum 타입이 없었는데요. Member 에 Authority enum 타입을 만들어서 사용해보고, 문서화도 해보겠습니다.</p><p>그리고 문서에서 Enum 타입을 확인할 수 있도록 PopUp 창을 띄우는 것까지 만들겠습니다.</p><p>아래 이미지는 최종적인 모습입니다. Description 에 링크를 걸어 Enum 에 대한 설명을 볼 수 있습니다.</p><p><img src="'+d+`" alt="image-20230513170330210"></p><p><strong>Gradle</strong></p><p>코드 작성 전에 gradle 에 test 용 lombok 을 추가해줍니다.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">testCompileOnly &#39;org.projectlombok:lombok&#39; // 테스트 의존성 추가</span>
<span class="line">testAnnotationProcessor &#39;org.projectlombok:lombok&#39; // 테스트 의존성 추가</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 settings 의 Annotation Processors 에서 Enable annotation processing 을 체크해줍니다.</p><h2 id="main-java" tabindex="-1"><a class="header-anchor" href="#main-java"><span>main.java</span></a></h2><p>모든 Enum 타입에서 공통적으로 사용할 메서드를 먼저 선언해줍니다. EnumType 의 메서드는 문서화 작업시 사용됩니다. EnumType, Authority 는 main.java 에서 entity 디렉토리에 만들었습니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EnumType</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Authority 도 만들어 줍니다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@AllArgsConstructor</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Authority</span> <span class="token keyword">implements</span> <span class="token class-name">EnumType</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">USER</span><span class="token punctuation">(</span><span class="token string">&quot;일반 사용자&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">ADMIN</span><span class="token punctuation">(</span><span class="token string">&quot;관리자&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>description<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="test-java" tabindex="-1"><a class="header-anchor" href="#test-java"><span>Test.java</span></a></h2><h3 id="custom-response-fields-snippet" tabindex="-1"><a class="header-anchor" href="#custom-response-fields-snippet"><span>custom-response-fields.snippet</span></a></h3><p>enum 타입을 만들 때 사용할 템플릿입니다. test.resources.org.springframework.restdocs.templates 에 만들어줍니다.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{{#title}}{{.}}{{/title}}</span>
<span class="line">|===</span>
<span class="line">|code|Description</span>
<span class="line"></span>
<span class="line">{{#fields}}</span>
<span class="line">|{{#tableCellContent}}\`+{{path}}+\`{{/tableCellContent}}</span>
<span class="line">|{{#tableCellContent}}{{description}}{{/tableCellContent}}</span>
<span class="line">{{/fields}}</span>
<span class="line">|===</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>빨간색으로 오류가 떠도 괜찮습니다.</p><h3 id="customresponsefieldssnippet" tabindex="-1"><a class="header-anchor" href="#customresponsefieldssnippet"><span>CustomResponseFieldsSnippet</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>restdocsTest<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>operation<span class="token punctuation">.</span></span><span class="token class-name">Operation</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>payload<span class="token punctuation">.</span></span><span class="token class-name">AbstractFieldsSnippet</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>payload<span class="token punctuation">.</span></span><span class="token class-name">FieldDescriptor</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>payload<span class="token punctuation">.</span></span><span class="token class-name">PayloadSubsectionExtractor</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomResponseFieldsSnippet</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFieldsSnippet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">CustomResponseFieldsSnippet</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">PayloadSubsectionExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> subsectionExtractor<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FieldDescriptor</span><span class="token punctuation">&gt;</span></span> descriptors<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ignoreUndocumentedFields<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> descriptors<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> ignoreUndocumentedFields<span class="token punctuation">,</span> subsectionExtractor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">MediaType</span> <span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token class-name">Operation</span> operation<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> operation<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token class-name">Operation</span> operation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> operation<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 이 클래스는 default 템플릿이 아닌 custom 템플릿을 사용하기 위한 클래스입니다. 생성자의 parameter 중 type 을 보고 template 을 결정합니다. <code>custom-response-fields.snippet</code> 을 사용하기 위해서는 type 값으로 &quot;custom-response&quot; 를 넘겨줘야 합니다.</p><h3 id="apiresponsedto-java" tabindex="-1"><a class="header-anchor" href="#apiresponsedto-java"><span>ApiResponseDto.java</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>restdocsTest<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@ToString</span></span>
<span class="line"><span class="token annotation punctuation">@Getter</span></span>
<span class="line"><span class="token annotation punctuation">@NoArgsConstructor</span></span>
<span class="line"><span class="token annotation punctuation">@Builder</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiResponseDto</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">ApiResponseDto</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ApiResponseDto</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiResponseDto</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ Test 패키지에서 만들 컨트롤러에서 반환값으로 사용하는 클래스입니다.</p><h3 id="enumdocs" tabindex="-1"><a class="header-anchor" href="#enumdocs"><span>EnumDocs</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>restdocsTest<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@NoArgsConstructor</span></span>
<span class="line"><span class="token annotation punctuation">@AllArgsConstructor</span></span>
<span class="line"><span class="token annotation punctuation">@Data</span></span>
<span class="line"><span class="token annotation punctuation">@Builder</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumDocs</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> authority<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 마찬가지로 Test 패키지에서 만들 컨트롤러에서 사용할 클래스입니다. 문서화하고자 하는 모든 Enum 값을 명시해줍니다.</p><h3 id="commondoccontroller" tabindex="-1"><a class="header-anchor" href="#commondoccontroller"><span>CommonDocController</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>restdocsTest<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Authority</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">EnumType</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonDocController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/enums&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ApiResponseDto</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EnumDocs</span><span class="token punctuation">&gt;</span></span> <span class="token function">findEnums</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 문서화할 값들을 다 지정해줍니다.</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> authority <span class="token operator">=</span> <span class="token function">getDocs</span><span class="token punctuation">(</span><span class="token class-name">Authority</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ApiResponseDto 에 모두 담아서 return 합니다. 나중에 파싱할 겁니다.</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">ApiResponseDto</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">EnumDocs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">authority</span><span class="token punctuation">(</span>authority<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getDocs</span><span class="token punctuation">(</span><span class="token class-name">EnumType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> enumTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>enumTypes<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">EnumType</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token class-name">EnumType</span><span class="token operator">::</span><span class="token function">getDescription</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ EnumDocs 클래스에 문서화하고자 하는 모든 값들을 생성하고 builder 로 담아줍니다. 그리고 그 EnumDocs 를 ApiResponseDto 에 담아서 반환해줍니다. 이를 바탕으로 만들어진 조각으로 문서화를 진행할 예정입니다.</p><h3 id="commondoccontrollertest" tabindex="-1"><a class="header-anchor" href="#commondoccontrollertest"><span>CommonDocControllerTest</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">restapi<span class="token punctuation">.</span>restdocs<span class="token punctuation">.</span>restdocsTest<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">RestDocumentationExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">CommonDocControllerTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span></span>
<span class="line">    <span class="token annotation punctuation">@BeforeEach</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span> webApplicationContext<span class="token punctuation">,</span></span>
<span class="line">                      <span class="token class-name">RestDocumentationContextProvider</span> restDocumentation<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc <span class="token operator">=</span> <span class="token class-name">MockMvcBuilders</span><span class="token punctuation">.</span><span class="token function">webAppContextSetup</span><span class="token punctuation">(</span>webApplicationContext<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">documentationConfiguration</span><span class="token punctuation">(</span>restDocumentation<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">operationPreprocessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">withResponseDefaults</span><span class="token punctuation">(</span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">withRequestDefaults</span><span class="token punctuation">(</span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enums</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 요청한 return 값을 받습니다.</span></span>
<span class="line">        <span class="token class-name">ResultActions</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/test/enums&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 결과값을 저장합니다.</span></span>
<span class="line">        <span class="token class-name">MvcResult</span> mvcResult <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 결과값을 EnumDocs 로 parsing 합니다.</span></span>
<span class="line">        <span class="token class-name">EnumDocs</span> enumDocs <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span>mvcResult<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 문서화를 진행합니다.</span></span>
<span class="line">        result<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token string">&quot;authority&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">customResponseFields</span><span class="token punctuation">(</span><span class="token string">&quot;custom-response&quot;</span><span class="token punctuation">,</span> <span class="token function">beneathPath</span><span class="token punctuation">(</span><span class="token string">&quot;data.authority&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSubsectionId</span><span class="token punctuation">(</span><span class="token string">&quot;authority&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">attributes</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;authority&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">enumConvertFieldDescriptor</span><span class="token punctuation">(</span>enumDocs<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 커스텀 템플릿 사용을 위한 함수입니다. </span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CustomResponseFieldsSnippet</span> customResponseFields</span>
<span class="line">        <span class="token punctuation">(</span></span>
<span class="line">            <span class="token class-name">String</span> type<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">PayloadSubsectionExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> subsectionExtractor<span class="token punctuation">,</span></span>
<span class="line">            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes<span class="token punctuation">,</span> <span class="token class-name">FieldDescriptor</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> descriptors</span>
<span class="line">    	<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomResponseFieldsSnippet</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> subsectionExtractor<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>descriptors<span class="token punctuation">)</span><span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Map으로 넘어온 enumValue를 fieldWithPath 로 전부 바꿔서 배열로 넘깁니다.</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">FieldDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">enumConvertFieldDescriptor</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> enumValues<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> enumValues<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> <span class="token function">fieldWithPath</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">FieldDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// mvc result 데이터를 parsing 합니다.</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">EnumDocs</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">MvcResult</span> result<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ApiResponseDto</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EnumDocs</span><span class="token punctuation">&gt;</span></span> apiResponseDto <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentAsByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> apiResponseDto<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>customResponseFields(&quot;custom-response&quot;, beneathPath(&quot;data.authority&quot;).withSubsectionId(&quot;authority&quot;), attributes(field(&quot;title&quot;, &quot;authority&quot;)), enumConvertFieldDescriptor(enumDocs.getAuthority()))</code> custom 템플릿을 만들기 위해서 보내는 인자값들입니다. 이 부분을 자세히 보도록 하겠습니다.</p><ul><li>type : custom-response-fields.snippet 템플릿 사용을 위한 인자입니다. &quot;custom-response&quot; 를 넘깁니다.</li><li>subsectionExtractor : 어떤 값에서 데이터를 추출할지 정해줍니다. <code>beneathPath(&quot;data.authority&quot;)</code> 는 result(=ApiResponseDto) 의 data 필드에서 authority 를 뽑아내는 것입니다. 즉, ApiResponseDto.data.authority 라고 볼 수 있습니다. 이 때 data 는 enumDocs 를 넣어주었습니다. 그리고 <code>.withSubsectionId(&quot;authority&quot;)</code> 는 adoc 문서의 이름입니다. <code>custom-response-fields-[문서이름]</code> 으로 설정됩니다. 여기서는 <code>custom-response-fields-authority</code> 가 되겠습니다.</li><li>attributes : key, value 값으로 보냅니다. title 을 설정하기 위해 authority 를 보냈습니다.</li><li>descriptors : <code>enumDocs.getAuthority()</code> 안에는 Enum 값들이 들어있습니다. (USER, ADMIN) 이 값들을 문서화 하기 위해 Descriptor 배열로 변경하여 인자로 넣어줍니다.</li></ul><h2 id="팝업창-만들기" tabindex="-1"><a class="header-anchor" href="#팝업창-만들기"><span>팝업창 만들기</span></a></h2><p>​ asciidoc 자체에서 팝업 기능을 제공하지는 않습니다. 대신 docinfo.html 을 이용해서 구현합니다. asccidoctor의 docinfo 라는 속성이 있는데 adoc 파일에 html 파일을 주입 할 수 있게 해주는 속성입니다.</p><p>전체적인 directory 구조는 아래와 같습니다. <img src="`+m+`" alt="image-20230513200534716"></p><p><strong>docinfo.html</strong></p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token parameter">callbackFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token string">&#39;loading&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Document is already ready, call the callback directly</span></span>
<span class="line">            <span class="token function">callbackFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// All modern browsers to register DOMContentLoaded</span></span>
<span class="line">            document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> callbackFunc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// Old IE browsers</span></span>
<span class="line">            document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">&#39;onreadystatechange&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token string">&#39;complete&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">callbackFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">openPopup</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>className <span class="token operator">!==</span> <span class="token string">&quot;popup&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> screenX <span class="token operator">=</span> event<span class="token punctuation">.</span>screenX<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> screenY <span class="token operator">=</span> event<span class="token punctuation">.</span>screenY<span class="token punctuation">;</span></span>
<span class="line">        window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>href<span class="token punctuation">,</span> target<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">left=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>screenX<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, top=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>screenY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, width=500, height=600, status=no, menubar=no, toolbar=no, resizable=no</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token function">openPopup</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>클릭 시 팝업으로 띄울 수 있도록 js 문법을 적용했습니다.</p><p><strong>index.adoc</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">= Rest Docs Practice Application API Document</span>
<span class="line">:doctype: book</span>
<span class="line">:source-highlighter: highlightjs</span>
<span class="line">:toc: left</span>
<span class="line">:toclevels: 2</span>
<span class="line">:sectlinks:</span>
<span class="line">:docinfo: shared-head</span>
<span class="line"></span>
<span class="line">include::member.adoc[]</span>
<span class="line">include::post.adoc[]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>기존 옵션에 <code>:docinfo: shared-head</code> 만 추가합니다.</p><p><strong>authority.adoc</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">:doctype: book</span>
<span class="line">:icons: font</span>
<span class="line"></span>
<span class="line">[[authority]]</span>
<span class="line">include::{snippets}/authority/custom-response-fields-authority.adoc[]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>띄울 팝업 창입니다. <code>[[authority]]</code> 는 HTML 로 변환 시 <code>div id=&#39;authority&#39;</code> 를 붙게 합니다.</p><h2 id="membercontrollertest-login" tabindex="-1"><a class="header-anchor" href="#membercontrollertest-login"><span>MemberControllerTest.login()</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">final</span> <span class="token class-name">MemberResponse</span> memberResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberResponse</span><span class="token punctuation">(</span><span class="token string">&quot;memberName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Authority</span><span class="token punctuation">.</span><span class="token constant">USER</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">when</span><span class="token punctuation">(</span>memberService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>memberResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;/members/login&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;memberName\\&quot;: \\&quot;memberName\\&quot;, \\&quot;password\\&quot;: \\&quot;password\\&quot;}&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Updated JSON payload</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">document</span><span class="token punctuation">(</span><span class="token string">&quot;member-login&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">requestFields</span><span class="token punctuation">(</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;memberName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Member memberName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Member password&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token function">responseFields</span><span class="token punctuation">(</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;memberName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Member memberName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Member password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Member email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                <span class="token function">fieldWithPath</span><span class="token punctuation">(</span><span class="token string">&quot;authority&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;link:common/authority.html[Enum,role=\\&quot;popup\\&quot;]&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ Enum 이 있는 login() 메서드를 수정합니다. description 값으로 <code>&quot;link:common/authority.html[Enum,role=\\&quot;popup\\&quot;]&quot;)</code> 를 줍니다. html 로 변환 시 <code>&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;common/authority.html&quot; class=&quot;popup&quot;&gt;Enum&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;</code> 으로 됩니다.</p><p>이제 build 를 하면 main 의 resources 에 다음과 같이 생깁니다. <img src="`+v+'" alt="image-20230513201233004"></p><h1 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h1><p>​ 이제 제가 원하는 수준까지는 모두 완성되었습니다. 다음 포스팅은 중복 코드를 제거하기 위한 refactoring 을 하겠습니다.</p><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>Ref.</span></a></h1><p><a href="https://youtu.be/BoVpTSsTuVQ" target="_blank" rel="noopener noreferrer">[10분 테코톡] 승팡, 케이의 REST Docs</a></p><p><a href="https://taetaetae.github.io/2020/03/08/spring-rest-docs-in-spring-boot/" target="_blank" rel="noopener noreferrer">SpringRestDocs를 SpringBoot에 적용하기</a></p><p><a href="https://techblog.woowahan.com/2597/" target="_blank" rel="noopener noreferrer">Spring Rest Docs 적용</a></p><p><a href="https://tecoble.techcourse.co.kr/post/2020-08-18-spring-rest-docs/" target="_blank" rel="noopener noreferrer">API 문서 자동화 - Spring REST Docs 팔아보겠습니다</a></p><p><a href="https://docs.spring.io/spring-restdocs/docs/2.0.4.RELEASE/reference/html5/#getting-started-documentation-snippets-invoking-the-service" target="_blank" rel="noopener noreferrer">공식 문서</a></p><p>+ 추가 : <a href="https://backtony.github.io/spring/2021-10-15-spring-test-3/" target="_blank" rel="noopener noreferrer">Spring REST Docs 적용 및 최적화 하기</a> &lt;- 포스팅 시에는 참고하지 않았지만 이후에도 계속 rest docs 를 공부하면서 찾다보니 제일 도움되는 포스팅입니다.</p>',60)),a(l)])}const w=i(b,[["render",f],["__file","2023-05-13-SpringRestDocs2.html.vue"]]),q=JSON.parse('{"path":"/posts/spring/2023-05-13-SpringRestDocs2.html","title":"Spring RestDocs 를 활용한 RestfulAPI - enum 코드 문서화","lang":"en-US","frontmatter":{"title":"Spring RestDocs 를 활용한 RestfulAPI - enum 코드 문서화","date":"2023-05-13T00:00:00.000Z","tags":["spring","restDocs","restapi"],"description":"Spring RestDocs 로 문서 남기기 2"},"headers":[{"level":1,"title":"Enum 코드 문서화","slug":"enum-코드-문서화","link":"#enum-코드-문서화","children":[{"level":2,"title":"main.java","slug":"main-java","link":"#main-java","children":[]},{"level":2,"title":"Test.java","slug":"test-java","link":"#test-java","children":[{"level":3,"title":"custom-response-fields.snippet","slug":"custom-response-fields-snippet","link":"#custom-response-fields-snippet","children":[]},{"level":3,"title":"CustomResponseFieldsSnippet","slug":"customresponsefieldssnippet","link":"#customresponsefieldssnippet","children":[]},{"level":3,"title":"ApiResponseDto.java","slug":"apiresponsedto-java","link":"#apiresponsedto-java","children":[]},{"level":3,"title":"EnumDocs","slug":"enumdocs","link":"#enumdocs","children":[]},{"level":3,"title":"CommonDocController","slug":"commondoccontroller","link":"#commondoccontroller","children":[]},{"level":3,"title":"CommonDocControllerTest","slug":"commondoccontrollertest","link":"#commondoccontrollertest","children":[]}]},{"level":2,"title":"팝업창 만들기","slug":"팝업창-만들기","link":"#팝업창-만들기","children":[]},{"level":2,"title":"MemberControllerTest.login()","slug":"membercontrollertest-login","link":"#membercontrollertest-login","children":[]}]},{"level":1,"title":"마치며","slug":"마치며","link":"#마치며","children":[]},{"level":1,"title":"Ref.","slug":"ref","link":"#ref","children":[]}],"git":{},"filePathRelative":"_posts/spring/2023-05-13-SpringRestDocs2.md"}');export{w as comp,q as data};
