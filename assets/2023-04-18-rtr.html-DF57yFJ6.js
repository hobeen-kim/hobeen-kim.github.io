import{_ as c,c as r,a,b as s,d as u,f as t,r as l,o as d,e as p}from"./app-fgWK4YuS.js";const k="/images/2023-04-18-rtr/image-20230418221150364.png",m="/images/2023-04-18-rtr/image-20230418222024231.png",v="/images/2023-04-18-rtr/image-20230418224045312.png",g="/images/2023-04-18-rtr/image-20230418224220773.png",h="/images/2023-04-18-rtr/image-20230418233427108.png",f="/images/2023-04-18-rtr/image-20230418234122708.png",b={},R={class:"table-of-contents"};function T(y,n){const o=l("Header"),e=l("router-link"),i=l("Footer");return d(),r("div",null,[a(o),s("nav",R,[s("ul",null,[s("li",null,[a(e,{to:"#redis"},{default:t(()=>n[0]||(n[0]=[p("Redis")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#인메모리"},{default:t(()=>n[1]||(n[1]=[p("인메모리")])),_:1})]),s("li",null,[a(e,{to:"#특징"},{default:t(()=>n[2]||(n[2]=[p("특징")])),_:1})]),s("li",null,[a(e,{to:"#redis-사용"},{default:t(()=>n[3]||(n[3]=[p("Redis 사용")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#cli-환경에서-저장"},{default:t(()=>n[4]||(n[4]=[p("CLI 환경에서 저장")])),_:1})]),s("li",null,[a(e,{to:"#springboot-연동"},{default:t(()=>n[5]||(n[5]=[p("SpringBoot 연동")])),_:1})])])]),s("li",null,[a(e,{to:"#refreshtoken-과-redis"},{default:t(()=>n[6]||(n[6]=[p("RefreshToken 과 Redis")])),_:1})])])]),s("li",null,[a(e,{to:"#rtr-refresh-token-rotation"},{default:t(()=>n[7]||(n[7]=[p("RTR (Refresh Token Rotation)")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#refreshtoken-의-보안성-문제"},{default:t(()=>n[8]||(n[8]=[p("RefreshToken 의 보안성 문제")])),_:1})]),s("li",null,[a(e,{to:"#rtr-동작-flow"},{default:t(()=>n[9]||(n[9]=[p("RTR 동작 flow")])),_:1})]),s("li",null,[a(e,{to:"#attacker-에게-토큰을-탈취당할-경우"},{default:t(()=>n[10]||(n[10]=[p("Attacker 에게 토큰을 탈취당할 경우")])),_:1})]),s("li",null,[a(e,{to:"#문제점"},{default:t(()=>n[11]||(n[11]=[p("문제점")])),_:1})])])]),s("li",null,[a(e,{to:"#마치며"},{default:t(()=>n[12]||(n[12]=[p("마치며")])),_:1})]),s("li",null,[a(e,{to:"#ref"},{default:t(()=>n[13]||(n[13]=[p("Ref.")])),_:1})])])]),n[14]||(n[14]=u('<h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis"><span>Redis</span></a></h1><blockquote><p>Redis is an open source (BSD licensed), in-memory <strong>data structure store</strong> used as a database, cache, message broker, and streaming engine.</p><p><a href="https://redis.io/docs/about/" target="_blank" rel="noopener noreferrer">Retis Introduction</a></p></blockquote><p>Redis 란 DB, cache, Message broker, streaming engine 을 제공하는 인메모리 데이터 저장소 입니다.</p><h2 id="인메모리" tabindex="-1"><a class="header-anchor" href="#인메모리"><span>인메모리</span></a></h2><p>인메모리는 RAM 에 데이터를 올려서 사용하는 방법입니다. 메모리에 올리는 이유는 SSD, HDD 같은 저장공간에서 데이터를 읽는 것보다 속도가 빠르기 때문입니다.</p><p>하지만 속도가 빠른 대신 당연하게도 용량이 작다는 단점이 있습니다. 그리고 <strong>Redis 는 key, value 형태</strong>의 NOSQL 로 저장되며 다양한 데이터 구조를 지원하기는 하지만 복잡한 데이터를 저장하기는 어렵습니다.</p><p>또한 인메모리이기 때문에 서버에 충돌이 발생하거나 다운되면 저장된 값이 사라지게 됩니다.</p><p>따라서 Redis 는 주로 보조적인 수단으로 사용되는 <strong>캐시 DB 서버</strong> 입니다. (Persistence x)</p><h2 id="특징" tabindex="-1"><a class="header-anchor" href="#특징"><span>특징</span></a></h2><ul><li>Redis는 List, Set, Sorted Set, Hash 등과 같은 Collection을 지원합니다. <ul><li>List : redis Strings의 묶음 Collection</li><li>Set : 중복되지 않는 값을 데이터로 갖는 Colelction</li><li>Sorted Set : 가중치(Score)를 갖고 가중치(Score)에 따른 정렬된 순서로 중복되지 않는 값을 데이터로 가지는 Colelction</li><li>Hash : Key 하나에 여러개의 Field와 Value로 구성된 즉, Key 내부에 또 다른 Key - value로 이루어진 Collection</li></ul></li><li>Dump 파일과 AOF(Append Of File) 방식으로 메모리 상의 데이터를 디스크에 저장할 수 있습니다.</li><li>Master/Slave Replication 기능을 통해 데이터의 분산, 복제 기능을 제공하며 Query Off Loading 기능을 통해 Master는 Read/Write를 수행하고 Slave는 Read만 수행할 수 있습니다.</li><li>파티셔닝(Partitioning)을 통해 동적인 스케일 아웃(Scale Out)인 수평 확장이 가능합니다.</li><li>Expiration 기능은 일정 시간이 지났을 때 메모리 상의 데이터를 자동 삭제할 수 있습니다.</li><li>Redis는 Single Thread -&gt; Atomic 보장</li></ul><h2 id="redis-사용" tabindex="-1"><a class="header-anchor" href="#redis-사용"><span>Redis 사용</span></a></h2><p>원도우용 Redis 는 여기서 다운로드 받습니다. <a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener noreferrer">윈도우용 Redis 다운로드</a></p><p>Redis 의 기본포트는 6379 입니다. 다운로드 이후 가동상태를 확인하려면 cmd 에서 다음과 같은 명령어를 입력해줍니다.</p><p><code>netstat -an | findstr 6379</code></p><p><img src="'+k+'" alt="image-20230418221150364"></p><p>잘 가동중임을 알 수 있습니다. 재부팅을 하면 자동으로 서비스로 등록이 되어 있고 실행이 되어서 따로 시작을 안해줘도 됩니다. 따로 시작을 하려면 Redis 폴더에서 <code>redis-server.exe</code> 를 실행하면 됩니다.</p><h3 id="cli-환경에서-저장" tabindex="-1"><a class="header-anchor" href="#cli-환경에서-저장"><span>CLI 환경에서 저장</span></a></h3><p>redis 폴더에서 <code>redis-cli</code> 로 redis 를 실행시킵니다.</p><ul><li>key, value 저장 : <code>set name hobeen</code> 으로 저장합니다.</li><li>value 조회 : <code>get name</code> 으로 값을 조회합니다.</li><li>key, value 삭제 : <code>del name</code> 으로 값을 삭제합니다.</li></ul><p><img src="'+m+`" alt="image-20230418222024231"></p><h3 id="springboot-연동" tabindex="-1"><a class="header-anchor" href="#springboot-연동"><span>SpringBoot 연동</span></a></h3><ol><li><strong>의존성</strong>을 추가합니다. (build.gradle)</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">	implementation &#39;org.springframework.boot:spring-boot-starter-data-redis-reactive&#39;</span>
<span class="line">	implementation &#39;org.springframework.boot:spring-boot-starter-web&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>application.yml</strong> 에 Redis 를 연결하기 위한 값을 넣습니다.</li></ol><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">redis</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">pool</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">10</span></span>
<span class="line">        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span></span>
<span class="line">        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">2</span></span>
<span class="line">    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span></span>
<span class="line">    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1</span>
<span class="line">    <span class="token key atrule">password</span><span class="token punctuation">:</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>해당 값들의 의미는 다음과 같습니다.</p><table><thead><tr><th><strong>변수</strong></th><th><strong>기본값</strong></th><th><strong>설명</strong></th></tr></thead><tbody><tr><td>spring.redis.database</td><td>0</td><td>커넥션 팩토리에 사용되는 데이터베이스 인덱스</td></tr><tr><td>spring.redis.host</td><td>localhost</td><td>레디스 서버 호스트</td></tr><tr><td>spring.redis.password</td><td>레디스 서버 로그인 패스워드</td><td></td></tr><tr><td>spring.redis.pool.max-active</td><td>8</td><td>pool에 할당될 수 있는 커넥션 최대수 (음수로 하면 무제한)</td></tr><tr><td>spring.redis.pool.max-idle</td><td>8</td><td>pool의 &quot;idle&quot; 커넥션 최대수 (음수로 하면 무제한)</td></tr><tr><td>spring.redis.pool.max-wait</td><td>-1</td><td>pool이 바닥났을 때 예외발생 전에 커넥션 할당 차단의 최대 시간 (단위: 밀리세컨드, 음수는 무제한 차단)</td></tr><tr><td>spring.redis.pool.min-idle</td><td>0</td><td>풀에서 관리하는 idle 커넥션의 최소 수 대상 (양수일 때만 유효)</td></tr><tr><td>spring.redis.port</td><td>6379</td><td>레디스 서버 포트</td></tr><tr><td>spring.redis.sentinel.master</td><td>레디스 서버 이름</td><td></td></tr><tr><td>spring.redis.sentinel.nodes</td><td>호스트:포트 쌍 목록 (콤마로 구분)</td><td></td></tr><tr><td>spring.redis.timeout</td><td>0</td><td>커넥션 타임아웃 (단위: 밀리세컨드)</td></tr></tbody></table><ol start="3"><li><strong>RedisConfig</strong> 를 설정합니다.</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.redis.host}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> redisHost<span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.redis.port}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> redisPort<span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.redis.password}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> redisPassword<span class="token punctuation">;</span></span>
<span class="line">	</span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">RedisConnectionFactory</span> <span class="token function">redisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">RedisStandaloneConfiguration</span> redisStandaloneConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisStandaloneConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        redisStandaloneConfiguration<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span>redisHost<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        redisStandaloneConfiguration<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>redisPort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        redisStandaloneConfiguration<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>redisPassword<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">LettuceConnectionFactory</span> lettuceConnectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span>redisStandaloneConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> lettuceConnectionFactory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span><span class="token function">redisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Redis 에 연결하기 위한 <code>RedisConnectionFactory</code> 와 <code>RedisTemplate</code> 입니다. redisTemplate 을 이용하여 Redis 를 사용합니다.</li></ul><ol start="4"><li><strong>RedisController</strong></li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">redis<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ValueOperations</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token annotation punctuation">@RequiredArgsConstructor</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Hello Redis&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/redisTest&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">addRedisKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> vop <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        vop<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;yellow&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        vop<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        vop<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;watermelon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">CREATED</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/redisTest/{key}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getRedisKey</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> vop <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> value <span class="token operator">=</span> vop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>redisTemplate</code> 를 주입받습니다.</li><li><code>redisTemplate.opsForValue();</code> 으로 Redis 와 연결하여 key, value 를 넣고 꺼냅니다.</li></ul><ol start="5"><li><p><strong>Postman</strong> 으로 확인해보겠습니다.</p><ul><li>POST <code>http://localhost:8080/redisTest</code> : 201 응답이 잘 옵니다. Redis 에 잘 저장되었습니다.</li></ul><p><img src="`+v+'" alt="image-20230418224045312"></p><ul><li>GET <code>http://localhost:8080/redisTest/yellow</code> : key 값인 <code>yellow</code> 를 넣었을 때 value 값인 <code>banana</code> 가 잘 출력됩니다.</li></ul><p><img src="'+g+'" alt="image-20230418224220773"></p></li></ol><p>이를 활용해서 socceranalyst 프로젝트에 Redis 를 적용해보겠습니다.</p><h2 id="refreshtoken-과-redis" tabindex="-1"><a class="header-anchor" href="#refreshtoken-과-redis"><span>RefreshToken 과 Redis</span></a></h2><p>갑자기 Redis 를 언급한 이유는 <strong>RTR</strong> 적용을 위해서 refreshToken 을 Redis 에 저장하기 위함입니다. 다음에 언급할 주제이기도 한 RTR 은 Refresh Token Rotation 의 약자로, refreshToken 을 일회용으로 사용하고 폐기하는 정책입니다.</p><p>따라서 해당 refreshToken 을 유효한지 검증하고 처리하는 과정을 빠르게 하기 위해 Redis 를 사용하여 저장하고, 재발급 요청 시 DB 에 있는 refreshToken 인지 확인한 후에 재발급을 하게 됩니다.</p><h1 id="rtr-refresh-token-rotation" tabindex="-1"><a class="header-anchor" href="#rtr-refresh-token-rotation"><span>RTR (Refresh Token Rotation)</span></a></h1><p>JWT Token 은 보통 accessToken 과 refreshToken 으로 나눠 사용합니다. accessToken 은 인증 및 인가 권한을 가지며 만료시간이 짧습니다. refreshToken 은 만료기간이 길지만, accessToken 을 재발급하는 데만 사용됩니다.</p><h2 id="refreshtoken-의-보안성-문제" tabindex="-1"><a class="header-anchor" href="#refreshtoken-의-보안성-문제"><span>RefreshToken 의 보안성 문제</span></a></h2><p>하지만 이러한 Token 의 이원화에도 몇 가지 문제점이 있는데, 그 중 하나가 refreshToken 이 탈취당했을 때입니다. refreshToken 은 보통 2주의 만료기간을 가지니, 그 동안 attacker 는 계속해서 accessToken 을 발급받을 수 있습니다. Token 은 클라이언트의 상태를 보존하지 않는 stateless 상태이기 때문입니다.</p><h2 id="rtr-동작-flow" tabindex="-1"><a class="header-anchor" href="#rtr-동작-flow"><span>RTR 동작 flow</span></a></h2><p>RTR 정책이 동작하는 방식입니다.</p><p><img src="'+h+'" alt="image-20230418233427108"></p><ol><li>client 는 ID, PW 로 로그인을 요청합니다.</li><li>서버는 <code>TokenProvider</code> 로 accessToken, refreshToken 을 발급합니다.</li><li>refreshToken 은 사용자의 ID 등 식별할 수 있는 값으로 key 를 정하여 Redis 에 저장합니다.</li><li>client 에게 accessToken, refreshToken 을 응답합니다.</li><li>server 가 client 에서 만료된 accessToken 을 받으면,</li><li>client 에게 401 에러를 반환합니다.</li><li>client 는 accessToken 이 만료되었음을 확인하고 refreshToken 을 전송합니다.</li><li>server 는 accessToken 에서 userID 를 key 로 하여 Redis 에서 refreshToken 을 조회합니다.</li><li>Redis 는 refreshToken 을 반환하고, server 는 이 값을 대조합니다.</li><li>해당 값이 맞으면 accessToken, refreshToken 을 재발급 하고 refreshToken 은 다시 Redis 에 저장합니다.</li><li>새로운 accessToken, refreshToken 을 client 에게 반환합니다.</li></ol><h2 id="attacker-에게-토큰을-탈취당할-경우" tabindex="-1"><a class="header-anchor" href="#attacker-에게-토큰을-탈취당할-경우"><span>Attacker 에게 토큰을 탈취당할 경우</span></a></h2><p><img src="'+f+'" alt="image-20230418234122708"></p><ol><li>1번 accessToken, refreshToken 을 Attacker 에게 탈취당합니다.</li><li>1번 accessToken 만료 시 Attacker 는 재발급 요청을 합니다.</li><li>서버는 해당 토큰이 정상적이므로 Token 을 재발급하고 2번 refreshToken 은 Redis 에 저장합니다.</li><li>이후 재발급된 2번 accessToken, refreshToken 을 Attacker 에게 반환합니다.</li><li>Client 측도 accessToken 만료 시 1번 refreshToken 으로 server 에게 재발급 요청을 합니다.</li><li>이 때 Redis 에 저장된 refreshToken 은 2번이므로 1번 refreshToken 은 유효하지 않습니다. 따라서 server 는 client 에게 재로그인 요구를 합니다.</li><li>client 는 재로그인을 실시합니다.</li><li>server 는 로그인 시 새로운 accessToken, refreshToken 를 발급하므로, 3번 accessToken, refreshToken 을 발급하고 3번 refreshToken 은 Redis 저장합니다.</li><li>이후 재발급된 3번 accessToken, refreshToken 을 client 에게 반환합니다.</li><li>2번 accessToken 이 만료되었을 때 Attacker 는 다시 2번 refreshToken 으로 accessToken 재발급을 요청합니다.</li><li>server 는 Redis 조회 결과 2번 refreshToken 은 만료된 상태이므로 Attacker 에게 재로그인을 요구합니다.</li><li>Attacker 는 client 의 ID, PW 를 알 수 없으므로 재로그인에 실패하게 됩니다.</li></ol><h2 id="문제점" tabindex="-1"><a class="header-anchor" href="#문제점"><span>문제점</span></a></h2><ol><li>이러한 방법은 JWT의 Stateless 방식에 어긋나는 행동입니다. Redis 에 refreshToken 을 저장함으로써 서버가 클라이언트의 상태를 보존하고 있기 때문입니다.</li><li>Attacker 에게 accessToken, refreshToken 이 함께 탈취당했을 때 accessToken 이 만료되기 전까지 Attacker 는 사용자 정보에 접근할 수 있습니다. 이 점은 접속 IP 확인 등을 통해서 해결할 수도 있습니다.</li></ol><p><em><strong><u>보안에서 모든 상황을 만족할 수 없습니다. 적절한 Trade-off 가 필요합니다.</u></strong></em></p><h1 id="마치며" tabindex="-1"><a class="header-anchor" href="#마치며"><span>마치며</span></a></h1><p>Redis, RTR 의 개념적인 부분만 개략적으로 알아봤습니다.</p><ol><li>Redis 연동</li><li>RefreshToken 저장 및 조회 구현</li><li>Access Token 만료 시에만 새로운 Token을 발급 받을 수 있도록 구현. 그전에 발급받으려고 하면 Access, Refresh Token을 모두 폐기 <ul><li>Attacker 가 Refresh Token을 사용하여 일찍 Access Token을 발급받으려는 상황 방지</li></ul></li></ol><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>Ref.</span></a></h1><p><a href="https://oingdaddy.tistory.com/239" target="_blank" rel="noopener noreferrer">Springboot + Redis 연동하는 초간단 샘플 만들어보기</a></p><p><a href="https://zangzangs.tistory.com/72" target="_blank" rel="noopener noreferrer">인메모리 데이터 저장소 Redis, 왜 사용할까? #Redis 파헤치기</a></p><p><a href="https://backtony.github.io/spring/redis/2021-08-29-spring-redis-1/" target="_blank" rel="noopener noreferrer">Spring - Redis 연동하기</a></p>',59)),a(i)])}const S=c(b,[["render",T],["__file","2023-04-18-rtr.html.vue"]]),C=JSON.parse('{"path":"/posts/spring/2023-04-18-rtr.html","title":"refresh 토큰과 RTR 기술","lang":"en-US","frontmatter":{"title":"refresh 토큰과 RTR 기술","date":"2023-04-18T00:00:00.000Z","tags":["redis","rtr"],"description":"RTR 을 통해 리프레시 토큰 보안 강화"},"headers":[{"level":1,"title":"Redis","slug":"redis","link":"#redis","children":[{"level":2,"title":"인메모리","slug":"인메모리","link":"#인메모리","children":[]},{"level":2,"title":"특징","slug":"특징","link":"#특징","children":[]},{"level":2,"title":"Redis 사용","slug":"redis-사용","link":"#redis-사용","children":[{"level":3,"title":"CLI 환경에서 저장","slug":"cli-환경에서-저장","link":"#cli-환경에서-저장","children":[]},{"level":3,"title":"SpringBoot 연동","slug":"springboot-연동","link":"#springboot-연동","children":[]}]},{"level":2,"title":"RefreshToken 과 Redis","slug":"refreshtoken-과-redis","link":"#refreshtoken-과-redis","children":[]}]},{"level":1,"title":"RTR (Refresh Token Rotation)","slug":"rtr-refresh-token-rotation","link":"#rtr-refresh-token-rotation","children":[{"level":2,"title":"RefreshToken 의 보안성 문제","slug":"refreshtoken-의-보안성-문제","link":"#refreshtoken-의-보안성-문제","children":[]},{"level":2,"title":"RTR 동작 flow","slug":"rtr-동작-flow","link":"#rtr-동작-flow","children":[]},{"level":2,"title":"Attacker 에게 토큰을 탈취당할 경우","slug":"attacker-에게-토큰을-탈취당할-경우","link":"#attacker-에게-토큰을-탈취당할-경우","children":[]},{"level":2,"title":"문제점","slug":"문제점","link":"#문제점","children":[]}]},{"level":1,"title":"마치며","slug":"마치며","link":"#마치며","children":[]},{"level":1,"title":"Ref.","slug":"ref","link":"#ref","children":[]}],"git":{},"filePathRelative":"_posts/spring/2023-04-18-rtr.md"}');export{S as comp,C as data};
