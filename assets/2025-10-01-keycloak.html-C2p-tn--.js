import{_ as p,c as r,a,b as s,d as u,f as l,r as i,o as k,e as t}from"./app-Da6UI3dN.js";const d="/images/2025-10-01-keycloak/image-20251003163449213.png",m="/images/2025-10-01-keycloak/image-20251003163813099.png",g="/images/2025-10-01-keycloak/image-20251003163854709.png",v="/images/2025-10-01-keycloak/image-20251003163940016.png",y="/images/2025-10-01-keycloak/image-20250829163419630.png",h={},b={class:"table-of-contents"};function _(f,n){const o=i("Header"),e=i("router-link"),c=i("Footer");return k(),r("div",null,[a(o),s("nav",b,[s("ul",null,[s("li",null,[a(e,{to:"#_1-keycloak-이란"},{default:l(()=>n[0]||(n[0]=[t("1. keycloak 이란")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_1-1-sso-란"},{default:l(()=>n[1]||(n[1]=[t("1.1 SSO 란?")])),_:1})]),s("li",null,[a(e,{to:"#_1-2-제공-기능"},{default:l(()=>n[2]||(n[2]=[t("1.2 제공 기능")])),_:1})])])]),s("li",null,[a(e,{to:"#_2-keycloak-구축"},{default:l(()=>n[3]||(n[3]=[t("2. keycloak 구축")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_2-1-docker-compose"},{default:l(()=>n[4]||(n[4]=[t("2.1 docker-compose")])),_:1})]),s("li",null,[a(e,{to:"#_2-2-keycloak-구성"},{default:l(()=>n[5]||(n[5]=[t("2.2 keycloak 구성")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_2-2-1-realm-생성"},{default:l(()=>n[6]||(n[6]=[t("2.2.1 realm 생성")])),_:1})]),s("li",null,[a(e,{to:"#_2-2-2-client-생성-및-설정"},{default:l(()=>n[7]||(n[7]=[t("2.2.2 client 생성 및 설정")])),_:1})]),s("li",null,[a(e,{to:"#_2-2-3-백엔드-설정-로그인"},{default:l(()=>n[8]||(n[8]=[t("2.2.3 백엔드 설정 (로그인)")])),_:1})])])])])]),s("li",null,[a(e,{to:"#_3-keycloak-설정-알아보기"},{default:l(()=>n[9]||(n[9]=[t("3. keycloak 설정 알아보기")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_3-1-keycloak-주요-개념"},{default:l(()=>n[10]||(n[10]=[t("3.1 Keycloak 주요 개념")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#realm"},{default:l(()=>n[11]||(n[11]=[t("Realm")])),_:1})]),s("li",null,[a(e,{to:"#client"},{default:l(()=>n[12]||(n[12]=[t("Client")])),_:1})]),s("li",null,[a(e,{to:"#user"},{default:l(()=>n[13]||(n[13]=[t("User")])),_:1})]),s("li",null,[a(e,{to:"#role"},{default:l(()=>n[14]||(n[14]=[t("Role")])),_:1})]),s("li",null,[a(e,{to:"#client-role"},{default:l(()=>n[15]||(n[15]=[t("Client Role")])),_:1})]),s("li",null,[a(e,{to:"#service-account-role"},{default:l(()=>n[16]||(n[16]=[t("Service Account Role")])),_:1})]),s("li",null,[a(e,{to:"#group"},{default:l(()=>n[17]||(n[17]=[t("Group")])),_:1})])])]),s("li",null,[a(e,{to:"#_3-2-keycloak-로그인-플로우"},{default:l(()=>n[18]||(n[18]=[t("3.2 keycloak 로그인 플로우")])),_:1})])])])])]),n[19]||(n[19]=u(`<h1 id="_1-keycloak-이란" tabindex="-1"><a class="header-anchor" href="#_1-keycloak-이란"><span>1. keycloak 이란</span></a></h1><p>Keycloak은 <strong>오픈소스 인증·인가(Identity and Access Management, IAM) 솔루션</strong>으로, 사용자 로그인/로그아웃, 회원가입, 권한 부여 등을 쉽게 구현할 수 있도록 도와주는 서버다.</p><p>특히, 다양한 애플리케이션과 서비스에서 공통으로 쓸 수 있는 <strong>중앙 인증 서버</strong> 역할로 SSO(Single Sign-on)을 가능하게 해주기 때문에, 각각의 앱마다 로그인 기능을 따로 구현할 필요가 없다.</p><h2 id="_1-1-sso-란" tabindex="-1"><a class="header-anchor" href="#_1-1-sso-란"><span>1.1 SSO 란?</span></a></h2><p><strong>SSO(Single-Sign-On)</strong> 은 여러 개의 애플리케이션에서 사용자가 한 번 로그인하면, 추가 인증 없이 모든 서비스에 자동으로 로그인되는 기능을 의미한다.</p><p>예를 들어,</p><ul><li>구글 계정으로 Gmail, Drive, YouTube 에 동시에 접근</li><li>회사의 사내 포털에 로그인하면 메일, 인사시스템, 메신저에도 자동 로그인</li></ul><p>와 같은 것들이 SSO 의 사례다. Keycloak은 이러한 SSO 기능을 표준 프로토콜(OIDC, OAuth2.0, SAML)을 기반으로 제공한다.</p><h2 id="_1-2-제공-기능" tabindex="-1"><a class="header-anchor" href="#_1-2-제공-기능"><span>1.2 제공 기능</span></a></h2><p>Keycloak이 제공하는 대표적인 기능은 다음과 같다.</p><ol><li><strong>중앙 인증 및 인가</strong><ul><li>회원가입, 로그인, 로그아웃, 비밀번호 재설정 같은 기능 제공</li><li>Role 기반 접근 제어(RBAC) 지원</li></ul></li><li><strong>SSO / SLO 지원</strong><ul><li>한 번 로그인하면 여러 서비스에서 재인증 없이 사용 가능</li><li>Single Logout(SLO)도 제공하여 한 번 로그아웃 시 모든 앱에서 로그아웃</li></ul></li><li><strong>표준 프로토콜 지원</strong><ul><li>OpenID Connect (OIDC)</li><li>OAuth 2.0</li><li>SAML 2.0</li></ul></li><li><strong>사용자 관리 기능</strong><ul><li>Admin Console에서 사용자(User) 생성/조회/수정/삭제</li><li>그룹(Group) 관리, Role 매핑</li><li>사용자 속성(Attribute) 확장 가능</li></ul></li><li><strong>소셜 로그인 및 외부 ID 연동</strong><ul><li>Google, Facebook, GitHub 같은 외부 IdP 연동 가능</li><li>LDAP, Active Directory 같은 사내 인증 시스템 연계</li></ul></li><li><strong>다양한 보안 기능</strong><ul><li>2단계 인증(OTP, MFA)</li><li>이메일/휴대폰 인증</li><li>세션/토큰 관리</li></ul></li></ol><h1 id="_2-keycloak-구축" tabindex="-1"><a class="header-anchor" href="#_2-keycloak-구축"><span>2. keycloak 구축</span></a></h1><h2 id="_2-1-docker-compose" tabindex="-1"><a class="header-anchor" href="#_2-1-docker-compose"><span>2.1 docker-compose</span></a></h2><p>도커 컴포즈로 간단하게 구성할 수 있다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">keycloak</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/keycloak/keycloak<span class="token punctuation">:</span>latest   <span class="token comment"># 필요 시 고정 버전으로 변경 권장 (예: 26.0)</span></span>
<span class="line">    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> keycloak</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;9010:8080&quot;</span>        <span class="token comment"># http://localhost:8080</span></span>
<span class="line">    <span class="token key atrule">environment</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">KEYCLOAK_ADMIN</span><span class="token punctuation">:</span> admin</span>
<span class="line">      <span class="token key atrule">KEYCLOAK_ADMIN_PASSWORD</span><span class="token punctuation">:</span> admin</span>
<span class="line"></span>
<span class="line">      <span class="token comment"># --- DB 연결 설정 (Keycloak Quarkus) ---</span></span>
<span class="line">      <span class="token key atrule">KC_DB</span><span class="token punctuation">:</span> postgres</span>
<span class="line">      <span class="token key atrule">KC_DB_USERNAME</span><span class="token punctuation">:</span> postgres</span>
<span class="line">      <span class="token key atrule">KC_DB_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">1234</span></span>
<span class="line">      <span class="token key atrule">KC_DB_URL_HOST</span><span class="token punctuation">:</span> host.docker.internal   <span class="token comment"># 호스트의 Postgres 로 연결</span></span>
<span class="line">      <span class="token key atrule">KC_DB_URL_PORT</span><span class="token punctuation">:</span> <span class="token string">&quot;5432&quot;</span></span>
<span class="line">      <span class="token key atrule">KC_DB_URL_DATABASE</span><span class="token punctuation">:</span> keycloak</span>
<span class="line"></span>
<span class="line">      <span class="token comment"># 선택: 헬스/메트릭</span></span>
<span class="line">      <span class="token key atrule">KC_HEALTH_ENABLED</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span></span>
<span class="line">      <span class="token key atrule">KC_METRICS_ENABLED</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span></span>
<span class="line">    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;start-dev&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Linux에서 host.docker.internal 사용을 위한 매핑 (Docker 20.10+)</span></span>
<span class="line">    <span class="token key atrule">extra_hosts</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;host.docker.internal:host-gateway&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-keycloak-구성" tabindex="-1"><a class="header-anchor" href="#_2-2-keycloak-구성"><span>2.2 keycloak 구성</span></a></h2><p>백엔드 서버에서 통신하며 기본적인 로그인 및 회원가입 기능을 할 수 있도록 구성한다.</p><h3 id="_2-2-1-realm-생성" tabindex="-1"><a class="header-anchor" href="#_2-2-1-realm-생성"><span>2.2.1 realm 생성</span></a></h3><p>realm 은 인증/인가를 담당하는 논리적 보안 영역이다. <strong>하나의 Realm 은 독립적인 사용자(User), 클라이언트(Client), 보안 정책을 가지며 다른 Realm과는 격리돼 있어 계정/권한이 공유되지 않는다.</strong></p><p><img src="`+d+'" alt="image-20251003163449213"></p><p>해당 페이지에서 Create realm 을 누르고 생성한다. (question-server)</p><h3 id="_2-2-2-client-생성-및-설정" tabindex="-1"><a class="header-anchor" href="#_2-2-2-client-생성-및-설정"><span>2.2.2 client 생성 및 설정</span></a></h3><p>Client 는 <u>Keycloak에 인증을 위임하는 애플리케이션을 의미</u>한다. 생성된 realm 에서 Manage &gt; Client &gt; Create Client 를 클릭한다. 그러면 아래와 같은 생성 페이지가 보인다.</p><p><img src="'+m+'" alt="image-20251003163813099"></p><p><img src="'+g+'" alt="image-20251003163854709"></p><p><strong>Client authentication</strong></p><ul><li>의미: 이 Client가 Keycloak에 토큰을 요청할 때 <strong>자신을 인증할 필요가 있는지</strong> 여부</li><li>켜면 Confidential Client <ul><li>토큰 요청 시 <code>client_id</code> + <code>client_secret</code> 또는 private key 같은 <strong>클라이언트 자격 증명</strong>이 필요</li><li>보통 <strong>백엔드 애플리케이션 / 서버 간 통신</strong>에서 사용</li></ul></li><li>끄면 Public Client <ul><li>토큰 요청 시 클라이언트 인증 불필요, <code>client_id</code>만 있으면 됨</li><li>보통 <strong>SPA(React/Vue), 모바일 앱</strong>처럼 client_secret을 안전하게 숨길 수 없는 환경에서 사용</li></ul></li></ul><p><strong>Authorization</strong></p><ul><li>의미: <strong>Keycloak의 Authorization Services</strong> 기능을 활성화할지 여부</li><li>켜면 이 Client에 대해 <strong>리소스(Resource), 권한(Policy), 퍼미션(Permission)</strong> 을 정의할 수 있음 <ul><li>즉, 단순한 Role 기반이 아니라 세밀한 권한 제어(ABAC, RBAC 혼합)를 적용 가능</li></ul></li><li>끄면 일반적인 인증(Client → User 로그인/토큰 발급)만 수행한다.</li><li>사례 <ul><li>전자문서 서비스에서 “문서 소유자만 열람 가능”, “관리자만 삭제 가능” 같은 세밀한 정책을 Client 안에서 정의하고 싶을 때 Authorization ON</li><li>단순히 USER vs ADMIN Role만 구분하면 되는 경우 Authorization OFF</li></ul></li></ul><p><img src="'+v+`" alt="image-20251003163940016"></p><p>인증을 수행하는 redirect URL 을 입력한다.</p><h3 id="_2-2-3-백엔드-설정-로그인" tabindex="-1"><a class="header-anchor" href="#_2-2-3-백엔드-설정-로그인"><span>2.2.3 백엔드 설정 (로그인)</span></a></h3><p><code>build.gradle.kts</code> 는 아래와 같이 추가한다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre><code><span class="line"><span class="token comment">// security &amp; oauth2</span></span>
<span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.springframework.boot:spring-boot-starter-security&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.springframework.boot:spring-boot-starter-oauth2-client&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// Protect APIs with JWT from Keycloak</span></span>
<span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.springframework.boot:spring-boot-starter-oauth2-resource-server&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 configuration 파일은 아래와 같이 oauth2 설정을 추가한다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">application</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service</span>
<span class="line">  <span class="token key atrule">security</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">oauth2</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">client</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">registration</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">keycloak</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">scope</span><span class="token punctuation">:</span></span>
<span class="line">              <span class="token punctuation">-</span> openid</span>
<span class="line">              <span class="token punctuation">-</span> profile</span>
<span class="line">              <span class="token punctuation">-</span> email</span>
<span class="line">            <span class="token key atrule">authorization-grant-type</span><span class="token punctuation">:</span> authorization_code</span>
<span class="line">            <span class="token key atrule">redirect-uri</span><span class="token punctuation">:</span> <span class="token string">&quot;{baseUrl}/login/oauth2/code/{registrationId}&quot;</span></span>
<span class="line">            <span class="token key atrule">client-id</span><span class="token punctuation">:</span> question<span class="token punctuation">-</span>admin</span>
<span class="line">            <span class="token key atrule">client-secret</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>client<span class="token punctuation">-</span>secret<span class="token punctuation">}</span></span>
<span class="line">        <span class="token key atrule">provider</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">keycloak</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">issuer-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>9010/realms/question<span class="token punctuation">-</span>server</span>
<span class="line">      <span class="token key atrule">resource-server</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">jwt</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">issuer-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>9010/realms/question<span class="token punctuation">-</span>server</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그럼 추가적인 코드 없이 OAuth2 가 설정된다.</p><h1 id="_3-keycloak-설정-알아보기" tabindex="-1"><a class="header-anchor" href="#_3-keycloak-설정-알아보기"><span>3. keycloak 설정 알아보기</span></a></h1><p>소셜 로그인은 몇번 구현해봤지만 keycloak 설정은 익숙하지 않아서 정리해봤다.</p><h2 id="_3-1-keycloak-주요-개념" tabindex="-1"><a class="header-anchor" href="#_3-1-keycloak-주요-개념"><span>3.1 Keycloak 주요 개념</span></a></h2><h3 id="realm" tabindex="-1"><a class="header-anchor" href="#realm"><span>Realm</span></a></h3><ul><li><strong>사용자와 보안 정책을 관리하는 독립된 공간</strong></li><li>하나의 Realm은 자체 사용자(User), 클라이언트(Client), 역할(Role)을 가짐</li><li>서로 다른 Realm 간에는 사용자와 토큰이 공유되지 않음</li><li><strong>사례</strong>: 회사 서비스 A와 B를 각각 분리된 Realm으로 두어 사용자 풀을 분리 운영</li></ul><h3 id="client" tabindex="-1"><a class="header-anchor" href="#client"><span>Client</span></a></h3><ul><li>Keycloak에 인증을 위임하는 <strong>애플리케이션 또는 서비스</strong></li><li>웹앱, 모바일앱, API 서버 등</li><li>Client 설정에 따라 어떤 방식(OIDC/OAuth2/SAML)으로 토큰을 발급받을지 정의</li></ul><h3 id="user" tabindex="-1"><a class="header-anchor" href="#user"><span>User</span></a></h3><ul><li>Realm 안에 속한 <strong>실제 사용자 계정</strong></li><li>username, email, password, 속성(Attribute)을 가짐</li><li>Group이나 Role을 할당받아 권한이 결정됨</li><li><strong>사례</strong>: <code>alice</code>, <code>bob</code> 같은 사용자 계정</li></ul><h3 id="role" tabindex="-1"><a class="header-anchor" href="#role"><span>Role</span></a></h3><ul><li>권한 단위</li><li>Realm Role: Realm 전체에서 사용되는 권한</li><li>Client Role: 특정 Client 안에서만 유효한 권한</li></ul><h3 id="client-role" tabindex="-1"><a class="header-anchor" href="#client-role"><span>Client Role</span></a></h3><ul><li>특정 <strong>Client</strong> 안에서만 유효한 Role</li><li>사용자(User)에게 부여할 수 있고, 그 사용자가 해당 Client로 로그인했을 때 토큰에 포함됨</li><li>즉, **&quot;이 Client 안에서 어떤 권한을 가질지&quot;**를 정의하는 역할</li></ul><p><strong>사례</strong></p><ul><li>Realm: <code>question-server</code></li><li>Client: <code>question-backend</code><ul><li>Client Role: <code>ROLE_USER</code>, <code>ROLE_ADMIN</code></li></ul></li><li>User <code>alice</code>에게 <code>question-backend</code> Client의 <code>ROLE_USER</code>를 매핑 → alice이 <code>question-backend</code>로 로그인할 때 발급받는 토큰 안에 <code>&quot;resource_access&quot;: {&quot;question-backend&quot;: {&quot;roles&quot;:[&quot;ROLE_USER&quot;]}}</code> 가 들어감</li></ul><h3 id="service-account-role" tabindex="-1"><a class="header-anchor" href="#service-account-role"><span>Service Account Role</span></a></h3><ul><li><strong>Service Account</strong>는 <code>client_credentials</code> 방식으로 토큰을 받는 Client(=머신)용 계정</li><li>이 Service Account에게 부여하는 Role이 <strong>Service Account Role</strong></li><li>사람이 로그인하는 게 아니라, <strong>머신 간 통신</strong>이나 <strong>백엔드에서 Keycloak Admin REST API 호출</strong> 등에 쓰임</li><li>Service Account는 User가 아니고 Client에 딸린 “특수 User”라고 생각하면 됨</li></ul><p><strong>사례</strong></p><ul><li>Client: <code>question-admin</code> (confidential, Service Account enabled)</li><li>이 Client의 <code>Service Account</code> User에게 Realm Role <code>manage-users</code> 부여</li><li>이제 <code>question-admin</code>이 <code>client_credentials</code> grant로 토큰을 요청하면 → 토큰에 <code>manage-users</code> 권한 포함됨 → Keycloak Admin API(<code>/admin/realms/...</code>) 호출 가능</li></ul><h3 id="group" tabindex="-1"><a class="header-anchor" href="#group"><span>Group</span></a></h3><ul><li>사용자를 묶는 단위</li><li>Group에 Role을 매핑하면, Group에 속한 사용자들이 자동으로 해당 Role 을 상속</li></ul><h2 id="_3-2-keycloak-로그인-플로우" tabindex="-1"><a class="header-anchor" href="#_3-2-keycloak-로그인-플로우"><span>3.2 keycloak 로그인 플로우</span></a></h2><p>아래 내용에서 google 을 keycloak 으로 변경하면 같다. 관련 글은 <a href="https://hobeen-kim.github.io/posts/tech/2025-08-29-oidc.html" target="_blank" rel="noopener noreferrer">여기로</a></p><p><img src="`+y+'" alt="image-20250829163419630"></p>',61)),a(c)])}const A=p(h,[["render",_],["__file","2025-10-01-keycloak.html.vue"]]),C=JSON.parse('{"path":"/posts/tech/2025-10-01-keycloak.html","title":"Keycloak 개념 및 간단 사용","lang":"en-US","frontmatter":{"title":"Keycloak 개념 및 간단 사용","date":"2025-10-01T00:00:00.000Z","tags":["keycloak","oauth2"],"description":"keycloak 을 활용한 인증 서버 구축"},"headers":[{"level":1,"title":"1. keycloak 이란","slug":"_1-keycloak-이란","link":"#_1-keycloak-이란","children":[{"level":2,"title":"1.1 SSO 란?","slug":"_1-1-sso-란","link":"#_1-1-sso-란","children":[]},{"level":2,"title":"1.2 제공 기능","slug":"_1-2-제공-기능","link":"#_1-2-제공-기능","children":[]}]},{"level":1,"title":"2. keycloak 구축","slug":"_2-keycloak-구축","link":"#_2-keycloak-구축","children":[{"level":2,"title":"2.1 docker-compose","slug":"_2-1-docker-compose","link":"#_2-1-docker-compose","children":[]},{"level":2,"title":"2.2 keycloak 구성","slug":"_2-2-keycloak-구성","link":"#_2-2-keycloak-구성","children":[{"level":3,"title":"2.2.1 realm 생성","slug":"_2-2-1-realm-생성","link":"#_2-2-1-realm-생성","children":[]},{"level":3,"title":"2.2.2 client 생성 및 설정","slug":"_2-2-2-client-생성-및-설정","link":"#_2-2-2-client-생성-및-설정","children":[]},{"level":3,"title":"2.2.3 백엔드 설정 (로그인)","slug":"_2-2-3-백엔드-설정-로그인","link":"#_2-2-3-백엔드-설정-로그인","children":[]}]}]},{"level":1,"title":"3. keycloak 설정 알아보기","slug":"_3-keycloak-설정-알아보기","link":"#_3-keycloak-설정-알아보기","children":[{"level":2,"title":"3.1 Keycloak 주요 개념","slug":"_3-1-keycloak-주요-개념","link":"#_3-1-keycloak-주요-개념","children":[{"level":3,"title":"Realm","slug":"realm","link":"#realm","children":[]},{"level":3,"title":"Client","slug":"client","link":"#client","children":[]},{"level":3,"title":"User","slug":"user","link":"#user","children":[]},{"level":3,"title":"Role","slug":"role","link":"#role","children":[]},{"level":3,"title":"Client Role","slug":"client-role","link":"#client-role","children":[]},{"level":3,"title":"Service Account Role","slug":"service-account-role","link":"#service-account-role","children":[]},{"level":3,"title":"Group","slug":"group","link":"#group","children":[]}]},{"level":2,"title":"3.2 keycloak 로그인 플로우","slug":"_3-2-keycloak-로그인-플로우","link":"#_3-2-keycloak-로그인-플로우","children":[]}]}],"git":{},"filePathRelative":"_posts/tech/2025-10-01-keycloak.md"}');export{A as comp,C as data};
