import{_ as u,c as p,a as l,b as t,d,f as a,r,o as h,e as s}from"./app-6M4v-pIF.js";const f={},c={class:"table-of-contents"};function g(m,e){const o=r("Header"),n=r("router-link"),i=r("Footer");return h(),p("div",null,[l(o),t("nav",c,[t("ul",null,[t("li",null,[l(n,{to:"#문제-배경"},{default:a(()=>e[0]||(e[0]=[s("문제 배경")])),_:1})]),t("li",null,[l(n,{to:"#개선-시도"},{default:a(()=>e[1]||(e[1]=[s("개선 시도")])),_:1}),t("ul",null,[t("li",null,[l(n,{to:"#개선-1-코드리뷰"},{default:a(()=>e[2]||(e[2]=[s("개선 1: 코드리뷰")])),_:1})]),t("li",null,[l(n,{to:"#개선-2-테스트-커버리지-툴-도입"},{default:a(()=>e[3]||(e[3]=[s("개선 2: 테스트 커버리지 툴 도입")])),_:1}),t("ul",null,[t("li",null,[l(n,{to:"#테스트-보고서"},{default:a(()=>e[4]||(e[4]=[s("테스트 보고서")])),_:1})]),t("li",null,[l(n,{to:"#테스트-커버리지-보고서"},{default:a(()=>e[5]||(e[5]=[s("테스트 커버리지 보고서")])),_:1})])])])])]),t("li",null,[l(n,{to:"#마무리"},{default:a(()=>e[6]||(e[6]=[s("마무리")])),_:1})]),t("li",null,[l(n,{to:"#ref"},{default:a(()=>e[7]||(e[7]=[s("Ref.")])),_:1})])])]),e[8]||(e[8]=d('<p>나는 개발에서 가장 중요한 활동이 &quot;테스트&quot;라고 생각한다. 개발의 주요한 비기능적 요구사항인 확장성, 안정성, 민첩성 등이 &quot;테스트&quot;를 통해 달성될 수 있기 때문이다.</p><h1 id="문제-배경" tabindex="-1"><a class="header-anchor" href="#문제-배경"><span>문제 배경</span></a></h1><p>현재 백엔드 개발의 80% 이상을 내가 하고 있기 때문에 유닛 테스트와 통합 테스트는 거의 다 내가 작성하고 있다. 그런데 개발이 빠르게 진행되고 있는 과정에서 테스트가 누락되곤 한다.</p><p>테스트가 누락되면 주요하지 않은 기능이라면 문제 없겠지만 코어 기능이라면 나중에 수정이 어려워져 민첩성과 안정성이 떨어진다.</p><p>특히 기능을 수정하면서 기존에는 잘 작동했던 동작이 에러나 나는 경우가 있었는데 이러한 문제를 해결하기 위해서 <strong>테스트가 작성되었는지, 해당 테스트가 적절한지를 확인하는 체계</strong>가 필요하다고 생각했다.</p><h1 id="개선-시도" tabindex="-1"><a class="header-anchor" href="#개선-시도"><span>개선 시도</span></a></h1><h2 id="개선-1-코드리뷰" tabindex="-1"><a class="header-anchor" href="#개선-1-코드리뷰"><span>개선 1: 코드리뷰</span></a></h2><p>PR 리뷰 단계에서 &quot;테스트가 작성되었는지&quot;를 확인하는 방법이 있다. 하지만 코드리뷰만으로는 분명 한계가 있었다.</p><ul><li>리뷰어가 테스트 작성 여부를 <strong>놓칠 수 있다.</strong></li><li>테스트 코드가 있더라도, 해당 테스트가 모든 경우를 커버하는지 확인하지 못한다.</li><li>리뷰어의 주관에 따라 <strong>기준이 달라지는 문제</strong>가 발생한다.</li></ul><p>즉, 코드리뷰는 필요하지만 추가적인 시스템이 필요하다고 생각했다.</p><h2 id="개선-2-테스트-커버리지-툴-도입" tabindex="-1"><a class="header-anchor" href="#개선-2-테스트-커버리지-툴-도입"><span>개선 2: 테스트 커버리지 툴 도입</span></a></h2><p>그래서 테스트 실행 여부를 자동으로 잡아줄 방법이 필요했고, <strong>테스트 커버리지 툴</strong>을 쓰기로 했다. kover 와 diff-cover 을 사용했고 해당 내용은 **<a href="https://hobeen-kim.github.io/posts/spring/2025-08-20-test2.html" target="_blank" rel="noopener noreferrer">여기</a>**에 있다. PR 을 생성하면 테스트 보고서와 테스트 커버리지 보고서가 생성된다.</p><h3 id="테스트-보고서" tabindex="-1"><a class="header-anchor" href="#테스트-보고서"><span>테스트 보고서</span></a></h3><p>테스트 보고서는 테스트의 성공/실패 여부를 보여준다. 실패하면 gitaction 의 Summary 에서 실패로그를 볼 수 있다.</p><p>![Screenshot 2025-08-25 at 2.47.44 PM](/images/2025-08-27-culturetest/Screenshot 2025-08-25 at 2.47.44 PM.png)</p><h3 id="테스트-커버리지-보고서" tabindex="-1"><a class="header-anchor" href="#테스트-커버리지-보고서"><span>테스트 커버리지 보고서</span></a></h3><p>다음 내용이 포함된다.</p><ul><li>전체 테스트 커버리지</li><li>수정된 파일의 테스트 커버리지</li></ul><p>![Screenshot 2025-08-25 at 2.48.13 PM](/images/2025-08-27-culturetest/Screenshot 2025-08-25 at 2.48.13 PM.png)</p><p>![Screenshot 2025-08-25 at 2.48.20 PM](/images/2025-08-27-culturetest/Screenshot 2025-08-25 at 2.48.20 PM.png)</p><p>원래는 커버리지의 목표를 정하려고 했으나, 큰 의미가 없다고 생각하여 현재 단계에서는 테스트 작성여부에 대한 &quot;인지&quot; 차원에서만 사용하고 있다.</p><h1 id="마무리" tabindex="-1"><a class="header-anchor" href="#마무리"><span>마무리</span></a></h1><p>지금 회사에서 뭔가 개선해보기 위한 첫 시도다. 계속해서 새로운 개선을 하면서 &quot;좋은 문화&quot;를 가진 회사로 만들어나가고 싶다.</p><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>Ref.</span></a></h1><p>없음</p>',25)),l(i)])}const v=u(f,[["render",g],["__file","2025-08-27-culturetest.html.vue"]]),_=JSON.parse('{"path":"/posts/culture/2025-08-27-culturetest.html","title":"테스트에 대한 개발 문화","lang":"en-US","frontmatter":{"title":"테스트에 대한 개발 문화","date":"2025-08-27T00:00:00.000Z","tags":["개발문화","테스트"],"description":"커밋 메시지를 통한 테스트 커버리지 확인"},"headers":[{"level":1,"title":"문제 배경","slug":"문제-배경","link":"#문제-배경","children":[]},{"level":1,"title":"개선 시도","slug":"개선-시도","link":"#개선-시도","children":[{"level":2,"title":"개선 1: 코드리뷰","slug":"개선-1-코드리뷰","link":"#개선-1-코드리뷰","children":[]},{"level":2,"title":"개선 2: 테스트 커버리지 툴 도입","slug":"개선-2-테스트-커버리지-툴-도입","link":"#개선-2-테스트-커버리지-툴-도입","children":[{"level":3,"title":"테스트 보고서","slug":"테스트-보고서","link":"#테스트-보고서","children":[]},{"level":3,"title":"테스트 커버리지 보고서","slug":"테스트-커버리지-보고서","link":"#테스트-커버리지-보고서","children":[]}]}]},{"level":1,"title":"마무리","slug":"마무리","link":"#마무리","children":[]},{"level":1,"title":"Ref.","slug":"ref","link":"#ref","children":[]}],"git":{},"filePathRelative":"_posts/culture/2025-08-27-culturetest.md"}');export{v as comp,_ as data};
