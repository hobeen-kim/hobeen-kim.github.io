import{_ as t,c as l,a as s,d as c,r as a,o as i}from"./app-CSMHBbaB.js";const o="/images/2025-09-23-referencevalue/image-20250923155353003.png",u="/images/2025-09-23-referencevalue/image-20250923155638205.png",r="/images/2025-09-23-referencevalue/image-20250923160643918.png",d="/images/2025-09-23-referencevalue/image-20250923160933872.png",k="/images/2025-09-23-referencevalue/image-20250923161031064.png",m="/images/2025-09-23-referencevalue/image-20250923161302509.png",v="/images/2025-09-23-referencevalue/image-20250923162538945.png",b={};function g(y,n){const e=a("Header"),p=a("Footer");return i(),l("div",null,[s(e),n[0]||(n[0]=c(`<p>아래 코드에 대한 출력값(1,2,3,4)을 맞춰보자.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Tom</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Tom</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> originStr <span class="token operator">=</span> <span class="token string">&quot;originStr&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">change</span><span class="token punctuation">(</span>originStr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>originStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//출력 1</span></span>
<span class="line">      </span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> originArr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">change</span><span class="token punctuation">(</span>originArr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>originArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//출력 2</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> originList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">change</span><span class="token punctuation">(</span>originList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>originList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//출력 3</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Tom</span> originTom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tom</span><span class="token punctuation">(</span><span class="token string">&quot;origin Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">change</span><span class="token punctuation">(</span>originTom<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>originTom<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//출력 4</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        str <span class="token operator">=</span> <span class="token string">&quot;changedStr&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> str<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> list<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Tom</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">Tom</span> tom<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tom</span><span class="token punctuation">(</span><span class="token string">&quot;changed Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> tom<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>정답은 다음과 같다.</p><details><summary>정답</summary> origin Str / 1 / 1 / origin Tom </details><p>만약 <u>(나와 같이) 정답을 맞추지 못했다면</u> 포스트를 읽어보도록 하자.</p><h1 id="메모리-할당" tabindex="-1"><a class="header-anchor" href="#메모리-할당"><span>메모리 할당</span></a></h1><p>자바에서 선언하는 변수는 메모리에 저장된다. 런타임에 동적으로 변하는 메모리는 힙 메모리와 스택 메모리가 있다. Java 에는 원시 타입(Primitive Type) 과 객체 타입 (Object Type) 이 있는데 두 타입 간 메모리 할당 차이가 있다.</p><h2 id="원시-타입-primitive-type" tabindex="-1"><a class="header-anchor" href="#원시-타입-primitive-type"><span>원시 타입 (Primitive Type)</span></a></h2><p>다음과 같이 원시 타입 x,y 가 있다고 하자.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Primitive Value</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">boolean</span> y <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그러면 test 메서드가 호출될 때 해당 스레드의 스택 메모리에 다음과 같이 직접적으로 저장된다.</p><p><img src="`+o+`" alt="image-20250923155353003"></p><h2 id="객체-타입-object-type" tabindex="-1"><a class="header-anchor" href="#객체-타입-object-type"><span>객체 타입 (Object Type)</span></a></h2><p>하지만 원시 타입을 제외한 모든 타입은 실제 값이 Heap 메모리에 저장되고, 스택 메모리에는 주소값만 저장된다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Primitive Value</span></span>
<span class="line">    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">boolean</span> y <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  	<span class="token class-name">String</span> z <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 그 주소값은 힙메모리의 실제 주소를 가리킨다.</p><p><img src="`+u+`" alt="image-20250923155638205"></p><h1 id="pass-by-value-와-pass-by-reference" tabindex="-1"><a class="header-anchor" href="#pass-by-value-와-pass-by-reference"><span>Pass by Value 와 Pass by Reference</span></a></h1><p>Pass by Value (값에 의한 전달)과 Pass by Reference (참조에 의한 전달) 은 메서드의 파라미터로 복사된 데이터를 전달하느냐 실제 값을 전달하느냐의 차이이다.</p><h2 id="pass-by-value" tabindex="-1"><a class="header-anchor" href="#pass-by-value"><span>Pass by Value</span></a></h2><p>Pass By Value 는 복사된 데이터를 전달하여 구성함으로써, 값을 수정하여도 원본의 데이터에는 영향을 주지 않도록 하는 방식이다. 맨 처음 나왔던 문제 중 배열만 보겠다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      </span>
<span class="line">        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> originArr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">change</span><span class="token punctuation">(</span>originArr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>originArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> arr<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>먼저 change 를 호출하기 전 originArr 은 다음과 같이 보인다.</p><p><img src="`+r+'" alt="image-20250923160643918"></p><p>그리고 <code>change()</code> 메서드가 호출되면 호출한 코드의 &quot;돌아갈 위치&quot;인 Return Address 가 쌓이게 되고 그 위에 매개변수 등의 값이 쌓인다.</p><p><img src="'+d+'" alt="image-20250923160933872"></p><p>그리고 <code>arr = new int[] {3, 4};</code> 을 호출하게 되면 &quot;<strong>새로운 객체를 생성</strong>&quot;한 후 arr 위치에 집어넣게 된다. 여전히 originArr 은 1, 2 이다. 만약 여기서 arr 을 수정한다고 해도 (<code>arr[0] = 5</code>와 같이) <code>0x002</code> 주소의 배열값만 바뀌는 것이지 <code>0x001</code> 배열 값은 아무런 영향을 받지 않는다.</p><p><img src="'+k+'" alt="image-20250923161031064"></p><p>그리고 <code>change()</code> 메서드가 끝나면 arr 지역 변수만 스택 메모리에서 pop 되어 사라지게 된다. (초록색 부분이 사라짐)</p><p><img src="'+m+`" alt="image-20250923161302509"></p><p>따라서 arr 을 재할당한다고 하더라도 orginArr 의 실제 값에는 <strong>아무런 변화가 없다.</strong></p><p>자바는 모든 데이터를 Pass by Value 방식으로 전달한다. 그렇기 때문에 자바에서 어떤 객체가 파라미터로 전달되었을 때, 필드값에 접근하여 해당 값을 수정하는 것은 가능하지만 그 객체 자체는 변경 불가능하다.</p><p>위 예시처럼 <code>change()</code> 메서드가 종료되면 복제본 (0x002)은 소멸되고, arr 객체 자체에 변경사항이 있었다면 해당 부분은 반영되지 않는다.</p><h2 id="pass-by-reference" tabindex="-1"><a class="header-anchor" href="#pass-by-reference"><span>Pass By Reference</span></a></h2><p>Pass By Reference 는 주소 값을 전달하여 실제 값에 대한 Alias를 구성함으로써, 값을 수정하면 원본의 데이터가 수정되도록 하는 방식이다. C++에서는 해당 방식을 사용할 수 있다.</p><div class="language-c++ line-numbers-mode" data-highlighter="prismjs" data-ext="c++" data-title="c++"><pre><code><span class="line">#include &lt;iostream&gt;</span>
<span class="line">using namespace std;</span>
<span class="line"></span>
<span class="line">void change(int*&amp; arr) {</span>
<span class="line">    // 새로운 배열을 할당해서 arr 자체를 바꿈</span>
<span class="line">    arr = new int[2]{3, 4};</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">int main() {</span>
<span class="line">    int* originArr = new int[2]{1, 2};</span>
<span class="line"></span>
<span class="line">    change(originArr);</span>
<span class="line"></span>
<span class="line">    cout &lt;&lt; originArr[0] &lt;&lt; endl; // 출력: 3</span>
<span class="line"></span>
<span class="line">    // 동적 메모리 해제</span>
<span class="line">    delete[] originArr;</span>
<span class="line"></span>
<span class="line">    return 0;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 코드에서 <code>originArr[0]</code> 의 출력은 3 이 나오게 된다.</p><p><code>change()</code> 함수의 <code>int*&amp; arr</code> (포인터 참조 전달)은 스택 메모리에 따로 저장 되지 않는다. <code>arr</code>는 별칭(alias)이기 때문에, 스택에 &quot;arr=0x002&quot; 같은 슬롯이 생기지 않고, 컴파일러가 originArr를 직접 가리키도록 번역한다.</p><p>따라서 <code>arr = new int[2]{3, 4}</code> 가 실행 될 때 다음과 같이 동작된다.</p><p><img src="`+v+'" alt="image-20250923162538945"></p><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>Ref.</span></a></h1><ul><li><a href="https://medium.com/@samurai.stateless.coder/i-asked-50-java-developers-this-question-their-answers-will-shock-you-5964e9e5a2e3" target="_blank" rel="noopener noreferrer">https://medium.com/@samurai.stateless.coder/i-asked-50-java-developers-this-question-their-answers-will-shock-you-5964e9e5a2e3</a></li><li><a href="https://mangkyu.tistory.com/106" target="_blank" rel="noopener noreferrer">https://mangkyu.tistory.com/106</a></li></ul>',42)),s(p)])}const f=t(b,[["render",g],["__file","2025-09-23-referencevalue.html.vue"]]),w=JSON.parse('{"path":"/posts/java/2025-09-23-referencevalue.html","title":"자바 Pass By Value","lang":"en-US","frontmatter":{"title":"자바 Pass By Value","date":"2025-09-23T00:00:00.000Z","tags":["java","memory"],"description":"자바의 Pass by Value 에 대한 이해와 예시"},"headers":[{"level":1,"title":"메모리 할당","slug":"메모리-할당","link":"#메모리-할당","children":[{"level":2,"title":"원시 타입 (Primitive Type)","slug":"원시-타입-primitive-type","link":"#원시-타입-primitive-type","children":[]},{"level":2,"title":"객체 타입 (Object Type)","slug":"객체-타입-object-type","link":"#객체-타입-object-type","children":[]}]},{"level":1,"title":"Pass by Value 와 Pass by Reference","slug":"pass-by-value-와-pass-by-reference","link":"#pass-by-value-와-pass-by-reference","children":[{"level":2,"title":"Pass by Value","slug":"pass-by-value","link":"#pass-by-value","children":[]},{"level":2,"title":"Pass By Reference","slug":"pass-by-reference","link":"#pass-by-reference","children":[]}]},{"level":1,"title":"Ref.","slug":"ref","link":"#ref","children":[]}],"git":{},"filePathRelative":"_posts/java/2025-09-23-referencevalue.md"}');export{f as comp,w as data};
