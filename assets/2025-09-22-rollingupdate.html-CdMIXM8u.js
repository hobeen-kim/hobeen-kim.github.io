import{_ as c,c as u,a,b as s,d as r,f as l,r as t,o as d,e as p}from"./app-BfQgMSg5.js";const k="/images/2025-09-22-rollingupdate/KakaoTalk_Photo_2025-09-24-00-10-37.png",m={},v={class:"table-of-contents"};function b(y,n){const i=t("Header"),e=t("router-link"),o=t("Footer");return d(),u("div",null,[a(i),s("nav",v,[s("ul",null,[s("li",null,[a(e,{to:"#_1-문제-상황"},{default:l(()=>n[0]||(n[0]=[p("1. 문제 상황")])),_:1})]),s("li",null,[a(e,{to:"#_2-해결-전략"},{default:l(()=>n[1]||(n[1]=[p("2. 해결 전략")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#_2-1-deployment-pod-의-종료-절차-순서"},{default:l(()=>n[2]||(n[2]=[p("2.1 Deployment Pod 의 종료 절차 순서")])),_:1})]),s("li",null,[a(e,{to:"#_2-2-해결-방법"},{default:l(()=>n[3]||(n[3]=[p("2.2 해결 방법")])),_:1})]),s("li",null,[a(e,{to:"#_2-3-spring-boot-3-5-readinessstate-활용"},{default:l(()=>n[4]||(n[4]=[p("2.3 Spring Boot 3.5: ReadinessState 활용")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#코드-예시"},{default:l(()=>n[5]||(n[5]=[p("코드 예시")])),_:1})]),s("li",null,[a(e,{to:"#spring-boot-yml-설정"},{default:l(()=>n[6]||(n[6]=[p("Spring Boot yml 설정")])),_:1})])])]),s("li",null,[a(e,{to:"#_2-4-쿠버네티스-설정"},{default:l(()=>n[7]||(n[7]=[p("2.4 쿠버네티스 설정")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#deployment-yaml-설정"},{default:l(()=>n[8]||(n[8]=[p("deployment.yaml 설정")])),_:1})]),s("li",null,[a(e,{to:"#service-yaml-설정"},{default:l(()=>n[9]||(n[9]=[p("Service.yaml 설정")])),_:1})])])]),s("li",null,[a(e,{to:"#_2-5-전체-흐름"},{default:l(()=>n[10]||(n[10]=[p("2.5 전체 흐름")])),_:1})])])]),s("li",null,[a(e,{to:"#_3-개선된-그래프"},{default:l(()=>n[11]||(n[11]=[p("3. 개선된 그래프")])),_:1})])])]),n[12]||(n[12]=r(`<p>RollingUpdate 는 하나씩 파드를 교체하는 작업이다. 쿠버네티스 Deployment 리소스에서 다음과 같은 설정으로 RollingUpdate 를 할 수 있다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app</span>
<span class="line">  <span class="token key atrule">strategy</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate</span>
<span class="line">    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span> <span class="token comment"># 롤링 업데이트 중 동시에 “사용 불가” 상태가 될 수 있는 파드의 최대치</span></span>
<span class="line">      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span> <span class="token comment"># 롤링 업데이트 중 원하는 레플리카 수보다 “추가로” 생성될 수 있는 파드의 최대치</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_1-문제-상황" tabindex="-1"><a class="header-anchor" href="#_1-문제-상황"><span>1. 문제 상황</span></a></h1><p>쿠버네티스에서 Deployment를 RollingUpdate 방식으로 업데이트하면 다음 순서로 진행된다.</p><ol><li>기존 Pod에 <strong>SIGTERM</strong> 신호가 전달된다.</li><li>Pod는 종료 절차를 밟는다.</li><li>하지만 이 시점에도 로드밸런서(ALB)는 헬스체크가 200 ok 이므로 해당 Pod로 트래픽을 보낼 수 있다.</li><li>결과적으로 종료 중인 Pod에 들어간 요청이 실패하면서 에러가 발생한다.</li></ol><blockquote><p>헬스체크가 200 ok 인 이유는 ALB 가 10초 동안 2번의 health check 를 실패해야 파드를 대상에서 제외하기 때문이다. 10초, 2번은 커스텀한 설정이다.</p></blockquote><h1 id="_2-해결-전략" tabindex="-1"><a class="header-anchor" href="#_2-해결-전략"><span>2. 해결 전략</span></a></h1><h2 id="_2-1-deployment-pod-의-종료-절차-순서" tabindex="-1"><a class="header-anchor" href="#_2-1-deployment-pod-의-종료-절차-순서"><span>2.1 Deployment Pod 의 종료 절차 순서</span></a></h2><p>우선 Pod 의 종료 절차를 확인해보자.</p><ol><li><p><strong>쿠버네티스가 Pod 종료 결정</strong></p><ul><li><code>kubectl delete pod</code>, <code>RollingUpdate</code>, Scale-in 등</li></ul></li><li><p><strong>preStop hook 실행 (있다면)</strong></p><ul><li><p>먼저 정의된 <code>preStop</code> hook 실행</p></li><li><p>이 hook이 끝날 때까지 <strong>grace period 타이머도 함께 흐름</strong></p></li></ul></li><li><p><strong>컨테이너에 SIGTERM 전달</strong></p><ul><li><p>kubelet이 각 컨테이너 프로세스에 <code>SIGTERM</code> 시그널 전달</p></li><li><p>이때 애플리케이션은 shutdown hook, <code>@PreDestroy</code>, Spring Boot의 <code>ContextClosedEvent</code> 등을 활용해 정리 로직 수행 가능</p></li></ul></li><li><p><strong>grace period 대기 (<code>terminationGracePeriodSeconds</code>)</strong></p><ul><li><p>Pod는 <code>Terminating</code> 상태로 바뀜</p></li><li><p>설정한 초 수 만큼 애플리케이션이 정상적으로 종료할 시간을 줌</p></li></ul></li><li><p><strong>시간 내 종료하지 않으면 SIGKILL</strong></p><ul><li><code>terminationGracePeriodSeconds</code> 안에 프로세스가 종료되지 않으면 kubelet이 <code>SIGKILL</code> 보내서 강제 종료</li></ul></li></ol><h2 id="_2-2-해결-방법" tabindex="-1"><a class="header-anchor" href="#_2-2-해결-방법"><span>2.2 해결 방법</span></a></h2><p>따라서 Pod 종료 시점에 다음 단계를 밟도록 한다.</p><ol><li><strong>SIGTERM 전달 이후 Readiness 상태를 DOWN으로 변경</strong><ul><li>Pod가 더 이상 트래픽을 받지 않도록 한다.</li></ul></li><li><strong>로드밸런서에서 Pod를 제거</strong><ul><li>readinessProbe 실패를 감지한 LB가 해당 Pod를 라우팅 대상에서 제외한다.</li></ul></li><li><strong>진행 중인 요청은 마저 처리</strong><ul><li><code>terminationGracePeriodSeconds</code> 동안 기존 요청을 안전하게 끝낸다.</li></ul></li><li><strong>Pod 종료</strong></li></ol><h2 id="_2-3-spring-boot-3-5-readinessstate-활용" tabindex="-1"><a class="header-anchor" href="#_2-3-spring-boot-3-5-readinessstate-활용"><span>2.3 Spring Boot 3.5: ReadinessState 활용</span></a></h2><p>Spring Boot 에서 <code>ReadinessState</code>, <code>LivenessState</code>를 기반으로 쿠버네티스와 잘 통합할 수 있다. 종료 이벤트 시 <code>ReadinessState.REFUSING_TRAFFIC</code> 으로 상태를 바꾸면 <code>/actuator/health/readiness</code>가 <strong>DOWN</strong> 을 반환한다.</p><blockquote><p>아래 설정을 위해서 actuator 디펜던시를 추가해야 한다.</p></blockquote><h3 id="코드-예시" tabindex="-1"><a class="header-anchor" href="#코드-예시"><span>코드 예시</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>availability<span class="token punctuation">.</span></span><span class="token class-name">AvailabilityChangeEvent</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>availability<span class="token punctuation">.</span></span><span class="token class-name">ReadinessState</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EventListener</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ContextClosedEvent</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShutdownReadinessListener</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@EventListener</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onShutdown</span><span class="token punctuation">(</span><span class="token class-name">ContextClosedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Pod 종료 이벤트 시 readiness를 REFUSING_TRAFFIC으로 변경</span></span>
<span class="line">        <span class="token class-name">AvailabilityChangeEvent</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ReadinessState</span><span class="token punctuation">.</span><span class="token constant">REFUSING_TRAFFIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;&gt;&gt; Readiness set to REFUSING_TRAFFIC (Pod removed from LB)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spring-boot-yml-설정" tabindex="-1"><a class="header-anchor" href="#spring-boot-yml-설정"><span>Spring Boot yml 설정</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">management</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">web</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">exposure</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">include</span><span class="token punctuation">:</span> health<span class="token punctuation">,</span> readiness<span class="token punctuation">,</span> liveness</span>
<span class="line">  <span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9404</span></span>
<span class="line">  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">health</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">probes</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-쿠버네티스-설정" tabindex="-1"><a class="header-anchor" href="#_2-4-쿠버네티스-설정"><span>2.4 쿠버네티스 설정</span></a></h2><h3 id="deployment-yaml-설정" tabindex="-1"><a class="header-anchor" href="#deployment-yaml-설정"><span>deployment.yaml 설정</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token punctuation">...</span></span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">...</span></span>
<span class="line">      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment"># Pod가 종료될 때 컨테이너가 정상적으로 종료할 수 있도록 기다려주는 시간(초), SIGTERM 이후</span></span>
<span class="line">      <span class="token key atrule">containers</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app</span>
<span class="line">          <span class="token punctuation">...</span></span>
<span class="line">          <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span></span>
<span class="line">              <span class="token key atrule">path</span><span class="token punctuation">:</span> /actuator/health/readiness</span>
<span class="line">              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9404</span></span>
<span class="line">            <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">45</span></span>
<span class="line">            <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span></span>
<span class="line">            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span></span>
<span class="line">            <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">            <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">3</span></span>
<span class="line">          <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span></span>
<span class="line">              <span class="token key atrule">path</span><span class="token punctuation">:</span> /actuator/health/liveness</span>
<span class="line">              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9404</span></span>
<span class="line">            <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">45</span></span>
<span class="line">            <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span></span>
<span class="line">            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span></span>
<span class="line">            <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">            <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">3</span></span>
<span class="line">      <span class="token punctuation">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="service-yaml-설정" tabindex="-1"><a class="header-anchor" href="#service-yaml-설정"><span>Service.yaml 설정</span></a></h3><p>해당 service 는 ingress (ALB) 가 라우팅한다. 여기서 ALB 의 health path 를 정할 수 있다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app<span class="token punctuation">-</span>service</span>
<span class="line">  <span class="token key atrule">annotations</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">alb.ingress.kubernetes.io/healthcheck-path</span><span class="token punctuation">:</span> /actuator/health</span>
<span class="line">  <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app</span>
<span class="line">  <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span></span>
<span class="line">      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span></span>
<span class="line">      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP</span>
<span class="line">  <span class="token key atrule">type</span><span class="token punctuation">:</span> CluterIP</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-5-전체-흐름" tabindex="-1"><a class="header-anchor" href="#_2-5-전체-흐름"><span>2.5 전체 흐름</span></a></h2><ol><li>RollingUpdate 시작 → 기존 Pod에 SIGTERM 전달</li><li>Spring Boot가 <code>ReadinessState</code>를 <code>REFUSING_TRAFFIC</code> 으로 변경</li><li><code>/actuator/health/readiness</code> → DOWN 반환</li><li>readinessProbe 실패 → LB가 Pod를 트래픽 대상에서 제외</li><li>진행 중이던 요청 처리 완료</li><li>Pod 종료</li></ol><h1 id="_3-개선된-그래프" tabindex="-1"><a class="header-anchor" href="#_3-개선된-그래프"><span>3. 개선된 그래프</span></a></h1><p>아래 그래프에서 파란색은 success, 노란색은 error 개수이다. 배포 간 (rollingUpdate 간) <code>/health</code> 에 지속적으로 요청을 보내는 2번의 테스트를 5분 가량 진행했다. (그래프가 2개로 나눠진 걸 볼 수 있다.) 첫번째 테스트는 무중단 배포 전략을 넣기 전이고 두번째 테스트는 모든 설정을 적용한 상태이다. 첫번째 테스트에서는 error (502) 의 개수가 중간에 생긴다. 이는 파드가 교체되면서 terminating 되는 파드로 인입되는 요청에 대한 에러이다. <strong>반면에 두번째 테스트는 error 가 보이지 않는다.</strong></p><p><img src="`+k+'" alt="KakaoTalk_Photo_2025-09-24-00-10-37"></p>',31)),a(o)])}const h=c(m,[["render",b],["__file","2025-09-22-rollingupdate.html.vue"]]),_=JSON.parse('{"path":"/posts/infra/2025-09-22-rollingupdate.html","title":"쿠버네티스 무중단 RollingUpdate","lang":"en-US","frontmatter":{"title":"쿠버네티스 무중단 RollingUpdate","date":"2025-09-22T00:00:00.000Z","tags":["kubenetes","update"],"description":"쿠버네티스 무중단 배포"},"headers":[{"level":1,"title":"1. 문제 상황","slug":"_1-문제-상황","link":"#_1-문제-상황","children":[]},{"level":1,"title":"2. 해결 전략","slug":"_2-해결-전략","link":"#_2-해결-전략","children":[{"level":2,"title":"2.1 Deployment Pod 의 종료 절차 순서","slug":"_2-1-deployment-pod-의-종료-절차-순서","link":"#_2-1-deployment-pod-의-종료-절차-순서","children":[]},{"level":2,"title":"2.2 해결 방법","slug":"_2-2-해결-방법","link":"#_2-2-해결-방법","children":[]},{"level":2,"title":"2.3 Spring Boot 3.5: ReadinessState 활용","slug":"_2-3-spring-boot-3-5-readinessstate-활용","link":"#_2-3-spring-boot-3-5-readinessstate-활용","children":[{"level":3,"title":"코드 예시","slug":"코드-예시","link":"#코드-예시","children":[]},{"level":3,"title":"Spring Boot yml 설정","slug":"spring-boot-yml-설정","link":"#spring-boot-yml-설정","children":[]}]},{"level":2,"title":"2.4 쿠버네티스 설정","slug":"_2-4-쿠버네티스-설정","link":"#_2-4-쿠버네티스-설정","children":[{"level":3,"title":"deployment.yaml 설정","slug":"deployment-yaml-설정","link":"#deployment-yaml-설정","children":[]},{"level":3,"title":"Service.yaml 설정","slug":"service-yaml-설정","link":"#service-yaml-설정","children":[]}]},{"level":2,"title":"2.5 전체 흐름","slug":"_2-5-전체-흐름","link":"#_2-5-전체-흐름","children":[]}]},{"level":1,"title":"3. 개선된 그래프","slug":"_3-개선된-그래프","link":"#_3-개선된-그래프","children":[]}],"git":{},"filePathRelative":"_posts/infra/2025-09-22-rollingupdate.md"}');export{h as comp,_ as data};
