import{_ as c,c as r,a,b as s,d as u,f as e,r as o,o as d,e as p}from"./app-dXp5MBUq.js";const k="/images/2025-10-22-eventhandler/image-20251022153303967.png",v="/images/2025-10-22-eventhandler/image-20251022183706517.png",m="/images/2025-10-22-eventhandler/image-20251022191334335.png",g="/images/2025-10-22-eventhandler/image-20251022192641599.png",b={},f={class:"table-of-contents"};function h(P,n){const i=o("Header"),t=o("router-link"),l=o("Footer");return d(),r("div",null,[a(i),s("nav",f,[s("ul",null,[s("li",null,[a(t,{to:"#_1-문제-상황"},{default:e(()=>n[0]||(n[0]=[p("1. 문제 상황")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#문제점"},{default:e(()=>n[1]||(n[1]=[p("문제점")])),_:1})])])]),s("li",null,[a(t,{to:"#_2-해결"},{default:e(()=>n[2]||(n[2]=[p("2. 해결")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#transactionaleventlistener-사용"},{default:e(()=>n[3]||(n[3]=[p("@TransactionalEventListener 사용")])),_:1})]),s("li",null,[a(t,{to:"#propagation-requires-new-사용"},{default:e(()=>n[4]||(n[4]=[p("Propagation.REQUIRES_NEW 사용")])),_:1})])])]),s("li",null,[a(t,{to:"#결론"},{default:e(()=>n[5]||(n[5]=[p("결론")])),_:1})]),s("li",null,[a(t,{to:"#ref"},{default:e(()=>n[6]||(n[6]=[p("Ref.")])),_:1})])])]),n[7]||(n[7]=u('<p>중심적인 도메인과 관련없는 도메인을 ApplicationEventPublisher 을 이용하여 이벤트를 발행해 분리시켜보자.</p><h1 id="_1-문제-상황" tabindex="-1"><a class="header-anchor" href="#_1-문제-상황"><span>1. 문제 상황</span></a></h1><p>다음과 같이 Post 를 생성하면 **<u>알림 서비스로 알림을 생성하는 코드</u>**가 있다.</p><p><img src="'+k+`" alt="image-20251022153303967"></p><p>그럼 다음과 같이 코드를 짤 수 있다.</p><p><strong>NotificationService</strong></p><p>알림을 보내는 역할을 한다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Service</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">NotificationService</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> notificationRepository<span class="token operator">:</span> NotificationRepository<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//알림발송 대신 알림저장으로 일단 구현했다.</span></span>
<span class="line">  	<span class="token annotation builtin">@Transactional</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">notifyPostCreate</span><span class="token punctuation">(</span>event<span class="token operator">:</span> PostCreateEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> content <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">event<span class="token punctuation">.</span>postId</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> notified: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">event<span class="token punctuation">.</span>title</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">event<span class="token punctuation">.</span>content</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line">        </span>
<span class="line">        notificationRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span></span>
<span class="line">            Notification<span class="token punctuation">.</span><span class="token function">createNotification</span><span class="token punctuation">(</span>content <span class="token operator">=</span> content<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>PostService</strong></p><p>포스트를 생성하고 알림을 요청한다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Service</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">PostService</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> postRepository<span class="token operator">:</span> PostRepository<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> notificationService<span class="token operator">:</span> NotificationService<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation builtin">@Transactional</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">createPost</span><span class="token punctuation">(</span>dto<span class="token operator">:</span> PostCreateApiDto<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> post <span class="token operator">=</span> Post<span class="token punctuation">.</span><span class="token function">createPost</span><span class="token punctuation">(</span></span>
<span class="line">            title <span class="token operator">=</span> dto<span class="token punctuation">.</span>title<span class="token punctuation">,</span></span>
<span class="line">            content <span class="token operator">=</span> dto<span class="token punctuation">.</span>content<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">val</span> savedPost <span class="token operator">=</span> postRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        notificationService<span class="token punctuation">.</span><span class="token function">notifyPostCreate</span><span class="token punctuation">(</span>PostCreateEvent<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>savedPost<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> savedPost<span class="token punctuation">.</span>postId</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="문제점" tabindex="-1"><a class="header-anchor" href="#문제점"><span>문제점</span></a></h2><p>여기엔 다음과 같은 문제점이 있다.</p><ol><li>notification 요청 코드가 실패하면 post 생성도 실패한다.</li><li>Post 입장에서 notification 전송과 강력하게 결합된다.</li></ol><p>1번 문제는 비동기로 호출하면 해결할 수 있다. 하지만 2번 문제는 <strong>비동기 호출만으로는 결합 문제가 해소되지 않는다.</strong> 비동기 호출을 <code>createPost()</code> 내부에서 트랜잭션 커밋 전에 실행하면, 알림에서 조회 시점/격리 문제도 생길 수 있다. <strong>결합 해소는 이벤트 발행으로, 롤백 경계 분리는 트랜잭션 전파로</strong> 설계해야 한다.</p><h1 id="_2-해결" tabindex="-1"><a class="header-anchor" href="#_2-해결"><span>2. 해결</span></a></h1><p>아래와 같이 <strong>Spring Application Event</strong> 를 활용해서 Post 와 Notification 을 구분해보자.</p><p><img src="`+v+`" alt="image-20251022183706517"></p><p>Post 에서는 아래 방법으로 **&quot;post 가 생성되었다&quot;**는 이벤트만 발행한다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Transactional</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">createPost</span><span class="token punctuation">(</span>dto<span class="token operator">:</span> PostCreateApiDto<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> saved <span class="token operator">=</span> postRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>Post<span class="token punctuation">.</span><span class="token function">createPost</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>title<span class="token punctuation">,</span> dto<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    applicationEventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>PostCreatedEvent<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>saved<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> saved<span class="token punctuation">.</span>postId</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 Notification 에서는 <code>@EventListener</code> 로 이벤트를 구독한다.</p><blockquote><p><strong>발행 이벤트는 &quot;&quot;무엇이 일어났다(사실)&quot;를 표현</strong>해야 한다. 예) <code>PostCreatedEvent(postId, title, ...)</code> “알림을 발송하라” 같은 <strong>행동 지시</strong>는 Post 와 Notification 의 논리적인 의존성을 남긴다.</p></blockquote><p>하지만 이 경우에도 Notification 이 실패할 경우 Post 의 트랜잭션 또한 롤백될 수 있는데, 이는 @EventListener는 동기 실행이라, 리스너 예외가 퍼블리셔 트랜잭션을 롤백시키기 때문이다. 따라서 Post와 Notification 을 논리적으로 분리하더라도 물리(트랜잭션)적으로 결합된다. (<s>논리적으로 분리되면서 물리적으로 묶이는 아이러니</s>)</p><p><img src="`+m+`" alt="image-20251022191334335"></p><h2 id="transactionaleventlistener-사용" tabindex="-1"><a class="header-anchor" href="#transactionaleventlistener-사용"><span>@TransactionalEventListener 사용</span></a></h2><p><code>@TransactionalEventListener</code> 는 이벤트가 트랜잭션 안에서 발행된 경우에만 동작한다(기본 fallbackExecution=false). 기본 값은 AFTER_COMMIT 이며, 이 경우 퍼블리셔 트랜잭션이 커밋된 뒤 리스너가 호출된다. 트랜잭션 밖에서 발행되면 리스너는 호출되지 않는다. 필요 시 @TransactionalEventListener(fallbackExecution = true) 로 비트랜잭션 상황도 처리할 수 있다(즉시 실행).</p><p><code>NotificationService</code> 에서 다음과 같이 사용할 수 있다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@Service</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token function">NotificationService</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> notificationRepository<span class="token operator">:</span> NotificationRepository<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">		<span class="token annotation builtin">@TransactionalEventListener</span><span class="token punctuation">(</span>phase <span class="token operator">=</span> TransactionPhase<span class="token punctuation">.</span>AFTER_COMMIT<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">notifyPostCreate</span><span class="token punctuation">(</span>event<span class="token operator">:</span> PostCreateEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> content <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">event<span class="token punctuation">.</span>postId</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> notified: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">event<span class="token punctuation">.</span>title</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">event<span class="token punctuation">.</span>content</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line"></span>
<span class="line">        notificationRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span></span>
<span class="line">            Notification<span class="token punctuation">.</span><span class="token function">createNotification</span><span class="token punctuation">(</span>content <span class="token operator">=</span> content<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 &quot;<strong>이벤트 발행자의 트랜잭션이 커밋된 이후에만 notifyPostCreate 이 호출</strong>&quot;된다. 따라서 Post 의 저장은 알림 서비스의 실패와 관계없이 보장된다고 할 수 있다.</p><p>참고로 TransactionalEventListener 의 phase 값은 다음과 같다.</p><ul><li><strong>TransactionPhase.BEFORE_COMMIT</strong> : 트랜잭션 commit 직전에 수행</li><li><strong>TransactionPhase.AFTER_COMMIT</strong>(기본값) : 트랜잭션 commit 직후에 수행</li><li><strong>TransactionPhase.AFTER_ROLLBACK</strong> : 트랜잭션 rollback 직후 수행</li><li><strong>TransactionPhase.AFTER_COMPLETION</strong> : 트랜잭션이 완료된 후 수행 (commit 또는 rollback)</li></ul><p>여기서 주의할 건 트랜잭션 컨텍스트 내에서 수행되므로 <strong>트랜잭션이 없다면 리스너가 동작하지 않는다.</strong></p><h2 id="propagation-requires-new-사용" tabindex="-1"><a class="header-anchor" href="#propagation-requires-new-사용"><span>Propagation.REQUIRES_NEW 사용</span></a></h2><p>하지만 여기서 또 문제가 생긴다. post 에서 트랜잭션이 커밋되었으므로 notification 에서는 트랜잭션이 퍼블리셔와 동일하지 않다. 따라서 notifyPostCreate() 내에서 원하는 서비스 단위의 커밋 및 롤백이 보장되지 않게 된다. 이를 해결하기 위해 <code>Propagation</code> 옵션을 줄 수 있다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token annotation builtin">@TransactionalEventListener</span><span class="token punctuation">(</span>phase <span class="token operator">=</span> TransactionPhase<span class="token punctuation">.</span>AFTER_COMMIT<span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation builtin">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRES_NEW<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">fun</span> <span class="token function">notifyPostCreate</span><span class="token punctuation">(</span>event<span class="token operator">:</span> PostCreateEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> content <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">event<span class="token punctuation">.</span>postId</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> notified: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">event<span class="token punctuation">.</span>title</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">event<span class="token punctuation">.</span>content</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line"></span>
<span class="line">    notificationRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span></span>
<span class="line">        Notification<span class="token punctuation">.</span><span class="token function">createNotification</span><span class="token punctuation">(</span>content <span class="token operator">=</span> content<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="결론" tabindex="-1"><a class="header-anchor" href="#결론"><span>결론</span></a></h1><p>최종적으로 아래와 같이 만들어진다.</p><p><img src="`+g+'" alt="image-20251022192641599"></p><ul><li>Post 가 이벤트를 발행하고 Notification 이 수신하여 처리한다.</li><li><strong>Post 트랜잭션(작성)과 Notification 트랜잭션(알림 저장)은 <code>AFTER_COMMIT + REQUIRES_NEW</code>로 분리</strong>된다. <ul><li>Post 실패 → 이벤트 미발행(알림 시도 없음)</li><li>Notification 실패 → Post 커밋 유지, 알림만 롤백 및 재처리 전략으로 보완</li></ul></li><li>Post 가 실패하면 이벤트가 발행되지 않는다.</li></ul><h1 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>Ref.</span></a></h1><ul><li><a href="https://techblog.woowahan.com/7835/" target="_blank" rel="noopener noreferrer">회원시스템 이벤트기반 아키텍처 구축하기</a></li></ul>',41)),a(l)])}const y=c(b,[["render",h],["__file","2025-10-22-eventhandler.html.vue"]]),_=JSON.parse('{"path":"/posts/spring/2025-10-22-eventhandler.html","title":"SpringEvent 에서 트랜잭션 범위 설정","lang":"en-US","frontmatter":{"title":"SpringEvent 에서 트랜잭션 범위 설정","date":"2025-10-22T00:00:00.000Z","tags":["ApplicationEventPublisher"],"description":"이벤트를 발행할 때 반드시 보장되어야할 행동과 그렇지 않은 행동을 구분해서 개발"},"headers":[{"level":1,"title":"1. 문제 상황","slug":"_1-문제-상황","link":"#_1-문제-상황","children":[{"level":2,"title":"문제점","slug":"문제점","link":"#문제점","children":[]}]},{"level":1,"title":"2. 해결","slug":"_2-해결","link":"#_2-해결","children":[{"level":2,"title":"@TransactionalEventListener 사용","slug":"transactionaleventlistener-사용","link":"#transactionaleventlistener-사용","children":[]},{"level":2,"title":"Propagation.REQUIRES_NEW 사용","slug":"propagation-requires-new-사용","link":"#propagation-requires-new-사용","children":[]}]},{"level":1,"title":"결론","slug":"결론","link":"#결론","children":[]},{"level":1,"title":"Ref.","slug":"ref","link":"#ref","children":[]}],"git":{},"filePathRelative":"_posts/spring/2025-10-22-eventhandler.md"}');export{y as comp,_ as data};
