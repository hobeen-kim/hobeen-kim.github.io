import{_ as s,c as n,d as e,o as p}from"./app-6M4v-pIF.js";const t={};function l(i,a){return p(),n("div",null,a[0]||(a[0]=[e(`<h1 id="_1-app-검색-부하테스트" tabindex="-1"><a class="header-anchor" href="#_1-app-검색-부하테스트"><span>1. App 검색 부하테스트</span></a></h1><h2 id="_1-1-테스트-조건" tabindex="-1"><a class="header-anchor" href="#_1-1-테스트-조건"><span>1.1 테스트 조건</span></a></h2><ul><li>Vuser 100개</li><li>초당 API 를 1개씩 호출 -&gt; 100RPS</li></ul><p><strong>테스트 API</strong></p><ul><li>/apps?searchTerm=app&amp;page={page}</li><li>/apps?searchTerm=app&amp;categoryCode={categoryCode}&amp;page={page}</li><li>/apps/{appId}</li></ul><p><strong>초기 CPU, Memory</strong></p><ul><li>8 CPU, 20GiB memory <ul><li>m6g.xlarge, c6g.xlarge</li><li>pod(container) 의 limit 는 1 cpu, 1GiB memory</li><li>총 3개의 파드 -&gt; 3 cpu, 1GiB 점유중</li></ul></li></ul><p><strong>데이터베이스</strong></p><ul><li>r6g.large 1대 <ul><li>2 CPU, 16GiB</li></ul></li></ul><h2 id="_1-2-테스트-결과" tabindex="-1"><a class="header-anchor" href="#_1-2-테스트-결과"><span>1.2 테스트 결과</span></a></h2><h3 id="_1-2-1-response-time" tabindex="-1"><a class="header-anchor" href="#_1-2-1-response-time"><span>1.2.1 Response Time</span></a></h3><p>![Screenshot 2025-09-26 at 10.16.27 AM](/images/Untitled 1/Screenshot 2025-09-26 at 10.16.27 AM.png)</p><p>p95 기준으로 결과는 3개로 나눠진다.</p><ul><li>/apps?searchTerm=app&amp;page={page} : 1.5 ~ 1.6s</li><li>/apps?searchTerm=app&amp;categoryCode={categoryCode}&amp;page={page} : 500 ~ 600ms</li><li>/apps/{appId} : 40ms ~ 200ms</li></ul><h3 id="_1-2-2-cpu-및-메모리-사용률" tabindex="-1"><a class="header-anchor" href="#_1-2-2-cpu-및-메모리-사용률"><span>1.2.2 CPU 및 메모리 사용률</span></a></h3><p><strong>Total</strong></p><p>![image-20250926102225204](/images/Untitled 1/image-20250926102225204.png)</p><p>전체 CPU, Memory 는 늘어나지 않았다 -&gt; 노드의 추가적인 증설은 없었다.</p><p><strong>사용률</strong></p><p>![image-20250926102103705](/images/Untitled 1/image-20250926102103705.png)</p><h3 id="image-20250926102129458-images-untitled-1-image-20250926102129458-png" tabindex="-1"><a class="header-anchor" href="#image-20250926102129458-images-untitled-1-image-20250926102129458-png"><span>![image-20250926102129458](/images/Untitled 1/image-20250926102129458.png)</span></a></h3><p>CPU, Memory 사용량도 안정적이다.</p><h3 id="_1-2-3-데이터베이스-지표" tabindex="-1"><a class="header-anchor" href="#_1-2-3-데이터베이스-지표"><span>1.2.3 데이터베이스 지표</span></a></h3><p><strong>커넥션</strong></p><p>![image-20250926103151261](/images/Untitled 1/image-20250926103151261.png)</p><p>connections_acquire_seconds 가 최대 400 ~ 500ms 까지 늘어났다.</p><ol><li><strong>idle 커넥션이 0이 된 적은 없음</strong><ul><li>즉, 항상 즉시 사용할 수 있는 커넥션이 남아 있었다는 뜻</li><li>풀 사이즈(150)에 비해 idle이 수십 개 남아 있었음</li><li>보통 <code>idle=0</code>일 때 acquire 대기시간이 급격히 늘어나는데, 지금은 그건 아닌 듯 하다.</li></ul></li><li>그런데도 <strong>acquire 시간이 300~400ms</strong>까지 치솟음 <ul><li>풀 고갈 때문은 아니고,</li><li>원인은 &quot;풀에 커넥션이 없어서 대기&quot;가 아니라, 풀에서 커넥션을 빌려오고 실제 DB 연결을 확인하는 과정에서 지연이 발생했을 가능성이 크다.</li><li>예: DB 서버가 바빠서 <code>validationQuery</code> 응답이 느림, 네트워크 레이턴시 증가, 혹은 DB 자체 응답 지연</li></ul></li></ol><p><strong>DB CPU</strong></p><p>![image-20250926103310534](/images/Untitled 1/image-20250926103310534.png)</p><p>DB CPU 는 78% 까지 올라갔다.</p><p><strong>DB Waits</strong></p><p>![image-20250926103624084](/images/Untitled 1/image-20250926103624084.png)</p><p>DB 자체의 부하때문에 쿼리 응답이 지연되었다고 판단</p><p><strong>Top SQL</strong></p><p>![image-20250926105137029](/images/Untitled 1/image-20250926105137029.png)</p><p>AAS 가 높은 SQL 은 역시 아래 순서대로의 SQL 문임</p><ul><li>/apps?searchTerm=app&amp;page={page}</li><li>/apps?searchTerm=app&amp;categoryCode={categoryCode}&amp;page={page}</li><li>/apps/{appId}</li></ul><h2 id="_3-1-해결" tabindex="-1"><a class="header-anchor" href="#_3-1-해결"><span>3.1 해결</span></a></h2><p>해결 방법은 쿼리 최적화밖에 없으나, 현재 쿼리가 복잡하지 않아 인스턴스 증설까지 염두에 둔다.</p><h3 id="_3-1-1-해결-1-쿼리-수정" tabindex="-1"><a class="header-anchor" href="#_3-1-1-해결-1-쿼리-수정"><span>3.1.1 해결 1: 쿼리 수정</span></a></h3><p>앱 검색 시 불필요한 join 을 제거한다.</p><p><strong>수정 전 쿼리</strong></p><p>category_code 로 찾는 경우도 있어서 기본적으로 app_category 와 조인하였으나, 동적으로 join 하도록 변경했다.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> </span>
<span class="line"><span class="token keyword">from</span> app </span>
<span class="line"><span class="token keyword">join</span> <span class="token keyword">public</span><span class="token punctuation">.</span>app_category ac <span class="token keyword">on</span> app<span class="token punctuation">.</span>app_category_id <span class="token operator">=</span> ac<span class="token punctuation">.</span>app_category_id</span>
<span class="line"><span class="token keyword">where</span> lower<span class="token punctuation">(</span>app<span class="token punctuation">.</span>app_name<span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">&#39;%app%&#39;</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;RELEASED&#39;</span></span>
<span class="line"><span class="token keyword">order</span> <span class="token keyword">by</span> app<span class="token punctuation">.</span>released_at <span class="token keyword">desc</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>created_at <span class="token keyword">desc</span> <span class="token keyword">limit</span> ? <span class="token keyword">offset</span> ?<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>수정 후 쿼리</strong></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> </span>
<span class="line"><span class="token keyword">from</span> app </span>
<span class="line"><span class="token keyword">where</span> lower<span class="token punctuation">(</span>app<span class="token punctuation">.</span>app_name<span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">&#39;%app%&#39;</span> <span class="token operator">and</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">&#39;RELEASED&#39;</span></span>
<span class="line"><span class="token keyword">order</span> <span class="token keyword">by</span> app<span class="token punctuation">.</span>released_at <span class="token keyword">desc</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>created_at <span class="token keyword">desc</span> <span class="token keyword">limit</span> ? <span class="token keyword">offset</span> ?<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-1-1-1-response-time" tabindex="-1"><a class="header-anchor" href="#_3-1-1-1-response-time"><span>3.1.1.1 Response Time</span></a></h4><p>![image-20250926112253036](/images/Untitled 1/image-20250926112253036.png)</p><p><strong>p95 기준 1.3s ~ 1.4s 로 개선되었으나 아직 1s 이상이다.</strong></p><h4 id="_3-1-1-2-데이터-베이스-지표" tabindex="-1"><a class="header-anchor" href="#_3-1-1-2-데이터-베이스-지표"><span>3.1.1.2 데이터 베이스 지표</span></a></h4><p>![image-20250926112057758](/images/Untitled 1/image-20250926112057758.png)</p><p>avg latency (ms) 가 291ms 에서 228ms 로 줄어들었음. CPU 사용률도 74% 정도로 개선되었으나 충분하지 않음</p><h3 id="_3-1-2-해결-2-projection-사용과-category-cache" tabindex="-1"><a class="header-anchor" href="#_3-1-2-해결-2-projection-사용과-category-cache"><span>3.1.2 해결 2: Projection 사용과 Category Cache</span></a></h3><p>app 전체만 가져오는 게 아니라 Response 에 필요한 데이터만 추출한다.</p><p>필요한 데이터를 AppSummaryData 로 가져온다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">class</span> AppSummaryData <span class="token annotation builtin">@QueryProjection</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">val</span> appId<span class="token operator">:</span> Long<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> appName<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> shortDescription<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> mainImage<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> appCategoryId<span class="token operator">:</span> Long<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> pricingType<span class="token operator">:</span> PricingType<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> price<span class="token operator">:</span> Float<span class="token operator">?</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> discount<span class="token operator">:</span> Float<span class="token operator">?</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그러면 SQL 은 아래와 같이 나간다.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> app_id<span class="token punctuation">,</span> app_name<span class="token punctuation">,</span> short_description<span class="token punctuation">,</span> main_image<span class="token punctuation">,</span> app_category_id<span class="token punctuation">,</span> pricing_type<span class="token punctuation">,</span> price<span class="token punctuation">,</span> discount </span>
<span class="line"><span class="token keyword">from</span> app</span>
<span class="line"><span class="token keyword">where</span> <span class="token keyword">status</span><span class="token operator">=</span> ? </span>
<span class="line"><span class="token keyword">order</span> <span class="token keyword">by</span> app<span class="token punctuation">.</span>released_at <span class="token keyword">desc</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>created_at <span class="token keyword">desc</span> <span class="token keyword">limit</span> ? <span class="token keyword">offset</span> ?<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>하지만 이렇게 하면 appCategory 정보를 lazy loading 으로 가져올 수 없다.</p><p>방법은 2가지인데 AppSummaryData 에 category 정보를 포함한 다음 마찬가지로 AppCategory 와 join 을 한다. 다른 방법은 AppCategory 정보를 메모리에 가지고 있는 것이다.</p><p>나는 AppCategory 정보를 메모리에 넣었는데, 그 이유는 AppCategory 테이블의 row 수가 3개에 불과하기 때문이다. 다만 데이터를 모델링할 때 AppCategory 에도 여러 정보가 포함될 수 있고, 동적으로 수정이 편하게 하려고 Enum 이 아닌 DB 테이블로 관리하고 있다.</p><p>따라서 아래와 같은 클래스를 만든다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token function">AppCategoryService</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> appCategoryRepository<span class="token operator">:</span> AppCategoryRepository<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> appCategoryCache<span class="token operator">:</span> HashMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> AppCategory<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span> <span class="token punctuation">{</span></span>
<span class="line">        appCategoryRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> appCategoryCache<span class="token punctuation">[</span>it<span class="token punctuation">.</span>appCategoryId<span class="token operator">!!</span><span class="token punctuation">]</span> <span class="token operator">=</span> it <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">getAppCategory</span><span class="token punctuation">(</span>categoryId<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> AppCategory <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">				<span class="token keyword">return</span> appCategoryCache<span class="token punctuation">[</span>categoryId<span class="token punctuation">]</span> <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">AppCategoryNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>최초 로딩 시 appCategoryRepository 에서 모든 카테고리를 HashMap 에 넣는다. 그리고 DB 가 아니라 hashmap 에서 가져온다.</p><blockquote><p>다음을 고려해야 한다.</p><ol><li>n 분마다 DB 업데이트</li><li>캐시에서 notFound 이면 에러를 반환하는 게 아니라 DB 조회 후 있으면 캐시에 저장하고 반환, 없으면 에러 반환</li></ol></blockquote><h4 id="_3-1-2-1-reponse-time" tabindex="-1"><a class="header-anchor" href="#_3-1-2-1-reponse-time"><span>3.1.2.1 Reponse Time</span></a></h4><p>![image-20250926145910672](/images/Untitled 1/image-20250926145910672.png)</p><p>약 800 ~ 950ms 로 줄어들었다.</p><h4 id="_3-1-2-2-데이터베이스-지표" tabindex="-1"><a class="header-anchor" href="#_3-1-2-2-데이터베이스-지표"><span>3.1.2.2 데이터베이스 지표</span></a></h4><p>![image-20250926145838585](/images/Untitled 1/image-20250926145838585.png)</p><p>DB 의 CPU 사용률은 약 65% 까지 줄어들었다.</p>`,71)]))}const c=s(t,[["render",l],["__file","Untitled 1.html.vue"]]),r=JSON.parse('{"path":"/posts/database/Untitled%201.html","title":"1. App 검색 부하테스트","lang":"en-US","frontmatter":{},"headers":[{"level":1,"title":"1. App 검색 부하테스트","slug":"_1-app-검색-부하테스트","link":"#_1-app-검색-부하테스트","children":[{"level":2,"title":"1.1 테스트 조건","slug":"_1-1-테스트-조건","link":"#_1-1-테스트-조건","children":[]},{"level":2,"title":"1.2 테스트 결과","slug":"_1-2-테스트-결과","link":"#_1-2-테스트-결과","children":[{"level":3,"title":"1.2.1 Response Time","slug":"_1-2-1-response-time","link":"#_1-2-1-response-time","children":[]},{"level":3,"title":"1.2.2 CPU 및 메모리 사용률","slug":"_1-2-2-cpu-및-메모리-사용률","link":"#_1-2-2-cpu-및-메모리-사용률","children":[]},{"level":3,"title":"![image-20250926102129458](/images/Untitled 1/image-20250926102129458.png)","slug":"image-20250926102129458-images-untitled-1-image-20250926102129458-png","link":"#image-20250926102129458-images-untitled-1-image-20250926102129458-png","children":[]},{"level":3,"title":"1.2.3 데이터베이스 지표","slug":"_1-2-3-데이터베이스-지표","link":"#_1-2-3-데이터베이스-지표","children":[]}]},{"level":2,"title":"3.1 해결","slug":"_3-1-해결","link":"#_3-1-해결","children":[{"level":3,"title":"3.1.1 해결 1: 쿼리 수정","slug":"_3-1-1-해결-1-쿼리-수정","link":"#_3-1-1-해결-1-쿼리-수정","children":[]},{"level":3,"title":"3.1.2 해결 2: Projection 사용과 Category Cache","slug":"_3-1-2-해결-2-projection-사용과-category-cache","link":"#_3-1-2-해결-2-projection-사용과-category-cache","children":[]}]}]}],"git":{},"filePathRelative":"_posts/database/Untitled 1.md"}');export{c as comp,r as data};
