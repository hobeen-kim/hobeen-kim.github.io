---
categories: "inflearn"
tag: "inflearn"
toc: true
toc_sticky: true
author_profile: false
sidebar: 
    nav: "docs"
---

# 1 . 스프링의 핵심

- 스프링은 자바 언어 기반의 프레임워크
- 자바 언어의 가장 큰 특징 - 객체 지향 언어
- 스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크
- 스프링은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크

## 스프링과 객체 지향

- 다형성이 가장 중요하다! 
- 스프링은 다형성을 극대화해서 이용할 수 있게 도와준다. 
- 스프링에서 이야기하는 제어의 역전(IoC), 의존관계 주입(DI)은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다. 
- 스프링을 사용하면 마치 레고 블럭 조립하듯이! 공연 무대의 배우를 선택하듯이! 구현을 편리하게 변경할 수 있다.

# 2. 다형성

- 객체지향 특징 : 추상화, 캡슐화, 상속, 다형성
- 다형성(polymorphism)이란 하나의 객체가 여러 가지 타입을 가질 수 있는 것을 의미한다.
- 자바에서는 이러한 다형성을 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 인스턴스를 참조할 수 있도록 하여 구현하고 있다.

### 실세계 비유

- ![image-20230215155727022](../../images/2023-02-15-Spring basic2 객체 지향 설계와 스프링/image-20230215155727022.png)

- 역할(자동차)  구현(K3, 아반떼, 테슬라) 등으로 분리

## 역할과 구현을 분리

- 역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다. 
- 장점
  - 클라이언트는 대상의 역할(인터페이스)만 알면 된다.
  - 클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
  - 클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
  - 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.

### 자바에서

- 자바 언어의 다형성을 활용한다.
- 역할 = 인터페이스 / 구현 = 인터페이스를 구현한 클래스, 구현 객체
- 객체를 설계할 때 역할과 구현을 명확히 분리한다.
- 객체 설계시 역할(인터페이스)을 먼저 부여하고, 그 역할을 수행하는 구현 객체 만들기
- ![image-20230215155955036](../../images/2023-02-15-Spring basic2 객체 지향 설계와 스프링/image-20230215155955036.png)
  - 오버라이딩을 떠올려본다면,
  - 오버라이딩은 자바 기본 문법이고 오버라이딩 된 메서드가 실행된다.
  - 다형성으로 인터페이스를 구현한 객체 를 실행 시점에 유연하게 변경할 수 있 다. 
  - 물론 클래스 상속 관계도 다형성, 오버 라이딩 적용가능하다.

## 다형성의 본질

- 인터페이스를 구현한 객체 인스턴스를 실행 시점에 유연하게 변경할 수 있다.
- 다형성의 본질을 이해하려면 협력이라는 객체사이의 관계에서 시작해야한다.
- 클라이언트를 변경하지 않고, 서버의 구현 기능을 유연하게 변경할 수 있다.

# 3. 좋은 객체 지향 설계의 5가지 원칙 (SOLID)

- SOLID : 클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리
  - SRP: 단일 책임 원칙(single responsibility principle)
  - OCP: 개방-폐쇄 원칙 (Open/closed principle)
  - LSP: 리스코프 치환 원칙 (Liskov substitution principle)
  - ISP: 인터페이스 분리 원칙 (Interface segregation principle)
  - DIP: 의존관계 역전 원칙 (Dependency inversion principle)

## SRP 단일 책임 원칙

- 한 클래스는 하나의 책임만 가져야 한다.
- 하나의 책임이라는 것은 모호하다.
  - 클 수 있고, 작을 수 있다.
  - 문맥과 상황에 따라 다르다.
- 중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것이다.
  - 예) UI 변경, 객체의 생성과 사용을 분리

## OCP 개방-폐쇄 원칙

- 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다
- 이런 거짓말 같은 말이? 확장을 하려면, 당연히 기존 코드를 변경?
- 다형성을 활용해보자
- 인터페이스를 구현한 새로운 클래스를 하나 만들어서 새로운 기능을 구현

### 문제점

- MemberService 클라이언트가 구현 클래스를 직접 선택 
  - MemberRepository m = new MemoryMemberRepository(); //기존 코드 
  - MemberRepository m = new JdbcMemberRepository(); //변경 코드
-  구현 객체를 변경하려면 클라이언트 코드를 변경해야 한다. • 분명 다형성을 사용했지만 OCP 원칙을 지킬 수 없다. 
- 이 문제를 어떻게 해결해야 하기 위해 객체를 생성하고, 연관관계를 맺어주는 별도의 조립, 설정자가 필요하다.

## LSP 리스코프 치환 원칙

- 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다 
- 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 인터페이스를 구현한 구현체는 믿고 사용하려면, 이 원칙이 필요하다. 
- 단순히 컴파일에 성공하는 것을 넘어서는 이야기다.
- 예) 자동차 인터페이스의 엑셀은 앞으로 가라는 기능, 뒤로 가게 구현하면 LSP 위반, 느리 더라도 앞으로 가야한다.

## ISP 인터페이스 분리 원칙

- 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
  - 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리 
  - 사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리 
- 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않는다.
- 인터페이스가 명확해지고, 대체 가능성이 높아진다.

## DIP 의존관계 역전 원칙

- 프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.” 의존성 주입은 이 원칙 을 따르는 방법 중 하나다. •
- 쉽게 이야기해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻 
- 앞에서 이야기한 역할(Role)에 의존하게 해야 한다는 것과 같다. 객체 세상도 클라이언트 가 인터페이스에 의존해야 유연하게 구현체를 변경할 수 있다! 구현체에 의존하게 되면 변 경이 아주 어려워진다.

### 문제점

- 그런데 OCP에서 설명한 MemberService는 인터페이스에 의존하지만, 구현 클래스도 동시에 의존한다. 
- MemberService 클라이언트가 구현 클래스를 직접 선택 
  - MemberRepository m = new MemoryMemberRepository(); // DIP 위반









